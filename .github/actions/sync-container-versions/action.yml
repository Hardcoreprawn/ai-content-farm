name: 'Sync Container Versions'
description: 'Compare GHCR container versions with Container Apps and update if newer'

inputs:
  registry:
    description: 'Container registry URL'
    required: true
  repository:
    description: 'Container repository name'
    required: true
  image-tag:
    description: 'New image tag to sync'
    required: true
  resource-group:
    description: 'Azure resource group name'
    required: true
  container-name:
    description: 'Specific container to sync (e.g., site-generator)'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Compare and Update Container Versions
      shell: bash
      env:
        RESOURCE_GROUP_INPUT: ${{ inputs.resource-group }}
        NEW_TAG_INPUT: ${{ inputs.image-tag }}
        REGISTRY_INPUT: ${{ inputs.registry }}
        REPOSITORY_INPUT: ${{ inputs.repository }}
        TARGET_CONTAINER_INPUT: ${{ inputs.container-name }}
      run: |
        echo "[SYNC] Starting container version sync for specific container..."

        # Safely assign environment variables
        RESOURCE_GROUP="$RESOURCE_GROUP_INPUT"
        NEW_TAG="$NEW_TAG_INPUT"
        REGISTRY="$REGISTRY_INPUT"
        REPOSITORY="$REPOSITORY_INPUT"
        TARGET_CONTAINER="$TARGET_CONTAINER_INPUT"

        echo "[INFO] Syncing container version:"
        echo "  Registry: $REGISTRY"
        echo "  Repository: $REPOSITORY"
        echo "  New Tag: $NEW_TAG"
        echo "  Resource Group: $RESOURCE_GROUP"
        echo "  Target Container: $TARGET_CONTAINER"
        echo

        # Dynamically discover container apps and their container names from Azure
        echo "[DISCOVER] Finding Azure Container Apps in resource group..."

        # Get all container apps with their container names
        mapfile -t app_data < <(az containerapp list \
          --resource-group "$RESOURCE_GROUP" \
          --query "[].{name:name, container:properties.template.containers[0].name}" \
          --output tsv 2>/dev/null)

        if [[ ${#app_data[@]} -eq 0 ]]; then
          echo "[ERROR] No container apps found in resource group: $RESOURCE_GROUP"
          exit 1
        fi

        # Build dynamic mapping and find our target
        declare -A containers=()
        app_name=""

        echo "[DISCOVER] Found container apps:"
        for line in "${app_data[@]}"; do
          # Each line is: "app-name\tcontainer-name"
          IFS=$'\t' read -r azure_app_name container_name <<< "$line"
          containers["$azure_app_name"]="$container_name"
          echo "  - $azure_app_name â†’ $container_name"

          # Check if this is our target
          if [[ "$container_name" == "$TARGET_CONTAINER" ]]; then
            app_name="$azure_app_name"
          fi
        done

        if [[ -z "$app_name" ]]; then
          echo "[ERROR] No Azure Container App found for container: $TARGET_CONTAINER"
          echo "Available containers: ${containers[@]}"
          exit 1
        fi

        echo "[MATCH] Found Azure Container App: $app_name"
        echo

        echo "[SCAN] Checking $app_name ($TARGET_CONTAINER)..."

        # Start timing
        sync_start_time=$(date +%s)

        # Get current container image from Container App with optimized query
        echo "  [CHECK] Retrieving current image information..."
        current_image=$(az containerapp show \
          --name "$app_name" \
          --resource-group "$RESOURCE_GROUP" \
          --query "properties.template.containers[0].image" \
          --output tsv 2>/dev/null || echo "")

        if [[ -z "$current_image" ]]; then
          echo "  [WARN] Could not retrieve current image for $app_name, creating new deployment..."
          current_tag="none"
          needs_update=true
        else
          # Extract current tag
          current_tag=$(echo "$current_image" | sed 's/.*://')

          # Check if update is actually needed
          if [[ "$current_tag" == "$NEW_TAG" ]]; then
            needs_update=false
          else
            needs_update=true
          fi
        fi

        new_image="$REGISTRY/$REPOSITORY/$TARGET_CONTAINER:$NEW_TAG"

        echo "  [CURRENT] $current_image"
        echo "  [NEW]     $new_image"
        echo "  [ANALYSIS] Update needed: $needs_update"

        update_success=false
        if [[ "$needs_update" == "true" ]]; then
          echo "  [UPDATE] Updating $app_name to tag $NEW_TAG..."

          # Update container app with new image using optimized CLI options
          echo "  [TIMING] Starting Azure Container App update..."
          update_start_time=$(date +%s)

          az containerapp update \
            --name "$app_name" \
            --resource-group "$RESOURCE_GROUP" \
            --image "$new_image" \
            --output none \
            --only-show-errors

          update_result=$?
          update_end_time=$(date +%s)
          update_duration=$((update_end_time - update_start_time))

          if [[ $update_result -eq 0 ]]; then
            echo "  [PASS] Successfully updated $app_name in ${update_duration}s"
            update_success=true
          else
            echo "  [FAIL] Failed to update $app_name after ${update_duration}s"
            exit 1
          fi
        else
          echo "  [PASS] $app_name already at correct version - skipping update"
          update_success=true
        fi

        # Calculate total sync time
        sync_end_time=$(date +%s)
        total_sync_duration=$((sync_end_time - sync_start_time))
        echo "  [TIMING] Total sync time: ${total_sync_duration}s"

        echo "[COMPLETE] Container sync complete for $TARGET_CONTAINER!"

        # Add to job summary
        {
          echo "## Container Sync Results - $TARGET_CONTAINER"
          echo ""
          echo "| Container App | Current Image | Status | Sync Time |"
          echo "|---------------|---------------|--------|-----------|"
        } >> "$GITHUB_STEP_SUMMARY"

        # Get final image to confirm
        final_image=$(az containerapp show \
          --name "$app_name" \
          --resource-group "$RESOURCE_GROUP" \
          --query "properties.template.containers[0].image" \
          --output tsv 2>/dev/null || echo "Error")
        final_tag=$(echo "$final_image" | sed 's/.*://')

        if [[ "$final_tag" == "$NEW_TAG" ]]; then
          if [[ "$needs_update" == "true" ]]; then
            status="[PASS] Updated to $NEW_TAG"
          else
            status="[PASS] Already at $NEW_TAG"
          fi
        else
          status="[FAIL] Failed to sync"
        fi

        echo "| $app_name | $final_image | $status | ${total_sync_duration}s |" >> "$GITHUB_STEP_SUMMARY"

        echo "" >> "$GITHUB_STEP_SUMMARY"
        if [[ "$needs_update" == "true" ]]; then
          echo "**Container updated successfully in ${total_sync_duration}s**" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "**Container already up-to-date (${total_sync_duration}s)**" >> "$GITHUB_STEP_SUMMARY"
        fi
