name: 'Smart Deploy'
description: 'Unified deployment action for containers and Terraform'
inputs:
  client-id:
    description: 'Azure service principal client ID'
    required: true
  tenant-id:
    description: 'Azure tenant ID'
    required: true
  subscription-id:
    description: 'Azure subscription ID'
    required: true
  environment:
    description: 'Environment to deploy to'
    required: true
    default: 'production'
  deployment-method:
    description: 'Deployment method: containers, terraform, or skip'
    required: true
  terraform-storage-account:
    description: 'Terraform state storage account name'
    required: false
    default: 'aicontentfarmtfstate'
  github-token:
    description: 'GitHub token for registry access'
    required: true
  image-tag:
    description: 'Image tag to use for all containers'
    required: true

outputs:
  deployment-url:
    description: 'URL of the deployed application'
    value: ${{ steps.deploy.outputs.deployment-url }}

runs:
  using: 'composite'
  steps:
    - name: Skip Deployment
      if: inputs.deployment-method == 'skip'
      shell: bash
      run: |
        echo "Skipping deployment - no relevant changes detected"
        base_url="https://ai-content-farm-${{ inputs.environment }}"
        url="${base_url}.azurecontainerapps.io"
        echo "deployment-url=$url" >> "$GITHUB_OUTPUT"

    - name: Container Deployment
      id: container-deploy
      if: inputs.deployment-method == 'containers'
      shell: bash
      run: |
        echo "Performing container update deployment..."

        # Get resource group
        if [[ "${{ inputs.environment }}" == "production" ]]; then
          rg="ai-content-prod-rg"
        else
          rg="ai-content-staging-rg"
        fi

        echo "Would update container apps in $rg"

        # Set deployment URL
        base_url="https://ai-content-farm-${{ inputs.environment }}"
        url="${base_url}.azurecontainerapps.io"
        echo "deployment-url=$url" >> "$GITHUB_OUTPUT"

    - name: Terraform Deployment
      id: terraform-deploy
      if: inputs.deployment-method == 'terraform'
      shell: bash
      env:
        ARM_CLIENT_ID: ${{ inputs.client-id }}
        ARM_TENANT_ID: ${{ inputs.tenant-id }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.subscription-id }}
        ARM_USE_OIDC: true
      run: |
        echo "Checking Terraform state and planning deployment..."
        echo "Using service principal authentication with OIDC"

        cd infra

        # Initialize Terraform with backend config matching backend.tf
        # Use the storage account from backend.tf unless overridden
        storage_account="${{ inputs.terraform-storage-account }}"
        if [[ -z "$storage_account" ]]; then
          storage_account="aicontentfarmtfstate"
        fi

        terraform init \
          -backend-config="storage_account_name=$storage_account" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=terraform-${{ inputs.environment }}.tfstate"

        # Select workspace
        env="${{ inputs.environment }}"
        terraform workspace select "$env" || \
          terraform workspace new "$env"

        # Plan and check if there are changes
        echo "Running terraform plan to check for changes..."
        if terraform plan -detailed-exitcode -out=tfplan; then
          echo "No changes detected in Terraform state"
          echo "terraform-changes=false" >> "$GITHUB_OUTPUT"
        else
          exit_code=$?
          if [[ $exit_code -eq 2 ]]; then
            echo "Terraform changes detected, applying..."
            terraform apply -auto-approve tfplan
            echo "terraform-changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "Terraform plan failed with exit code $exit_code"
            exit $exit_code
          fi
        fi

        # Get deployment URL
        url=$(terraform output -raw site_url 2>/dev/null || \
          echo "https://ai-content-farm-$env.azurecontainerapps.io")
        echo "deployment-url=$url" >> "$GITHUB_OUTPUT"

    - name: Set Output
      id: deploy
      shell: bash
      run: |
        method="${{ inputs.deployment-method }}"
        if [[ "$method" == "containers" ]]; then
          url="${{ steps.container-deploy.outputs.deployment-url }}"
          echo "deployment-url=$url" >> "$GITHUB_OUTPUT"
        elif [[ "$method" == "terraform" ]]; then
          url="${{ steps.terraform-deploy.outputs.deployment-url }}"
          echo "deployment-url=$url" >> "$GITHUB_OUTPUT"
        else
          base_url="https://ai-content-farm-${{ inputs.environment }}"
          url="${base_url}.azurecontainerapps.io"
          echo "deployment-url=$url" >> "$GITHUB_OUTPUT"
        fi
