name: 'Smart Deploy'
description: 'Unified deployment action for containers and Terraform'
inputs:
  client-id:
    description: 'Azure service principal client ID'
    required: true
  tenant-id:
    description: 'Azure tenant ID'
    required: true
  subscription-id:
    description: 'Azure subscription ID'
    required: true
  environment:
    description: 'Environment to deploy to'
    required: true
    default: 'production'
  deployment-method:
    description: 'Deployment method: containers, terraform, or skip'
    required: true
  terraform-storage-account:
    description: 'Terraform state storage account name'
    required: false
    default: 'aicontentfarmtfstate'
  github-token:
    description: 'GitHub token for registry access'
    required: true
  image-tag:
    description: 'Image tag to use for all containers'
    required: true

outputs:
  deployment-url:
    description: 'URL of the deployed application'
    value: ${{ steps.deploy.outputs.deployment-url }}

runs:
  using: 'composite'
  steps:
    - name: Skip Deployment
      if: inputs.deployment-method == 'skip'
      shell: bash
      run: |
        echo "Skipping deployment - no relevant changes detected"
        environment="$(printf '%s' '${{ inputs.environment }}' | sed 's/[^a-zA-Z0-9-]//g')"
        base_url="https://ai-content-farm-${environment}"
        url="${base_url}.azurecontainerapps.io"
        echo "deployment-url=$url" >> "$GITHUB_OUTPUT"

    - name: Container Deployment
      id: container-deploy
      if: inputs.deployment-method == 'containers'
      shell: bash
      run: |
        echo "Performing container update deployment..."

        # Get resource group
        environment="$(printf '%s' '${{ inputs.environment }}' | sed 's/[^a-zA-Z0-9-]//g')"
        if [[ "$environment" == "production" ]]; then
          rg="ai-content-prod-rg"
        else
          rg="ai-content-staging-rg"
        fi

        echo "Would update container apps in $rg"

        # Set deployment URL
        base_url="https://ai-content-farm-${{ inputs.environment }}"
        url="${base_url}.azurecontainerapps.io"
        echo "deployment-url=$url" >> "$GITHUB_OUTPUT"

    - name: Terraform Deployment
      id: terraform-deploy
      if: inputs.deployment-method == 'terraform'
      shell: bash
      env:
        ARM_CLIENT_ID: ${{ inputs.client-id }}
        ARM_TENANT_ID: ${{ inputs.tenant-id }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.subscription-id }}
        ARM_USE_OIDC: true
      run: |
        echo "Checking Terraform state and planning deployment..."
        echo "Using service principal authentication with OIDC"

        cd infra

        # Initialize Terraform with backend config matching backend.tf
        # Use the storage account from backend.tf unless overridden
        storage_account="$(printf '%s' '${{ inputs.terraform-storage-account }}' | \
          sed 's/[^a-zA-Z0-9-]//g')"
        if [[ -z "$storage_account" ]]; then
          storage_account="aicontentfarmtfstate"
        fi

        terraform init \
          -backend-config="storage_account_name=$storage_account" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=terraform-${{ inputs.environment }}.tfstate"

        # Use default workspace with environment-specific state file
        # No need to create separate workspaces as state files handle environment separation

        # Plan and check if there are changes
        env="${{ inputs.environment }}"
        echo "Running terraform plan to check for changes..."
        echo "Using image tag: ${{ inputs.image-tag }}"
        echo "Environment: $env"

        # Run terraform plan and capture the exit code
        set +e  # Disable exit on error temporarily

        echo "Running terraform plan with detailed-exitcode..."
        terraform plan -detailed-exitcode -out=tfplan \
          -var="image_tag=${{ inputs.image-tag }}" \
          -var="environment=$env"
        plan_exit_code=$?
        set -e  # Re-enable exit on error

        echo "Terraform plan exit code: $plan_exit_code"
        echo "Exit code meanings: 0=no changes, 1=error, 2=changes detected"

        if [[ $plan_exit_code -eq 0 ]]; then
          echo "No changes detected in Terraform state (exit code 0)"
          echo "terraform-changes=false" >> "$GITHUB_OUTPUT"
        elif [[ $plan_exit_code -eq 2 ]]; then
          echo "Terraform changes detected (exit code 2), applying..."
          terraform apply -auto-approve tfplan
          echo "terraform-changes=true" >> "$GITHUB_OUTPUT"
        elif [[ $plan_exit_code -eq 1 ]]; then
          echo "Terraform plan failed with error (exit code 1)"
          exit 1
        else
          echo "Terraform plan returned unexpected exit code: $plan_exit_code"
          exit $plan_exit_code
        fi

        # Get deployment URL - prefer custom domain if available, fallback to default
        custom_url=$(terraform output -raw static_web_app_custom_domain 2>/dev/null || echo "")
        default_url=$(terraform output -raw static_web_app_url 2>/dev/null || echo "")

        if [[ -n "$custom_url" && "$custom_url" != "https://" ]]; then
          url="$custom_url"
        elif [[ -n "$default_url" ]]; then
          url="$default_url"
        else
          url="https://ai-content-farm-$env.azurecontainerapps.io"
        fi

        echo "deployment-url=$url" >> "$GITHUB_OUTPUT"

    - name: Set Output
      id: deploy
      shell: bash
      run: |
        method="$(printf '%s' '${{ inputs.deployment-method }}' | \
          sed 's/[^a-zA-Z0-9-]//g')"
        if [[ "$method" == "containers" ]]; then
          url="${{ steps.container-deploy.outputs.deployment-url }}"
          echo "deployment-url=$url" >> "$GITHUB_OUTPUT"
        elif [[ "$method" == "terraform" ]]; then
          url="${{ steps.terraform-deploy.outputs.deployment-url }}"
          echo "deployment-url=$url" >> "$GITHUB_OUTPUT"
        else
          environment="$(printf '%s' '${{ inputs.environment }}' | \
            sed 's/[^a-zA-Z0-9-]//g')"
          base_url="https://ai-content-farm-${environment}"
          url="${base_url}.azurecontainerapps.io"
          echo "deployment-url=$url" >> "$GITHUB_OUTPUT"
        fi
