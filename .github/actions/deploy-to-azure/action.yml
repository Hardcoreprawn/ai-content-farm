name: 'Deploy to Azure Container Apps'
description: 'Deploys service containers to Azure Container Apps using Terraform'
inputs:
  client-id:
    description: 'Azure service principal client ID'
    required: true
  tenant-id:
    description: 'Azure tenant ID'
    required: true
  subscription-id:
    description: 'Azure subscription ID'
    required: true
  environment:
    description: 'Environment to deploy to (staging/production)'
    required: true
    default: 'production'
  containers:
    description: 'Comma-separated list of containers to deploy (default: all)'
    required: false
    default: 'all'
  terraform-storage-account:
    description: 'Terraform state storage account name'
    required: false
    default: 'aicontentstagingstv33ppo'
  github-token:
    description: 'GitHub token for pushing to container registry'
    required: true
outputs:
  deployment-url:
    description: 'URL of the deployed application'
    value: ${{ steps.get-url.outputs.url }}
  deployed-containers:
    description: 'List of containers that were deployed'
    value: ${{ steps.deploy.outputs.containers }}

runs:
  using: 'composite'
  steps:
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.client-id }}
        tenant-id: ${{ inputs.tenant-id }}
        subscription-id: ${{ inputs.subscription-id }}

    - name: Deploy Infrastructure
      shell: bash
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        STORAGE_ACCOUNT: ${{ inputs.terraform-storage-account }}
        ARM_CLIENT_ID: ${{ inputs.client-id }}
        ARM_TENANT_ID: ${{ inputs.tenant-id }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.subscription-id }}
        ARM_USE_OIDC: true
      run: |
        echo "[PACKAGE] Deploying infrastructure with Terraform..."
        cd infra

        # Azure authentication details are already set in environment
        export ARM_CLIENT_ID="$ARM_CLIENT_ID"
        export ARM_TENANT_ID="$ARM_TENANT_ID"
        export ARM_SUBSCRIPTION_ID="$ARM_SUBSCRIPTION_ID"
        export ARM_USE_OIDC="$ARM_USE_OIDC"

        # Initialize Terraform with environment-specific state file
        echo "[CONFIG] Using state file: terraform-${ENVIRONMENT}.tfstate"
        docker run --rm \
          -v "${PWD}":/workspace \
          -w /workspace \
          -e ARM_CLIENT_ID \
          -e ARM_TENANT_ID \
          -e ARM_SUBSCRIPTION_ID \
          -e ARM_USE_OIDC \
          -e ACTIONS_ID_TOKEN_REQUEST_TOKEN \
          -e ACTIONS_ID_TOKEN_REQUEST_URL \
          hashicorp/terraform:latest \
          init -reconfigure \
          -backend-config="key=terraform-${ENVIRONMENT}.tfstate" \
          -backend-config="storage_account_name=${STORAGE_ACCOUNT}"

        echo "[PASS] Infrastructure initialized"

    - name: Build and Push Service Containers
      shell: bash
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        CONTAINERS: ${{ inputs.containers }}
        ARM_CLIENT_ID: ${{ inputs.client-id }}
        ARM_TENANT_ID: ${{ inputs.tenant-id }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.subscription-id }}
        ARM_USE_OIDC: true
        TERRAFORM_STORAGE_ACCOUNT: ${{ inputs.terraform-storage-account }}
      run: |
        echo "[BUILD] Building and pushing service containers..."

        # Get ACR details from Terraform
        cd infra

        # Initialize Terraform to access state
        export ARM_CLIENT_ID="$ARM_CLIENT_ID"
        export ARM_TENANT_ID="$ARM_TENANT_ID"
        export ARM_SUBSCRIPTION_ID="$ARM_SUBSCRIPTION_ID"
        export ARM_USE_OIDC="$ARM_USE_OIDC"

        docker run --rm \
          -v "${PWD}":/workspace \
          -w /workspace \
          -e ARM_CLIENT_ID \
          -e ARM_TENANT_ID \
          -e ARM_SUBSCRIPTION_ID \
          -e ARM_USE_OIDC \
          -e ACTIONS_ID_TOKEN_REQUEST_TOKEN \
          -e ACTIONS_ID_TOKEN_REQUEST_URL \
          hashicorp/terraform:latest \
          init -reconfigure \
          -backend-config="key=terraform-${ENVIRONMENT}.tfstate" \
          -backend-config="storage_account_name=$TERRAFORM_STORAGE_ACCOUNT"

        # Get resource group from Terraform state
        RESOURCE_GROUP=$(docker run --rm \
          -v "${PWD}":/workspace \
          -w /workspace \
          -e ARM_CLIENT_ID \
          -e ARM_TENANT_ID \
          -e ARM_SUBSCRIPTION_ID \
          -e ARM_USE_OIDC \
          -e ACTIONS_ID_TOKEN_REQUEST_TOKEN \
          -e ACTIONS_ID_TOKEN_REQUEST_URL \
          hashicorp/terraform:latest \
          output -raw resource_group_name)

        cd ..

        # Login to GitHub Container Registry
        echo "${{ inputs.github-token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

        # Determine which containers to deploy
        if [ "$CONTAINERS" = "all" ]; then
          CONTAINERS=("content-generator" "content-collector" "content-ranker" "site-generator" "content-enricher" "content-processor" "markdown-generator" "collector-scheduler")
        else
          IFS=',' read -ra CONTAINERS <<< "$CONTAINERS"
        fi

        for container in "${CONTAINERS[@]}"; do
          echo "Building and pushing $container..."

          # Build production target for security and optimization
          docker build -f containers/$container/Dockerfile --target production -t $container:latest .

          # Tag for GHCR
          docker tag $container:latest ghcr.io/hardcoreprawn/ai-content-farm/$container:latest

          # Push to GHCR
          docker push ghcr.io/hardcoreprawn/ai-content-farm/$container:latest

          echo "[PASS] $container pushed to GHCR"
        done

    - name: Deploy with Terraform
      id: deploy
      shell: bash
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        STORAGE_ACCOUNT: ${{ inputs.terraform-storage-account }}
        ARM_CLIENT_ID: ${{ inputs.client-id }}
        ARM_TENANT_ID: ${{ inputs.tenant-id }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.subscription-id }}
        ARM_USE_OIDC: true
        CONTAINERS_OUTPUT: ${{ inputs.containers }}
      run: |
        echo "[TERRAFORM] Deploying/updating infrastructure and container apps..."
        cd infra

        # Set up Terraform environment
        export ARM_CLIENT_ID="$ARM_CLIENT_ID"
        export ARM_TENANT_ID="$ARM_TENANT_ID"
        export ARM_SUBSCRIPTION_ID="$ARM_SUBSCRIPTION_ID"
        export ARM_USE_OIDC="$ARM_USE_OIDC"

        # Re-run terraform apply to pick up the new container images
        echo "[CONFIG] Using state file: terraform-${ENVIRONMENT}.tfstate"
        docker run --rm \
          -v "${PWD}":/workspace \
          -w /workspace \
          -e ARM_CLIENT_ID \
          -e ARM_TENANT_ID \
          -e ARM_SUBSCRIPTION_ID \
          -e ARM_USE_OIDC \
          -e ACTIONS_ID_TOKEN_REQUEST_TOKEN \
          -e ACTIONS_ID_TOKEN_REQUEST_URL \
          hashicorp/terraform:latest \
          apply -auto-approve -var-file="${ENVIRONMENT}.tfvars"

        echo "[PASS] Terraform deployment completed"
        echo "containers=$CONTAINERS_OUTPUT" >> $GITHUB_OUTPUT

    - name: Get Deployment URL
      id: get-url
      shell: bash
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        ARM_CLIENT_ID: ${{ inputs.client-id }}
        ARM_TENANT_ID: ${{ inputs.tenant-id }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.subscription-id }}
        ARM_USE_OIDC: true
      run: |
        cd infra

        # Get site generator URL from Terraform state
        export ARM_CLIENT_ID="$ARM_CLIENT_ID"
        export ARM_TENANT_ID="$ARM_TENANT_ID"
        export ARM_SUBSCRIPTION_ID="$ARM_SUBSCRIPTION_ID"
        export ARM_USE_OIDC="$ARM_USE_OIDC"

        # Try to get the URL from Terraform outputs (if we add it) or from Azure CLI
        RESOURCE_GROUP=$(docker run --rm \
          -v "${PWD}":/workspace \
          -w /workspace \
          -e ARM_CLIENT_ID \
          -e ARM_TENANT_ID \
          -e ARM_SUBSCRIPTION_ID \
          -e ARM_USE_OIDC \
          -e ACTIONS_ID_TOKEN_REQUEST_TOKEN \
          -e ACTIONS_ID_TOKEN_REQUEST_URL \
          hashicorp/terraform:latest \
          output -raw resource_group_name)

        RESOURCE_PREFIX=$(docker run --rm \
          -v "${PWD}":/workspace \
          -w /workspace \
          -e ARM_CLIENT_ID \
          -e ARM_TENANT_ID \
          -e ARM_SUBSCRIPTION_ID \
          -e ARM_USE_OIDC \
          -e ACTIONS_ID_TOKEN_REQUEST_TOKEN \
          -e ACTIONS_ID_TOKEN_REQUEST_URL \
          hashicorp/terraform:latest \
          output -raw resource_prefix)

        # Get deployment URL from site-generator container app
        DEPLOYMENT_URL=$(az containerapp show \
          --name "${RESOURCE_PREFIX}-site-gen" \
          --resource-group "$RESOURCE_GROUP" \
          --query "properties.configuration.ingress.fqdn" \
          -o tsv 2>/dev/null)

        if [ -n "$DEPLOYMENT_URL" ]; then
          echo "[SUCCESS] Website URL: https://$DEPLOYMENT_URL"
          echo "url=https://$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        else
          echo "[WARNING] Could not retrieve deployment URL"
          echo "url=" >> $GITHUB_OUTPUT
        fi
