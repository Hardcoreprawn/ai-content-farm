name: 'Deploy to Azure Container Apps'
description: 'Deploys service containers to Azure Container Apps using multi-tier strategy'
inputs:
  azure-credentials:
    description: 'Azure service principal credentials'
    required: true
  resource-group:
    description: 'Azure resource group name'
    required: true
    default: 'ai-content-farm-core-rg'
  acr-name:
    description: 'Azure Container Registry name'
    required: true
    default: 'aicontentfarm76ko2hacr'
  environment:
    description: 'Environment to deploy to (staging/production)'
    required: true
    default: 'production'
  containers:
    description: 'Comma-separated list of containers to deploy (default: all)'
    required: false
    default: 'all'
outputs:
  deployment-url:
    description: 'URL of the deployed application'
    value: ${{ steps.deploy.outputs.url }}
  deployed-containers:
    description: 'List of containers that were deployed'
    value: ${{ steps.deploy.outputs.containers }}

runs:
  using: 'composite'
  steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ inputs.azure-credentials }}

    - name: Build and Push Base Images
      shell: bash
      env:
        ACR_NAME: ${{ inputs.acr-name }}
        RESOURCE_GROUP: ${{ inputs.resource-group }}
      run: |
        echo "üèóÔ∏è Building and pushing multi-tier base images to ACR..."

        # Get ACR login server
        ACR_LOGIN_SERVER=$(az acr show --name "$ACR_NAME" --resource-group "$RESOURCE_GROUP" --query loginServer -o tsv)
        echo "üìã ACR Login Server: $ACR_LOGIN_SERVER"

        # Login to ACR
        az acr login --name "$ACR_NAME"

        # Build and push base images
        base_images=("foundation" "common-deps" "web-services" "data-processing" "scheduler")

        for tier in "${base_images[@]}"; do
          echo "Building and pushing $tier base image..."

          # Build base image
          docker build -f containers/base/Dockerfile.multitier \
            -t ai-content-farm-base:$tier \
            --target $tier .

          # Tag for ACR
          docker tag ai-content-farm-base:$tier $ACR_LOGIN_SERVER/ai-content-farm-base:$tier

          # Push to ACR
          docker push $ACR_LOGIN_SERVER/ai-content-farm-base:$tier

          echo "‚úÖ $tier base image pushed to ACR"
        done

    - name: Build and Push Service Containers
      shell: bash
      env:
        ACR_NAME: ${{ inputs.acr-name }}
        RESOURCE_GROUP: ${{ inputs.resource-group }}
        CONTAINERS: ${{ inputs.containers }}
      run: |
        echo "üî® Building and pushing service containers..."

        ACR_LOGIN_SERVER=$(az acr show --name "$ACR_NAME" --resource-group "$RESOURCE_GROUP" --query loginServer -o tsv)

        # Determine which containers to deploy
        if [ "$CONTAINERS" = "all" ]; then
          CONTAINERS=("content-generator" "content-enricher" "content-processor" "content-ranker" "markdown-generator" "site-generator" "content-collector" "collector-scheduler")
        else
          IFS=',' read -ra CONTAINERS <<< "$CONTAINERS"
        fi

        for container in "${CONTAINERS[@]}"; do
          echo "Building and pushing $container..."

          # Build from repo root with correct context
          docker build -f containers/$container/Dockerfile -t $container:latest .

          # Tag for ACR
          docker tag $container:latest $ACR_LOGIN_SERVER/$container:latest

          # Push to ACR
          docker push $ACR_LOGIN_SERVER/$container:latest

          echo "‚úÖ $container pushed to ACR"
        done

    - name: Deploy Infrastructure
      shell: bash
      env:
        ENVIRONMENT: ${{ inputs.environment }}
      run: |
        echo "üì¶ Deploying infrastructure with Terraform..."
        cd infra

        # Initialize Terraform if needed
        if [ ! -d ".terraform" ]; then
          terraform init
        fi

        # Select workspace
        terraform workspace select "$ENVIRONMENT" || terraform workspace new "$ENVIRONMENT"

        # Plan and apply
        terraform plan -var="environment=$ENVIRONMENT" -out=tfplan
        terraform apply tfplan

        echo "‚úÖ Infrastructure deployed"

    - name: Update Container Apps
      id: deploy
      shell: bash
      env:
        ACR_NAME: ${{ inputs.acr-name }}
        RESOURCE_GROUP: ${{ inputs.resource-group }}
      run: |
        echo "üîÑ Updating Container Apps..."

        ACR_LOGIN_SERVER=$(az acr show --name "$ACR_NAME" --resource-group "$RESOURCE_GROUP" --query loginServer -o tsv)
        deployed_containers=""

        # For now, just update content-generator (expand this as more container apps are defined)
        containers_to_update=("content-generator")

        for container in "${containers_to_update[@]}"; do
          echo "Updating $container container app..."

          az containerapp update \
            --name "ai-content-farm-core-$container" \
            --resource-group "$RESOURCE_GROUP" \
            --image $ACR_LOGIN_SERVER/$container:latest

          echo "‚úÖ $container container app updated"

          if [ -z "$deployed_containers" ]; then
            deployed_containers="$container"
          else
            deployed_containers="$deployed_containers,$container"
          fi
        done

        # Get deployment URL
        DEPLOYMENT_URL=$(az containerapp show \
          --name "ai-content-farm-core-content-generator" \
          --resource-group "$RESOURCE_GROUP" \
          --query "properties.configuration.ingress.fqdn" \
          -o tsv)

        echo "üåê Deployment URL: https://$DEPLOYMENT_URL"
        echo "üìä Deployed containers: $deployed_containers"

        echo "url=https://$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "containers=$deployed_containers" >> $GITHUB_OUTPUT
