name: 'Build Multi-Tier Base Images'
description: 'Builds the multi-tier base images required for service containers'
inputs:
  registry:
    description: 'Container registry to tag images for (optional)'
    required: false
    default: ''
  enable-cache:
    description: 'Enable Docker layer caching'
    required: false
    default: 'false'
outputs:
  base-images-built:
    description: 'Comma-separated list of base images that were built'
    value: ${{ steps.build-bases.outputs.images }}

runs:
  using: 'composite'
  steps:
    - name: Build Multi-Tier Base Images
      id: build-bases
      shell: bash
      env:
        REGISTRY: ${{ inputs.registry }}
        ENABLE_CACHE: ${{ inputs.enable-cache }}
      run: |
        echo "[BUILD] Building multi-tier base images..."

        # Track built images
        built_images=""

        # Configure Docker cache if enabled
        cache_args=""
        if [ "$ENABLE_CACHE" = "true" ]; then
          echo "[DEPLOY] Docker layer caching enabled"
          cache_args="--cache-from=type=gha --cache-to=type=gha,mode=max"
        fi

        # Build each tier in dependency order
        base_images=(
          "foundation"
          "common-deps"
          "web-services"
          "data-processing"
          "scheduler"
        )

        for tier in "${base_images[@]}"; do
          echo "Building $tier tier..."

          # Build command with optional caching
          build_cmd="docker build -f containers/base/Dockerfile.multitier"
          build_cmd="$build_cmd -t ai-content-farm-base:$tier"
          build_cmd="$build_cmd --target $tier"

          if [ -n "$cache_args" ]; then
            build_cmd="$build_cmd $cache_args"
          fi

          build_cmd="$build_cmd ."

          if eval "$build_cmd"; then
            echo "[PASS] $tier base image built successfully"

            # Add to built images list
            if [ -z "$built_images" ]; then
              built_images="ai-content-farm-base:$tier"
            else
              built_images="$built_images,ai-content-farm-base:$tier"
            fi

            # Tag for registry if provided
            if [ -n "$REGISTRY" ]; then
              docker tag ai-content-farm-base:$tier "$REGISTRY/ai-content-farm-base:$tier"
              echo "Tagged for registry: $REGISTRY/ai-content-farm-base:$tier"
            fi
          else
            echo "[FAIL] $tier base image build failed"
            exit 1
          fi
        done

        echo "[PASS] All base images built successfully: $built_images"
        echo "images=$built_images" >> $GITHUB_OUTPUT
