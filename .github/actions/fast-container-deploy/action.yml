name: 'Fast Container Deploy'
description: 'Fast deployment by updating Azure Container Apps with new container images (bypasses Terraform)'
inputs:
  client-id:
    description: 'Azure service principal client ID'
    required: true
  tenant-id:
    description: 'Azure tenant ID'
    required: true
  subscription-id:
    description: 'Azure subscription ID'
    required: true
  environment:
    description: 'Environment to deploy to'
    required: true
    default: 'production'
  registry-images:
    description: 'JSON object mapping container names to registry URLs'
    required: true
outputs:
  deployment-url:
    description: 'URL of the deployed application'
    value: ${{ steps.deploy.outputs.deployment-url }}

runs:
  using: 'composite'
  steps:
    - name: Parse Registry Images
      id: parse
      shell: bash
      run: |
        echo "[SCAN] Parsing registry images for fast container deployment..."
        registry_images='${{ inputs.registry-images }}'
        echo "Registry images: $registry_images"

        # Extract container app names and new image URLs
        echo "$registry_images" > /tmp/registry_images.json

        # Verify JSON format
        if ! jq empty /tmp/registry_images.json 2>/dev/null; then
          echo "[FAIL] Invalid JSON format in registry-images"
          exit 1
        fi

        echo "[PASS] Registry images parsed successfully"

    - name: Fast Update Container Apps
      id: deploy
      shell: bash
      run: |
        echo "[DEPLOY] Starting fast container deployment (bypassing Terraform)..."

        # Set Azure CLI to use the subscription
        az account set --subscription ${{ inputs.subscription-id }}

        # Get resource group name based on environment
        case "${{ inputs.environment }}" in
          production)
            resource_group="rg-ai-content-farm-prod"
            ;;
          staging)
            resource_group="rg-ai-content-farm-staging"
            ;;
          *)
            echo "[FAIL] Unknown environment: ${{ inputs.environment }}"
            exit 1
            ;;
        esac

        echo "[INFO] Deploying to resource group: $resource_group"

        # Read registry images
        registry_images=$(cat /tmp/registry_images.json)

        # Container app name mapping (must match Terraform outputs)
        declare -A app_names=(
          ["content-collector"]="ca-content-collector"
          ["content-enricher"]="ca-content-enricher"
          ["content-generator"]="ca-content-generator"
          ["content-processor"]="ca-content-processor"
          ["content-ranker"]="ca-content-ranker"
          ["markdown-generator"]="ca-markdown-generator"
          ["site-generator"]="ca-site-generator"
          ["collector-scheduler"]="ca-collector-scheduler"
        )

        # Update each container app
        deployment_success=true
        updated_apps=()
        start_time=$(date +%s)

        for container_name in $(echo "$registry_images" | jq -r 'keys[]'); do
          image_url=$(echo "$registry_images" | jq -r --arg name "$container_name" '.[$name]')
          app_name="${app_names[$container_name]}"

          if [ -z "$app_name" ]; then
            echo "[WARN] Warning: No app name mapping found for container: $container_name"
            continue
          fi

          echo "[UPDATE] Updating $app_name with image: $image_url"

          # Update the container app with new image
          if az containerapp update \
            --name "$app_name" \
            --resource-group "$resource_group" \
            --image "$image_url" \
            --output none; then
            echo "[PASS] Successfully updated $app_name"
            updated_apps+=("$app_name")
          else
            echo "[FAIL] Failed to update $app_name"
            deployment_success=false
          fi
        done

        # Wait for deployments to complete
        echo "[WAIT] Waiting for deployments to complete..."
        for app_name in "${updated_apps[@]}"; do
          echo "[SCAN] Checking deployment status for $app_name..."

          # Wait up to 10 minutes for the deployment
          timeout=600
          interval=20
          elapsed=0

          while [ $elapsed -lt $timeout ]; do
            status=$(az containerapp show \
              --name "$app_name" \
              --resource-group "$resource_group" \
              --query "properties.provisioningState" \
              --output tsv 2>/dev/null || echo "Unknown")

            case "$status" in
              "Succeeded")
                echo "[PASS] $app_name deployment completed successfully"
                break
                ;;
              "Failed"|"Canceled")
                echo "[FAIL] $app_name deployment failed with status: $status"
                deployment_success=false
                break
                ;;
              "InProgress"|"Updating")
                echo "[WAIT] $app_name deployment in progress..."
                sleep $interval
                elapsed=$((elapsed + interval))
                ;;
              *)
                echo "[UNKNOWN] $app_name deployment status: $status (continuing...)"
                sleep $interval
                elapsed=$((elapsed + interval))
                ;;
            esac
          done

          if [ $elapsed -ge $timeout ]; then
            echo "[TIME] Timeout waiting for $app_name deployment"
            deployment_success=false
          fi
        done

        # Calculate deployment time
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        echo "[TIME] Fast deployment completed in ${duration} seconds"

        # Get the application URL
        main_app_url=""
        if az containerapp show \
          --name "ca-site-generator" \
          --resource-group "$resource_group" \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv >/dev/null 2>&1; then
          main_app_url="https://$(az containerapp show \
            --name "ca-site-generator" \
            --resource-group "$resource_group" \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv 2>/dev/null)"
        fi

        if [ "$deployment_success" = true ]; then
          echo "[SUCCESS] Fast container deployment completed successfully in ${duration}s!"
          echo "[APPS] Updated containers: ${updated_apps[*]}"
          if [ -n "$main_app_url" ]; then
            echo "[URL] Application URL: $main_app_url"
            echo "deployment-url=$main_app_url" >> "$GITHUB_OUTPUT"
          else
            echo "deployment-url=https://ai-content-farm-${{ inputs.environment }}.azurecontainerapps.io" >> "$GITHUB_OUTPUT"
          fi
        else
          echo "[FAIL] Some container deployments failed"
          exit 1
        fi

    - name: Verify Deployment Health
      shell: bash
      run: |
        echo "[HEALTH] Verifying deployment health..."

        # Wait a bit for apps to fully start
        sleep 30

        resource_group="rg-ai-content-farm-${{ inputs.environment == 'production' && 'prod' || inputs.environment }}"

        # Check health of updated containers
        healthy_count=0
        total_count=0

        registry_images=$(cat /tmp/registry_images.json)
        for container_name in $(echo "$registry_images" | jq -r 'keys[]'); do
          case "$container_name" in
            content-collector) app_name="ca-content-collector" ;;
            content-enricher) app_name="ca-content-enricher" ;;
            content-generator) app_name="ca-content-generator" ;;
            content-processor) app_name="ca-content-processor" ;;
            content-ranker) app_name="ca-content-ranker" ;;
            markdown-generator) app_name="ca-markdown-generator" ;;
            site-generator) app_name="ca-site-generator" ;;
            collector-scheduler) app_name="ca-collector-scheduler" ;;
            *) continue ;;
          esac

          total_count=$((total_count + 1))

          # Check if app has any running replicas
          current_replicas=$(az containerapp replica list \
            --name "$app_name" \
            --resource-group "$resource_group" \
            --query "length([?properties.runningState=='Running'])" \
            --output tsv 2>/dev/null || echo "0")

          if [ "$current_replicas" -gt 0 ]; then
            echo "[PASS] $app_name is healthy ($current_replicas replicas running)"
            healthy_count=$((healthy_count + 1))
          else
            echo "[WARN] $app_name may not be fully healthy yet (0 running replicas)"
          fi
        done

        echo "[STATS] Health Summary: $healthy_count/$total_count containers are healthy"

        if [ $healthy_count -eq $total_count ]; then
          echo "[SUCCESS] All deployed containers are healthy!"
        elif [ $healthy_count -gt 0 ]; then
          echo "[WARN] Some containers may need more time to start (partial success)"
        else
          echo "[FAIL] No containers appear to be healthy - this may indicate a deployment issue"
          exit 1
        fi
