name: 'Collect Build Results'
description: 'Collects and summarizes parallel container build results'
inputs:
  container-jobs:
    description: 'JSON object containing all container build job results'
    required: true
  all-containers:
    description: 'Comma-separated list of all containers in the project'
    required: true
outputs:
  containers-built:
    description: 'Comma-separated list of successfully built containers'
    value: ${{ steps.collect.outputs.containers-built }}
  build-result:
    description: 'Overall build result: success or failure'
    value: ${{ steps.collect.outputs.build-result }}
  build-summary:
    description: 'Build summary with success/failure statistics'
    value: ${{ steps.collect.outputs.build-summary }}
  total-containers:
    description: 'Total number of containers attempted'
    value: ${{ steps.collect.outputs.total-containers }}
  successful-builds:
    description: 'Number of successful builds'
    value: ${{ steps.collect.outputs.successful-builds }}
  failed-builds:
    description: 'Number of failed builds'
    value: ${{ steps.collect.outputs.failed-builds }}

runs:
  using: 'composite'
  steps:
    - name: Collect Build Results
      id: collect
      shell: bash
      env:
        CONTAINER_JOBS_JSON: ${{ inputs.container-jobs }}
        ALL_CONTAINERS: ${{ inputs.all-containers }}
      run: |
        echo "[COLLECT] Analyzing parallel container build results..."

        # Initialize counters
        total_containers=0
        successful_builds=0
        failed_builds=0
        built_containers=""
        failed_containers=""

        # Parse the container jobs JSON to analyze results
        echo "$CONTAINER_JOBS_JSON" | jq -r '. | to_entries[] | "\(.key):\(.value.result)"' | while IFS=: read -r container_name result; do
          total_containers=$((total_containers + 1))

          echo "[RESULT] $container_name: $result"

          if [ "$result" = "success" ]; then
            successful_builds=$((successful_builds + 1))
            if [ -z "$built_containers" ]; then
              built_containers="$container_name"
            else
              built_containers="$built_containers,$container_name"
            fi
          else
            failed_builds=$((failed_builds + 1))
            if [ -z "$failed_containers" ]; then
              failed_containers="$container_name"
            else
              failed_containers="$failed_containers,$container_name"
            fi
          fi
        done

        # Re-read for output (shell limitation with while loop in subshell)
        built_containers=""
        failed_containers=""
        total_containers=0
        successful_builds=0
        failed_builds=0

        while read -r line; do
          container_name=$(echo "$line" | cut -d: -f1)
          result=$(echo "$line" | cut -d: -f2)

          total_containers=$((total_containers + 1))

          if [ "$result" = "success" ]; then
            successful_builds=$((successful_builds + 1))
            if [ -z "$built_containers" ]; then
              built_containers="$container_name"
            else
              built_containers="$built_containers,$container_name"
            fi
          else
            failed_builds=$((failed_builds + 1))
            if [ -z "$failed_containers" ]; then
              failed_containers="$container_name"
            else
              failed_containers="$failed_containers,$container_name"
            fi
          fi
        done < <(echo "$CONTAINER_JOBS_JSON" | jq -r '. | to_entries[] | "\(.key):\(.value.result)"')

        # Calculate success rate
        success_rate=0
        if [ $total_containers -gt 0 ]; then
          success_rate=$(( successful_builds * 100 / total_containers ))
        fi

        # Generate summary
        summary="Total: $total_containers, Success: $successful_builds, Failed: $failed_builds, Success Rate: $success_rate%"

        echo "[STATS] Build Summary:"
        echo "- $summary"
        echo "- Built containers: $built_containers"
        if [ -n "$failed_containers" ]; then
          echo "- Failed containers: $failed_containers"
        fi

        # Determine overall result
        if [ $failed_builds -eq 0 ]; then
          build_result="success"
          echo "[PASS] All containers built successfully"
        else
          build_result="failure"
          echo "[FAIL] $failed_builds container(s) failed to build"
        fi

        # Set outputs
        echo "containers-built=$built_containers" >> $GITHUB_OUTPUT
        echo "build-result=$build_result" >> $GITHUB_OUTPUT
        echo "build-summary=$summary" >> $GITHUB_OUTPUT
        echo "total-containers=$total_containers" >> $GITHUB_OUTPUT
        echo "successful-builds=$successful_builds" >> $GITHUB_OUTPUT
        echo "failed-builds=$failed_builds" >> $GITHUB_OUTPUT

        # Exit with error if any builds failed
        if [ $failed_builds -gt 0 ]; then
          exit 1
        fi
