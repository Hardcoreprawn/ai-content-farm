name: 'Post-Deployment Validation'
description: 'Validates deployment health and performs post-deployment checks'
inputs:
  deployment-url:
    description: 'The URL of the deployed application'
    required: true
  max-attempts:
    description: 'Maximum number of health check attempts'
    required: false
    default: '5'
  retry-delay:
    description: 'Delay between retry attempts in seconds'
    required: false
    default: '10'
  timeout:
    description: 'Timeout for each health check attempt in seconds'
    required: false
    default: '30'

runs:
  using: 'composite'
  steps:
    - name: Health Check
      shell: bash
      env:
        DEPLOYMENT_URL: ${{ inputs.deployment-url }}
        MAX_ATTEMPTS: ${{ inputs.max-attempts }}
        RETRY_DELAY: ${{ inputs.retry-delay }}
        TIMEOUT: ${{ inputs.timeout }}
      run: |
        if [ -z "$DEPLOYMENT_URL" ]; then
          echo "No deployment URL provided, skipping health check"
          exit 0
        fi

        echo "Starting health check for: $DEPLOYMENT_URL"
        echo "Max attempts: $MAX_ATTEMPTS"
        echo "Retry delay: $RETRY_DELAY seconds"
        echo "Timeout per attempt: $TIMEOUT seconds"

        for attempt in $(seq 1 $MAX_ATTEMPTS); do
          echo "Health check attempt $attempt of $MAX_ATTEMPTS..."

          if curl -f --max-time "$TIMEOUT" "$DEPLOYMENT_URL/health"; then
            echo "Health check passed on attempt $attempt"
            exit 0
          fi

          if [ $attempt -lt $MAX_ATTEMPTS ]; then
            echo "Attempt $attempt failed, waiting $RETRY_DELAY seconds before retry..."
            sleep "$RETRY_DELAY"
          fi
        done

        echo "Health check failed after $MAX_ATTEMPTS attempts"
        exit 1

    - name: Additional Validation
      shell: bash
      env:
        DEPLOYMENT_URL: ${{ inputs.deployment-url }}
      run: |
        if [ -z "$DEPLOYMENT_URL" ]; then
          echo "No deployment URL provided, skipping additional validation"
          exit 0
        fi

        echo "Running additional post-deployment validation..."

        # Check if the application returns a valid response
        echo "Checking application response..."
        if curl -s --max-time 30 "$DEPLOYMENT_URL" | grep -q "html\|json\|xml"; then
          echo "Application is responding with valid content"
        else
          echo "Warning: Application response does not contain expected content"
        fi

        # Check basic connectivity
        echo "Checking basic connectivity..."
        if curl -s --max-time 10 --head "$DEPLOYMENT_URL" > /dev/null; then
          echo "Basic connectivity test passed"
        else
          echo "Warning: Basic connectivity test failed"
        fi

        echo "Post-deployment validation completed"

    - name: Generate Deployment Summary
      shell: bash
      env:
        DEPLOYMENT_URL: ${{ inputs.deployment-url }}
      run: |
        {
          echo "## [DEPLOY] Deployment Successful!"
          echo ""
          if [ -n "$DEPLOYMENT_URL" ]; then
            echo "### Live Website URL:"
            echo "**$DEPLOYMENT_URL**"
            echo ""
            echo "[Visit the Website]($DEPLOYMENT_URL)"
            echo ""
            echo "### Deployment Details:"
            echo "- **Status**: Healthy"
            echo "- **Environment**: Production"
            echo "- **Validation**: All checks passed"
          else
            echo "### [WARN] Deployment URL Not Available"
            echo "The deployment completed but the URL could not be retrieved."
          fi
          echo ""
          echo "---"
          echo "*Deployment completed at $(date)*"
        } >> "$GITHUB_STEP_SUMMARY"
