name: 'Security Container Scan'
description: 'Container security scanning with Trivy - supports both Dockerfile and image scanning'
inputs:
  fail-on-critical:
    description: 'Fail the action if critical vulnerabilities are found'
    required: false
    default: 'true'
  scan-mode:
    description: 'Scanning mode: dockerfile (pre-build) or image (post-build)'
    required: false
    default: 'dockerfile'
  registry:
    description: 'Container registry for image scanning'
    required: false
    default: 'ghcr.io'
  repository:
    description: 'Container repository for image scanning'
    required: false
    default: ''
  image-tag:
    description: 'Image tag for scanning built images'
    required: false
    default: 'latest'
  container-name:
    description: 'Specific container to scan (e.g., site-generator). If not provided, scans all containers.'
    required: false
    default: ''

outputs:
  passed:
    description: 'Whether container security scan passed'
    value: ${{ steps.evaluate.outputs.passed }}
  critical-count:
    description: 'Number of critical vulnerabilities found'
    value: ${{ steps.evaluate.outputs.critical-count }}

runs:
  using: 'composite'
  steps:
    - name: Set up container security scan
      shell: bash
      run: |
        echo "Starting container security scan..."
        mkdir -p security-results

    - name: Run Trivy Container Scan
      shell: bash
      env:
        WORKSPACE_PATH: ${{ github.workspace }}
        SCAN_MODE: ${{ inputs.scan-mode }}
        REGISTRY: ${{ inputs.registry }}
        REPOSITORY: ${{ inputs.repository }}
        IMAGE_TAG: ${{ inputs.image-tag }}
        TARGET_CONTAINER: ${{ inputs.container-name }}
      continue-on-error: true
      run: |
        echo "Running Trivy container scan in $SCAN_MODE mode..."

        # If a specific container is provided, use that; otherwise scan all
        if [[ -n "$TARGET_CONTAINER" ]]; then
          containers=("$TARGET_CONTAINER")
          echo "Scanning specific container: $TARGET_CONTAINER"
        else
          containers=("content-collector" "content-processor" "site-generator")
          echo "Scanning all containers"
        fi

        if [[ "$SCAN_MODE" == "dockerfile" ]]; then
          echo "Scanning Dockerfiles for configuration issues..."
          # Scan Dockerfiles for specified containers
          for container in "${containers[@]}"; do
            dockerfile_path="containers/$container/Dockerfile"
            if [ -f "$dockerfile_path" ]; then
              echo "Scanning Dockerfile for $container..."
              docker run --rm -v "${WORKSPACE_PATH}":/workspace \
                aquasec/trivy:latest config "/workspace/containers/$container" \
                --format json \
                --output "/workspace/security-results/trivy-dockerfile-${container}.json" \
                --severity HIGH,CRITICAL || true
            else
              echo "Warning: Dockerfile not found for $container at $dockerfile_path"
            fi
          done

        elif [[ "$SCAN_MODE" == "image" ]]; then
          echo "Scanning built container images for vulnerabilities..."
          # Scan built images for specified containers
          for container in "${containers[@]}"; do
            echo "Scanning image: ${REGISTRY}/${REPOSITORY}/${container}:${IMAGE_TAG}"
            docker run --rm \
              -v /var/run/docker.sock:/var/run/docker.sock \
              -v "${WORKSPACE_PATH}":/workspace \
              aquasec/trivy:latest image \
              --format json \
              --output "/workspace/security-results/trivy-image-${container}.json" \
              --severity HIGH,CRITICAL \
              "${REGISTRY}/${REPOSITORY}/${container}:${IMAGE_TAG}" || true
          done
        else
          echo "Invalid scan mode: $SCAN_MODE"
          exit 1
        fi

    - name: Generate SBOM
      shell: bash
      continue-on-error: true
      if: inputs.scan-mode == 'dockerfile'
      run: |
        echo "Generating SBOM..."
        make sbom || echo "SBOM generation completed with warnings"

    - name: Evaluate Container Security Results
      id: evaluate
      shell: bash
      env:
        FAIL_ON_CRITICAL: ${{ inputs.fail-on-critical }}
        SCAN_MODE: ${{ inputs.scan-mode }}
      run: |
        echo "Evaluating container security results for $SCAN_MODE scan..."

        total_critical=0
        total_high=0

        # Find Trivy results based on scan mode
        if [[ "$SCAN_MODE" == "dockerfile" ]]; then
          pattern="trivy-dockerfile-*.json"
        else
          pattern="trivy-image-*.json"
        fi

        trivy_container_files=$(find security-results -name "$pattern" 2>/dev/null | wc -l)
        if [ "$trivy_container_files" -gt 0 ]; then
          for trivy_file in security-results/$pattern; do
            if [ -f "$trivy_file" ] && [ -s "$trivy_file" ]; then
              container_critical="$(jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID' "$trivy_file" 2>/dev/null | wc -l)" || container_critical="0"
              container_high="$(jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH") | .VulnerabilityID' "$trivy_file" 2>/dev/null | wc -l)" || container_high="0"
              total_critical=$((total_critical + container_critical))
              total_high=$((total_high + container_high))
              container_name=$(basename "$trivy_file" .json | sed "s/trivy-${SCAN_MODE}-//")
              echo "Trivy $SCAN_MODE ($container_name): $container_critical critical, $container_high high"
            fi
          done
        else
          echo "Trivy Container: no scan files found"
        fi

        echo "Container Security Summary: $total_critical critical, $total_high high"
        echo "critical-count=$total_critical" >> "$GITHUB_OUTPUT"

        if [ "$total_critical" -gt 0 ] && [ "$FAIL_ON_CRITICAL" = "true" ]; then
          echo "passed=false" >> "$GITHUB_OUTPUT"
          echo "[FAIL] Container security scan failed with $total_critical critical vulnerabilities"
          exit 1
        else
          echo "passed=true" >> "$GITHUB_OUTPUT"
          echo "[PASS] Container security scan passed"
        fi
