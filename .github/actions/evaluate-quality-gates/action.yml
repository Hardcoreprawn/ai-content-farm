name: 'Evaluate Quality Gates'
description: 'Aggregate results from all quality gate checks with flexible pass/warn policies'
inputs:
  security-trivy-result:
    description: 'Result of Trivy security scan'
    required: true
  security-semgrep-result:
    description: 'Result of Semgrep SAST scan'
    required: true
  security-python-result:
    description: 'Result of Python security scan'
    required: true
  security-sbom-result:
    description: 'Result of SBOM generation'
    required: true
  security-checkov-result:
    description: 'Result of Checkov infrastructure scan'
    required: true
  auto-fix-formatting-result:
    description: 'Result of auto-fix formatting job'
    required: true
  code-quality-result:
    description: 'Result of code quality job'
    required: true
  infrastructure-result:
    description: 'Result of infrastructure quality job'
    required: true
  dependency-result:
    description: 'Result of dependency analysis job'
    required: true
  cost-analysis-result:
    description: 'Result of cost analysis job'
    required: false
  allow-security-warnings:
    description: 'Allow security scan failures as warnings if at least one passes'
    required: false
    default: 'true'
  allow-cost-warnings:
    description: 'Allow cost analysis failures as warnings'
    required: false
    default: 'true'

outputs:
  passed:
    description: 'Whether all quality gates passed'
    value: ${{ steps.evaluate.outputs.passed }}
  summary:
    description: 'Human-readable summary of results'
    value: ${{ steps.evaluate.outputs.summary }}
  failed-gates:
    description: 'Comma-separated list of failed gates'
    value: ${{ steps.evaluate.outputs.failed-gates }}
  warning-gates:
    description: 'Comma-separated list of gates with warnings'
    value: ${{ steps.evaluate.outputs.warning-gates }}

runs:
  using: 'composite'
  steps:
    - name: Evaluate Quality Gate Results
      id: evaluate
      shell: bash
      env:
        SECURITY_TRIVY_RESULT: ${{ inputs.security-trivy-result }}
        SECURITY_SEMGREP_RESULT: ${{ inputs.security-semgrep-result }}
        SECURITY_PYTHON_RESULT: ${{ inputs.security-python-result }}
        SECURITY_SBOM_RESULT: ${{ inputs.security-sbom-result }}
        SECURITY_CHECKOV_RESULT: ${{ inputs.security-checkov-result }}
        AUTO_FIX_FORMATTING_RESULT: ${{ inputs.auto-fix-formatting-result }}
        QUALITY_RESULT: ${{ inputs.code-quality-result }}
        INFRA_RESULT: ${{ inputs.infrastructure-result }}
        DEPS_RESULT: ${{ inputs.dependency-result }}
        COST_RESULT: ${{ inputs.cost-analysis-result }}
        ALLOW_SECURITY_WARNINGS: ${{ inputs.allow-security-warnings }}
        ALLOW_COST_WARNINGS: ${{ inputs.allow-cost-warnings }}
      run: |
        echo "[STATS] Evaluating quality gate results with flexible policies..."

        # Check if this is a Dependabot PR for more lenient evaluation
        IS_DEPENDABOT=false
        if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
          IS_DEPENDABOT=true
          echo "[POLICY] Dependabot PR detected - applying lenient quality gate policies"
        fi

        # Track results
        failed_gates=""
        warning_gates=""
        total_gates=0
        passed_gates=0
        security_gates=0
        security_passed=0

        # Evaluate security scans with flexible policy
        echo "=== Security Scan Results ==="
        for scan in "trivy:$SECURITY_TRIVY_RESULT" "semgrep:$SECURITY_SEMGREP_RESULT" "python:$SECURITY_PYTHON_RESULT" "sbom:$SECURITY_SBOM_RESULT" "checkov:$SECURITY_CHECKOV_RESULT"; do
          scan_name="${scan%%:*}"
          scan_result="${scan##*:}"

          # Skip skipped scans for security count
          if [[ "$scan_result" == "skipped" ]]; then
            echo "[SKIP] Security $scan_name: SKIPPED (conditional)"
            continue
          fi

          security_gates=$((security_gates + 1))
          total_gates=$((total_gates + 1))

          if [[ "$scan_result" == "success" ]]; then
            security_passed=$((security_passed + 1))
            passed_gates=$((passed_gates + 1))
            echo "[PASS] Security $scan_name: PASSED"
          else
            echo "[FAIL] Security $scan_name: FAILED ($scan_result)"
            if [ -n "$failed_gates" ]; then
              failed_gates="$failed_gates,security-$scan_name"
            else
              failed_gates="security-$scan_name"
            fi
          fi
        done

        # Apply flexible security policy
        if [[ "$ALLOW_SECURITY_WARNINGS" == "true" && $security_passed -gt 0 ]]; then
          echo ""
          echo "[POLICY] Flexible security policy: At least one security scan passed ($security_passed/$security_gates)"
          if [[ $security_passed -lt $security_gates ]]; then
            # Move failed security scans to warnings
            failed_security=$(echo "$failed_gates" | tr ',' '\n' | grep '^security-' || true)
            if [ -n "$failed_security" ]; then
              warning_gates="$failed_security"
              # Remove security failures from hard failures
              failed_gates=$(echo "$failed_gates" | tr ',' '\n' | grep -v '^security-' | tr '\n' ',' | sed 's/,$//' || true)
              echo "[WARN] Security scans with warnings: $(echo "$failed_security" | tr '\n' ',' | sed 's/,$//')"
            fi
          fi
        else
          echo "[POLICY] Strict security policy: All security scans must pass"
        fi

        echo ""
        echo "=== Quality Gate Results ==="

        # Auto-fix formatting (conditional evaluation based on actor)
        total_gates=$((total_gates + 1))
        if [[ "$AUTO_FIX_FORMATTING_RESULT" == "success" ]]; then
          passed_gates=$((passed_gates + 1))
          echo "[PASS] Auto-fix formatting: PASSED"
        elif [[ "$AUTO_FIX_FORMATTING_RESULT" == "skipped" && "$IS_DEPENDABOT" == "true" ]]; then
          # Treat skipped auto-fix as pass for Dependabot PRs
          passed_gates=$((passed_gates + 1))
          echo "[PASS] Auto-fix formatting: SKIPPED (acceptable for Dependabot PR)"
        else
          echo "[FAIL] Auto-fix formatting: FAILED ($AUTO_FIX_FORMATTING_RESULT)"
          if [[ "$IS_DEPENDABOT" == "true" ]]; then
            # For Dependabot PRs, treat formatting failures as warnings
            echo "[WARN] Auto-fix formatting failure treated as warning for Dependabot PR"
            if [ -n "$warning_gates" ]; then
              warning_gates="$warning_gates,auto-fix-formatting"
            else
              warning_gates="auto-fix-formatting"
            fi
          else
            # For regular PRs, treat as hard failure
            if [ -n "$failed_gates" ]; then
              failed_gates="$failed_gates,auto-fix-formatting"
            else
              failed_gates="auto-fix-formatting"
            fi
          fi
        fi

        # Code quality (conditional evaluation based on actor)
        total_gates=$((total_gates + 1))
        if [[ "$QUALITY_RESULT" == "success" ]]; then
          passed_gates=$((passed_gates + 1))
          echo "[PASS] Code quality: PASSED"
        elif [[ "$QUALITY_RESULT" == "skipped" && "$IS_DEPENDABOT" == "true" ]]; then
          # Treat skipped code quality as pass for Dependabot PRs
          passed_gates=$((passed_gates + 1))
          echo "[PASS] Code quality: SKIPPED (acceptable for Dependabot PR)"
        else
          echo "[FAIL] Code quality: FAILED ($QUALITY_RESULT)"
          if [[ "$IS_DEPENDABOT" == "true" ]]; then
            # For Dependabot PRs, treat code quality failures as warnings
            echo "[WARN] Code quality failure treated as warning for Dependabot PR"
            if [ -n "$warning_gates" ]; then
              warning_gates="$warning_gates,code-quality"
            else
              warning_gates="code-quality"
            fi
          else
            # For regular PRs, treat as hard failure
            if [ -n "$failed_gates" ]; then
              failed_gates="$failed_gates,code-quality"
            else
              failed_gates="code-quality"
            fi
          fi
        fi

        # Infrastructure quality (conditional - strict)
        if [[ "$INFRA_RESULT" != "skipped" ]]; then
          total_gates=$((total_gates + 1))
          if [[ "$INFRA_RESULT" == "success" ]]; then
            passed_gates=$((passed_gates + 1))
            echo "[PASS] Infrastructure quality: PASSED"
          else
            echo "[FAIL] Infrastructure quality: FAILED ($INFRA_RESULT)"
            if [ -n "$failed_gates" ]; then
              failed_gates="$failed_gates,infrastructure-quality"
            else
              failed_gates="infrastructure-quality"
            fi
          fi
        else
          echo "[SKIP] Infrastructure quality: SKIPPED (no infrastructure changes)"
        fi

        # Dependency analysis (conditional - strict)
        if [[ "$DEPS_RESULT" != "skipped" ]]; then
          total_gates=$((total_gates + 1))
          if [[ "$DEPS_RESULT" == "success" ]]; then
            passed_gates=$((passed_gates + 1))
            echo "[PASS] Dependency analysis: PASSED"
          else
            echo "[FAIL] Dependency analysis: FAILED ($DEPS_RESULT)"
            if [ -n "$failed_gates" ]; then
              failed_gates="$failed_gates,dependency-analysis"
            else
              failed_gates="dependency-analysis"
            fi
          fi
        else
          echo "[SKIP] Dependency analysis: SKIPPED"
        fi

        # Cost analysis (conditional - flexible)
        echo ""
        echo "=== Cost Analysis ==="
        if [[ "$COST_RESULT" != "skipped" && "$COST_RESULT" != "" ]]; then
          if [[ "$COST_RESULT" == "success" ]]; then
            echo "[PASS] Cost analysis: PASSED"
          else
            echo "[FAIL] Cost analysis: FAILED ($COST_RESULT)"
            if [[ "$ALLOW_COST_WARNINGS" == "true" ]]; then
              echo "[WARN] Cost analysis failure treated as warning"
              if [ -n "$warning_gates" ]; then
                warning_gates="$warning_gates,cost-analysis"
              else
                warning_gates="cost-analysis"
              fi
            else
              if [ -n "$failed_gates" ]; then
                failed_gates="$failed_gates,cost-analysis"
              else
                failed_gates="cost-analysis"
              fi
            fi
          fi
        else
          if [[ "$ALLOW_COST_WARNINGS" == "true" ]]; then
            echo "[WARN] Cost analysis: SKIPPED (no infrastructure changes)"
          else
            echo "[SKIP] Cost analysis: SKIPPED (no infrastructure changes)"
          fi
        fi

        # Generate summary
        echo ""
        echo "=== Quality Gate Summary ==="
        echo "Security scans: $security_passed/$security_gates passed"
        if [ -n "$warning_gates" ]; then
          echo "Warnings: $warning_gates"
        fi
        if [ -n "$failed_gates" ]; then
          echo "Hard failures: $failed_gates"
        fi

        # Determine overall result
        if [ -z "$failed_gates" ]; then
          echo "passed=true" >> "$GITHUB_OUTPUT"
          echo "[PASS] All quality gates passed or have acceptable warnings"
          summary="PASSED: All critical quality gates passed"
          if [ -n "$warning_gates" ]; then
            summary="$summary (with warnings: $warning_gates)"
          fi
        else
          echo "passed=false" >> "$GITHUB_OUTPUT"
          echo "[FAIL] Quality gates failed: $failed_gates"
          summary="FAILED: Critical quality gates failed: $failed_gates"
        fi

        echo "summary=$summary" >> "$GITHUB_OUTPUT"
        echo "failed-gates=$failed_gates" >> "$GITHUB_OUTPUT"
        echo "warning-gates=$warning_gates" >> "$GITHUB_OUTPUT"

        # Generate step summary
        {
          echo "## Quality Gate Summary"
          echo "$summary"
          echo ""
          echo "### Gate Results:"
          echo "- Security Scanning: Passed $security_passed/$security_gates"
          echo "- Code Quality: $QUALITY_RESULT"
          echo "- Infrastructure Quality: $INFRA_RESULT"
          echo "- Dependency Analysis: $DEPS_RESULT"
          echo "- Cost Analysis: $COST_RESULT"
        } >> "$GITHUB_STEP_SUMMARY"

        # Exit with error if any gates failed
        if [[ -n "$failed_gates" ]]; then
          exit 1
        fi
