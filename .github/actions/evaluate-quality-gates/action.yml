name: 'Evaluate Quality Gates'
description: 'Aggregate results from all quality gate checks and determine overall pass/fail'
inputs:
  security-trivy-result:
    description: 'Result of Trivy security scan'
    required: true
  security-semgrep-result:
    description: 'Result of Semgrep SAST scan'
    required: true
  security-python-result:
    description: 'Result of Python security scan'
    required: true
  security-sbom-result:
    description: 'Result of SBOM generation'
    required: true
  security-checkov-result:
    description: 'Result of Checkov infrastructure scan'
    required: true
  code-quality-result:
    description: 'Result of code quality job'
    required: true
  infrastructure-result:
    description: 'Result of infrastructure quality job'
    required: true
  dependency-result:
    description: 'Result of dependency analysis job'
    required: true
  cost-analysis-result:
    description: 'Result of cost analysis job'
    required: false
    default: 'skipped'

outputs:
  passed:
    description: 'Whether all quality gates passed'
    value: ${{ steps.evaluate.outputs.passed }}
  summary:
    description: 'Human-readable summary of results'
    value: ${{ steps.evaluate.outputs.summary }}
  failed-gates:
    description: 'Comma-separated list of failed gates'
    value: ${{ steps.evaluate.outputs.failed-gates }}

runs:
  using: 'composite'
  steps:
    - name: Evaluate Quality Gate Results
      id: evaluate
      shell: bash
      env:
        SECURITY_TRIVY_RESULT: ${{ inputs.security-trivy-result }}
        SECURITY_SEMGREP_RESULT: ${{ inputs.security-semgrep-result }}
        SECURITY_PYTHON_RESULT: ${{ inputs.security-python-result }}
        SECURITY_SBOM_RESULT: ${{ inputs.security-sbom-result }}
        SECURITY_CHECKOV_RESULT: ${{ inputs.security-checkov-result }}
        QUALITY_RESULT: ${{ inputs.code-quality-result }}
        INFRA_RESULT: ${{ inputs.infrastructure-result }}
        DEPS_RESULT: ${{ inputs.dependency-result }}
        COST_RESULT: ${{ inputs.cost-analysis-result }}
      run: |
        echo "[STATS] Evaluating quality gate results..."

        # Track failures
        failed_gates=""
        total_gates=0
        passed_gates=0

        # Security scans
        for scan in "trivy:$SECURITY_TRIVY_RESULT" "semgrep:$SECURITY_SEMGREP_RESULT" "python:$SECURITY_PYTHON_RESULT" "sbom:$SECURITY_SBOM_RESULT" "checkov:$SECURITY_CHECKOV_RESULT"; do
          scan_name="${scan%%:*}"
          scan_result="${scan##*:}"
          total_gates=$((total_gates + 1))

          if [[ "$scan_result" == "success" ]]; then
            passed_gates=$((passed_gates + 1))
            echo "[PASS] Security $scan_name: PASSED"
          else
            if [ -n "$failed_gates" ]; then
              failed_gates="$failed_gates,security-$scan_name"
            else
              failed_gates="security-$scan_name"
            fi
            echo "[FAIL] Security $scan_name: FAILED"
          fi
        done

        # Code quality (always runs)
        total_gates=$((total_gates + 1))
        if [[ "$QUALITY_RESULT" == "success" ]]; then
          passed_gates=$((passed_gates + 1))
          echo "[PASS] Code quality: PASSED"
        else
          if [ -n "$failed_gates" ]; then
            failed_gates="$failed_gates,code-quality"
          else
            failed_gates="code-quality"
          fi
          echo "[FAIL] Code quality: FAILED"
        fi

        # Infrastructure quality (conditional)
        if [[ "$INFRA_RESULT" != "skipped" ]]; then
          total_gates=$((total_gates + 1))
          if [[ "$INFRA_RESULT" == "success" ]]; then
            passed_gates=$((passed_gates + 1))
            echo "[PASS] Infrastructure quality: PASSED"
          else
            if [ -n "$failed_gates" ]; then
              failed_gates="$failed_gates,infrastructure-quality"
            else
              failed_gates="infrastructure-quality"
            fi
            echo "[FAIL] Infrastructure quality: FAILED"
          fi
        else
          echo "⏭️ Infrastructure quality: SKIPPED (no infra changes)"
        fi

        # Dependency analysis (always runs)
        total_gates=$((total_gates + 1))
        if [[ "$DEPS_RESULT" == "success" ]]; then
          passed_gates=$((passed_gates + 1))
          echo "[PASS] Dependency analysis: PASSED"
        else
          if [ -n "$failed_gates" ]; then
            failed_gates="$failed_gates,dependency-analysis"
          else
            failed_gates="dependency-analysis"
          fi
          echo "[FAIL] Dependency analysis: FAILED"
        fi

        # Cost analysis (conditional)
        if [[ "$COST_RESULT" != "skipped" ]]; then
          total_gates=$((total_gates + 1))
          if [[ "$COST_RESULT" == "success" ]]; then
            passed_gates=$((passed_gates + 1))
            echo "[PASS] Cost analysis: PASSED"
          else
            if [ -n "$failed_gates" ]; then
              failed_gates="$failed_gates,cost-analysis"
            else
              failed_gates="cost-analysis"
            fi
            echo "[FAIL] Cost analysis: FAILED"
          fi
        else
          echo "⏭️ Cost analysis: SKIPPED (no infra changes)"
        fi

        # Overall result
        if [[ -z "$failed_gates" ]]; then
          echo "[PASS] All quality gates passed ($passed_gates/$total_gates)"
          echo "passed=true" >> "$GITHUB_OUTPUT"
          summary="[PASS] **Quality Gate**: PASSED ($passed_gates/$total_gates gates)"
        else
          echo "[FAIL] Quality gate failed - failed gates: $failed_gates"
          echo "passed=false" >> "$GITHUB_OUTPUT"
          summary="[FAIL] **Quality Gate**: FAILED ($passed_gates/$total_gates gates) - Failed: $failed_gates"
        fi

        echo "summary=$summary" >> "$GITHUB_OUTPUT"
        echo "failed-gates=$failed_gates" >> "$GITHUB_OUTPUT"

        {
          echo "## Quality Gate Summary"
          echo "$summary"
          echo ""
          echo "### Gate Results:"
          echo "- Security Scanning: $SECURITY_RESULT"
          echo "- Code Quality: $QUALITY_RESULT"
          echo "- Infrastructure Quality: $INFRA_RESULT"
          echo "- Dependency Analysis: $DEPS_RESULT"
        } >> "$GITHUB_STEP_SUMMARY"

        # Exit with error if any gates failed
        if [[ -n "$failed_gates" ]]; then
          exit 1
        fi
