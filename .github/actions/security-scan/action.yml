name: 'Security Scan'
description: 'Comprehensive security scanning using multiple tools'
inputs:
  fail-on-critical:
    description: 'Fail the action if critical vulnerabilities are found'
    required: false
    default: 'true'
  upload-sarif:
    description: 'Upload SARIF results to GitHub Security tab'
    required: false
    default: 'true'
  environment:
    description: 'Environment being scanned (development/staging/production)'
    required: false
    default: 'development'

outputs:
  passed:
    description: 'Whether security scan passed without critical issues'
    value: ${{ steps.evaluate.outputs.passed }}
  critical-count:
    description: 'Number of critical vulnerabilities found'
    value: ${{ steps.evaluate.outputs.critical-count }}

runs:
  using: 'composite'
  steps:
    - name: Set up security scan environment
      shell: bash
      run: |
        echo "Starting comprehensive security scan..."
        mkdir -p security-results

    - name: Run Trivy Infrastructure Scan
      shell: bash
      env:
        WORKSPACE_PATH: ${{ github.workspace }}
      continue-on-error: true
      run: |
        echo "Running Trivy infrastructure scan..."
        docker run --rm -v "${WORKSPACE_PATH}":/workspace \
          aquasec/trivy:latest config /workspace \
          --format sarif \
          --output /workspace/security-results/trivy-infra.sarif \
          --severity HIGH,CRITICAL || echo "Trivy infrastructure scan completed with warnings"

    - name: Run Trivy Container Scan
      shell: bash
      env:
        WORKSPACE_PATH: ${{ github.workspace }}
      continue-on-error: true
      run: |
        echo "Running Trivy container scan..."
        # Scan all Dockerfiles
        find . -name "Dockerfile" -type f | while read -r dockerfile; do
          dockerfile_dir="$(dirname "$dockerfile")"
          container_name="$(basename "$dockerfile_dir")"
          echo "Scanning $container_name..."
          if [ -d "$dockerfile_dir" ]; then
            docker run --rm -v "${WORKSPACE_PATH}":/workspace \
              aquasec/trivy:latest config "/workspace/$dockerfile_dir" \
              --format json \
              --output "/workspace/security-results/trivy-${container_name}.json" \
              --severity HIGH,CRITICAL || true
          fi
        done

    - name: Run Semgrep SAST Scan
      shell: bash
      env:
        WORKSPACE_PATH: ${{ github.workspace }}
      continue-on-error: true
      run: |
        echo "Running standardized Semgrep SAST scan..."
        chmod +x ./scripts/run-semgrep.sh
        ./scripts/run-semgrep.sh "${WORKSPACE_PATH}" security-results semgrep/semgrep:latest || echo "Semgrep scan completed with warnings"

    # Note: Safety dependency scanning removed - Dependabot provides superior
    # dependency vulnerability management with automated PRs and real-time monitoring.
    # Semgrep provides comprehensive Python security analysis for code patterns.

    - name: Generate SBOM and Check Dependencies
      shell: bash
      continue-on-error: true
      run: |
        echo "Generating SBOM and checking dependencies..."
        make sbom || echo "SBOM generation completed with warnings"

    - name: Run Checkov Infrastructure Scan
      shell: bash
      env:
        WORKSPACE_PATH: ${{ github.workspace }}
      continue-on-error: true
      run: |
        echo "Running Checkov infrastructure scan..."
        docker run --rm -v "${WORKSPACE_PATH}":/tf \
          bridgecrew/checkov:latest \
          -d /tf/infra \
          --framework terraform \
          --output sarif \
          --output-file-path /tf/security-results \
          --quiet || echo "Checkov scan completed with warnings"

    - name: Evaluate Security Results
      id: evaluate
      shell: bash
      env:
        FAIL_ON_CRITICAL: ${{ inputs.fail-on-critical }}
        ENVIRONMENT: ${{ inputs.environment }}
      run: |
        echo "[STATS] Evaluating security scan results..."

        # Initialize counters for each scan type
        trivy_infra_critical=0
        trivy_container_critical=0
        semgrep_critical=0
        safety_critical=0
        checkov_critical=0

        total_critical=0
        total_high=0
        total_medium=0

        echo "## Security Scan Results by Tool"

        # 1. Trivy Infrastructure Scan
        if [ -f "security-results/trivy-infra.sarif" ]; then
          trivy_infra_critical="$(jq -r '.runs[0].results[] | select(.level == "error") | .ruleId' security-results/trivy-infra.sarif 2>/dev/null | wc -l)" || trivy_infra_critical="0"
          trivy_infra_high="$(jq -r '.runs[0].results[] | select(.level == "warning") | .ruleId' security-results/trivy-infra.sarif 2>/dev/null | wc -l)" || trivy_infra_high="0"
          echo "[SCAN] Trivy Infrastructure: $trivy_infra_critical critical, $trivy_infra_high high"
          total_critical=$((total_critical + trivy_infra_critical))
          total_high=$((total_high + trivy_infra_high))
        else
          echo "[SCAN] Trivy Infrastructure: scan file not found"
        fi

        # 2. Trivy Container Scans
        trivy_container_files=$(find security-results -name "trivy-*.json" 2>/dev/null | wc -l)
        if [ "$trivy_container_files" -gt 0 ]; then
          for trivy_file in security-results/trivy-*.json; do
            if [ -f "$trivy_file" ] && [ -s "$trivy_file" ]; then
              container_critical="$(jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID' "$trivy_file" 2>/dev/null | wc -l)" || container_critical="0"
              container_high="$(jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH") | .VulnerabilityID' "$trivy_file" 2>/dev/null | wc -l)" || container_high="0"
              trivy_container_critical=$((trivy_container_critical + container_critical))
              container_name=$(basename "$trivy_file" .json | sed 's/trivy-//')
              echo "[CONTAINER] Trivy Container ($container_name): $container_critical critical, $container_high high"
            fi
          done
          total_critical=$((total_critical + trivy_container_critical))
        else
          echo "[CONTAINER] Trivy Container: no valid scan files found"
        fi

        # 3. Semgrep SAST Scan
        if [ -f "security-results/semgrep-results.json" ]; then
          # Count only actual security findings (not parsing errors)
          # Filter out severity WARNING for infrastructure findings, only count ERROR severity as critical
          semgrep_error_findings="$(jq -r '.results[] | select(.extra.severity == "ERROR") | .check_id' security-results/semgrep-results.json 2>/dev/null | wc -l)" || semgrep_error_findings="0"
          semgrep_warning_findings="$(jq -r '.results[] | select(.extra.severity == "WARNING") | .check_id' security-results/semgrep-results.json 2>/dev/null | wc -l)" || semgrep_warning_findings="0"

          # Count acceptable infrastructure findings (documented in docs/SECURITY_EXCEPTIONS.md)
          acceptable_bypass="$(jq -r '.results[] | select(.check_id == "terraform.azure.security.storage.storage-allow-microsoft-service-bypass.storage-allow-microsoft-service-bypass") | .check_id' security-results/semgrep-results.json 2>/dev/null | wc -l)" || acceptable_bypass="0"
          acceptable_queue="$(jq -r '.results[] | select(.check_id == "terraform.azure.security.storage.storage-queue-services-logging.storage-queue-services-logging") | .check_id' security-results/semgrep-results.json 2>/dev/null | wc -l)" || acceptable_queue="0"

          # Only ERROR severity findings are critical, subtract acceptable infrastructure warnings
          total_semgrep=$((semgrep_error_findings + semgrep_warning_findings))
          semgrep_critical=$((semgrep_error_findings + semgrep_warning_findings - acceptable_bypass - acceptable_queue))

          # Ensure critical count doesn't go negative
          if [ "$semgrep_critical" -lt 0 ]; then
            semgrep_critical=0
          fi

          total_critical=$((total_critical + semgrep_critical))

          echo "[SEARCH] Semgrep SAST: $total_semgrep total findings ($semgrep_error_findings error, $semgrep_warning_findings warning), $((acceptable_bypass + acceptable_queue)) acceptable exceptions, $semgrep_critical critical"
        elif [ -f "security-results/semgrep.sarif" ]; then
          # Fallback to SARIF format if JSON not available
          semgrep_critical="$(jq -r '.runs[0].results[] | select(.level == "error") | .ruleId' security-results/semgrep.sarif 2>/dev/null | wc -l)" || semgrep_critical="0"
          total_critical=$((total_critical + semgrep_critical))
          echo "[SEARCH] Semgrep SAST: $semgrep_critical critical (from SARIF fallback)"
        else
          echo "[SEARCH] Semgrep SAST: scan file not found"
        fi

        # 4. Safety Python Dependency Scan
        safety_files=$(find security-results -name "safety-*.json" 2>/dev/null | wc -l)
        if [ "$safety_files" -gt 0 ]; then
          for safety_file in security-results/safety-*.json; do
            if [ -f "$safety_file" ] && [ -s "$safety_file" ]; then
              container_safety="$(jq -r '.vulnerabilities[]? | select(.severity == "high" or .severity == "critical") | .id' "$safety_file" 2>/dev/null | wc -l)" || container_safety="0"
              safety_critical=$((safety_critical + container_safety))
              container_name=$(basename "$safety_file" .json | sed 's/safety-//')
              if [ "$container_safety" -gt 0 ]; then
                echo "[PYTHON] Safety ($container_name): $container_safety high/critical vulnerabilities"
              fi
            fi
          done
          total_critical=$((total_critical + safety_critical))
          if [ "$safety_critical" -eq 0 ]; then
            echo "[PYTHON] Safety Python Dependencies: no high/critical vulnerabilities found"
          fi
        else
          echo "[PYTHON] Safety Python Dependencies: no scan files found"
        fi

        # 5. Checkov Infrastructure as Code
        if [ -f "security-results/checkov.sarif" ]; then
          checkov_critical="$(jq -r '.runs[0].results[] | select(.level == "error") | .ruleId' security-results/checkov.sarif 2>/dev/null | wc -l)" || checkov_critical="0"
          checkov_high="$(jq -r '.runs[0].results[] | select(.level == "warning") | .ruleId' security-results/checkov.sarif 2>/dev/null | wc -l)" || checkov_high="0"
          total_critical=$((total_critical + checkov_critical))
          total_high=$((total_high + checkov_high))
          echo "[REPORT] Checkov Infrastructure: $checkov_critical critical, $checkov_high high"
        else
          echo "[REPORT] Checkov Infrastructure: scan file not found"
        fi

        echo ""
        echo "## Summary"
        echo "Total Critical Issues: $total_critical"
        echo "Total High Issues: $total_high"
        echo "Total Medium Issues: $total_medium"

        echo "critical-count=$total_critical" >> "$GITHUB_OUTPUT"

        # Determine if scan passed
        if [ "$total_critical" -eq 0 ] || [ "$FAIL_ON_CRITICAL" != "true" ]; then
          echo "passed=true" >> "$GITHUB_OUTPUT"
          echo "[PASS] Security scan PASSED - No critical blocking issues found"
        else
          echo "passed=false" >> "$GITHUB_OUTPUT"
          echo "[FAIL] Security scan FAILED - $total_critical critical issues require attention"
        fi

        # Generate comprehensive summary report
        report_timestamp="$(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        if [ "$total_critical" -eq 0 ]; then
          status_message="**PASSED** - No critical vulnerabilities found"
          status_emoji="[PASS]"
        else
          status_message="**FAILED** - Critical vulnerabilities require attention"
          status_emoji="[FAIL]"
        fi

        cat > security-results/summary.md << EOF
        # Security Scan Summary

        **Environment**: $ENVIRONMENT
        **Timestamp**: $report_timestamp
        **Status**: $status_emoji $status_message

        ## Overall Results
        - **Critical**: $total_critical
        - **High**: $total_high
        - **Medium**: $total_medium

        ## Results by Scan Tool

        ### Infrastructure Security
        - **Trivy Infrastructure**: $trivy_infra_critical critical findings
        - **Checkov IaC**: $checkov_critical critical findings

        ### Container Security
        - **Trivy Containers**: $trivy_container_critical critical findings across all containers

        ### Code Security
        - **Semgrep SAST**: $semgrep_critical critical findings (after excluding documented exceptions)
          *Comprehensive static analysis covering Python security patterns and more*

        ### Dependency Security
        - **Safety Python**: $safety_critical high/critical dependency vulnerabilities
          *Specialized Python package vulnerability detection*

        ## Acceptable Exceptions
        As documented in \`docs/SECURITY_EXCEPTIONS.md\`:
        - Azure Storage service bypass (required for Container Apps)
        - Azure Storage queue logging (not applicable - we use Service Bus)

        ## Action Required
        $(if [ "$total_critical" -eq 0 ]; then
          echo "[PASS] **No action required** - All scans passed"
        else
          echo "[WARN]  **Review Required** - Please review the $total_critical critical findings above"
          echo ""
          echo "**Next Steps:**"
          echo "1. Review detailed scan results in the artifacts"
          echo "2. Address critical findings or document as acceptable exceptions"
          echo "3. Update \`docs/SECURITY_EXCEPTIONS.md\` if accepting new exceptions"
        fi)

        ## Scans Performed
        - [PASS] **Trivy** - Infrastructure & Container security scanning
        - [PASS] **Semgrep** - Static Application Security Testing (includes Python security)
        - [PASS] **Safety** - Python dependency vulnerability detection
        - [PASS] **Checkov** - Infrastructure as Code compliance & best practices
        - [PASS] **SBOM Analysis** - Software Bill of Materials generation

        *Note: Bandit removed in favor of Semgrep's superior Python security coverage*
        EOF

    - name: Upload SARIF Results
      if: inputs.upload-sarif == 'true' && success()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: |
          security-results/trivy-infra.sarif
          security-results/checkov.sarif
        category: security-scan
      continue-on-error: true

    - name: Upload Security Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          security-results/
          output/sbom/
          output/dependency-analysis-report.json
        retention-days: 30

    - name: Fail on Critical Issues
      shell: bash
      env:
        CRITICAL_COUNT: ${{ steps.evaluate.outputs.critical-count }}
        PASSED: ${{ steps.evaluate.outputs.passed }}
      run: |
        if [ "$PASSED" = "true" ]; then
          echo "[PASS] Security scan completed successfully"
          echo "[STATS] Found $CRITICAL_COUNT critical issues (all acceptable or resolved)"
          echo "[REPORT] Review security-results/summary.md for detailed breakdown"
        else
          echo "[FAIL] Security scan failed with $CRITICAL_COUNT critical issues requiring attention"
          echo "[REPORT] Please review security-results/ for detailed findings"
          echo "[DOCS] See docs/SECURITY_EXCEPTIONS.md for guidance on acceptable exceptions"
          exit 1
        fi
      if: steps.evaluate.outputs.passed == 'false'
