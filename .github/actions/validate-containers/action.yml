name: 'Validate Containers'
description: 'Quick validation that all containers have valid Dockerfiles and can pass build checks'
inputs:
  containers-changed:
    description: 'Comma-separated list of changed containers (optional - defaults to all)'
    required: false
    default: ''
  fail-fast:
    description: 'Stop on first container build failure'
    required: false
    default: 'false'

outputs:
  validation-passed:
    description: 'Whether all container validations passed'
    value: ${{ steps.validate.outputs.validation-passed }}
  containers-tested:
    description: 'Number of containers tested'
    value: ${{ steps.validate.outputs.containers-tested }}

runs:
  using: 'composite'
  steps:
    - name: Validate container builds
      id: validate
      shell: bash {0}
      env:
        CONTAINERS_CHANGED: ${{ inputs.containers-changed }}
        FAIL_FAST: ${{ inputs.fail-fast }}
      run: |
        set +e  # Disable exit on error for better control
        echo "🐳 Validating container builds..."

        # Determine which containers to test
        if [ -n "$CONTAINERS_CHANGED" ]; then
          IFS=',' read -ra CONTAINERS <<< "$CONTAINERS_CHANGED"
          echo "Testing specified containers: ${CONTAINERS[*]}"
        else
          # Test all containers
          CONTAINERS=($(find containers/ -name "Dockerfile" -exec dirname {} \; | sort))
          echo "Testing all containers: ${CONTAINERS[*]}"
        fi

        total_containers=${#CONTAINERS[@]}
        passed_containers=0
        failed_containers=()

        echo "containers-tested=$total_containers" >> "$GITHUB_OUTPUT"

        for container_path in "${CONTAINERS[@]}"; do
          container_name=$(basename "$container_path")
          echo "🔍 Testing container: $container_name"

          if [ -f "$container_path/Dockerfile" ]; then
            # Quick syntax and build context validation (no actual build)
            echo "Running: docker build --check '$container_path'"
            if docker build --check "$container_path" > /dev/null 2>&1; then
              echo "✅ $container_name: Build validation passed"
              passed_containers=$((passed_containers + 1)) || true
            else
              echo "❌ $container_name: Build validation failed"
              echo "Error details for $container_name:"
              docker build --check "$container_path" 2>&1 || true
              failed_containers+=("$container_name")

              if [ "$FAIL_FAST" = "true" ]; then
                echo "💥 Failing fast due to container build failure"
                echo "validation-passed=false" >> "$GITHUB_OUTPUT"
                exit 1
              fi
            fi
          else
            echo "⚠️  $container_name: No Dockerfile found, skipping"
          fi
        done

        echo "📊 Results: $passed_containers/$total_containers containers passed validation"

        if [ ${#failed_containers[@]} -eq 0 ]; then
          echo "validation-passed=true" >> "$GITHUB_OUTPUT"
          echo "✅ All container validations passed"
        else
          echo "validation-passed=false" >> "$GITHUB_OUTPUT"
          echo "❌ Failed containers: ${failed_containers[*]}"
        fi
