name: 'Deploy Containers to Azure'
description: 'Deploy all container services to Azure Container Apps using GHCR'
inputs:
  azure-credentials:
    description: 'Azure service principal credentials'
    required: true
  resource-group:
    description: 'Azure resource group name'
    required: true
    default: 'ai-content-farm-core-rg'
  environment:
    description: 'Deployment environment (staging/production)'
    required: true
    default: 'production'

outputs:
  deployment-url:
    description: 'URL of the deployed application'
    value: ${{ steps.get-url.outputs.url }}
  deployed-containers:
    description: 'List of deployed containers'
    value: ${{ steps.deploy.outputs.containers }}

runs:
  using: 'composite'
  steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ inputs.azure-credentials }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Build and push all containers
      id: deploy
      shell: bash
      env:
        ENVIRONMENT: ${{ inputs.environment }}
      run: |
        echo "[DEPLOY] Building and pushing all containers using production Dockerfiles..."

        # Define containers to deploy with their specific Dockerfile requirements
        declare -A CONTAINERS=(
          ["content-enricher"]="web"
          ["content-processor"]="web"
          ["content-ranker"]="web"
          ["markdown-generator"]="web"
          ["site-generator"]="web"
          ["content-collector"]="data"
          ["collector-scheduler"]="scheduler"
        )

        deployed_containers=""

        for container in "${!CONTAINERS[@]}"; do
          echo "[BUILD] Building and pushing $container..."

          # Build using standard Dockerfile (multi-stage with production target)
          docker build -f containers/$container/Dockerfile --target production -t $container:"$ENVIRONMENT" .

          # Tag for GHCR
          docker tag $container:"$ENVIRONMENT" ghcr.io/hardcoreprawn/ai-content-farm/$container:"$ENVIRONMENT"

          # Push to GHCR
          docker push ghcr.io/hardcoreprawn/ai-content-farm/$container:"$ENVIRONMENT"

          echo "[PASS] $container pushed to GHCR"
          deployed_containers="$deployed_containers $container"
        done

        echo "containers=$deployed_containers" >> $GITHUB_OUTPUT
        echo "[PASS] All containers pushed to GHCR"

    - name: Update Container Apps
      shell: bash
      env:
        RESOURCE_GROUP: ${{ inputs.resource-group }}
        ENVIRONMENT: ${{ inputs.environment }}
      run: |
        echo "[PROCESS] Updating Container Apps..."

        # Update the main content-processor app (now includes generation capabilities)
        if az containerapp show --name "ai-content-farm-core-content-processor" --resource-group "$RESOURCE_GROUP" >/dev/null 2>&1; then
          az containerapp update \
            --name "ai-content-farm-core-content-processor" \
            --resource-group "$RESOURCE_GROUP" \
            --image ghcr.io/hardcoreprawn/ai-content-farm/content-processor:"$ENVIRONMENT"
          echo "[PASS] content-processor Container App updated"
        else
          echo "[WARN] content-processor Container App not found - may need Terraform deployment first"
        fi

    - name: Get deployment URL
      id: get-url
      shell: bash
      env:
        RESOURCE_GROUP: ${{ inputs.resource-group }}
      run: |
        if az containerapp show --name "ai-content-farm-core-content-processor" --resource-group "$RESOURCE_GROUP" >/dev/null 2>&1; then
          URL=$(az containerapp show \
            --name "ai-content-farm-core-content-processor" \
            --resource-group "$RESOURCE_GROUP" \
            --query "properties.configuration.ingress.fqdn" \
            -o tsv)
          echo "url=https://$URL" >> $GITHUB_OUTPUT
          echo "[URL] Deployment URL: https://$URL"
        else
          echo "url=not-available" >> $GITHUB_OUTPUT
          echo "[WARN] Deployment URL not available"
        fi
