name: 'Dependabot Auto-merge'
on:
  pull_request_target:
    types: [opened, synchronize, reopened, labeled]
  workflow_run:
    workflows: ["Optimized CI/CD Pipeline"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  dependabot-checks:
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Analyze change type
        id: change-analysis
        run: |
          # Get list of changed files
          changed_files=$(gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path')

          is_pure_dependency="true"
          affected_containers=()

          echo "[SCAN] Analyzing changed files:"
          while IFS= read -r file; do
            echo "  - $file"
            case "$file" in
              requirements*.txt|containers/*/requirements.txt|pyproject.toml|libs/*/requirements.txt)
                # Extract container name if it's a container-specific requirements file
                if [[ "$file" =~ containers/([^/]+)/requirements\.txt ]]; then
                  container="${BASH_REMATCH[1]}"
                  affected_containers+=("$container")
                fi
                ;;
              *)
                echo "[WARN] Non-dependency file detected: $file"
                is_pure_dependency="false"
                ;;
            esac
          done <<< "$changed_files"

          containers_json=$(printf '%s\n' "${affected_containers[@]}" | sort -u | jq -R . | jq -s . | jq -c .)

          echo "is-pure-dependency=$is_pure_dependency" >> "$GITHUB_OUTPUT"
          echo "affected-containers=$containers_json" >> "$GITHUB_OUTPUT"

          echo "[CONFIG] Analysis Results:"
          echo "  - Pure dependency update: $is_pure_dependency"
          echo "  - Affected containers: $containers_json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for major version updates
        id: version-check
        run: |
          if [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-major" ]]; then
            echo "is-major=true" >> "$GITHUB_OUTPUT"
            echo "[WARN] Major version update detected - manual review recommended"
          else
            echo "is-major=false" >> "$GITHUB_OUTPUT"
            echo "[PASS] Safe dependency update (${{ steps.metadata.outputs.update-type }})"
          fi

      - name: Wait for CI checks
        if: |
          steps.version-check.outputs.is-major == 'false' &&
          steps.change-analysis.outputs.is-pure-dependency == 'true'
        run: |
          echo "⏳ Waiting for CI checks to complete..."

          max_wait=1800  # 30 minutes
          wait_time=0
          check_interval=30

          while [ $wait_time -lt $max_wait ]; do
            # Get all check runs for this PR
            checks=$(gh pr checks ${{ github.event.pull_request.number }} --json state,conclusion,name)

            # Count pending/in-progress checks
            pending=$(echo "$checks" | jq '[.[] | select(.state == "PENDING" or .state == "IN_PROGRESS" or .state == "QUEUED")] | length')
            failed=$(echo "$checks" | jq '[.[] | select(.conclusion == "FAILURE" or .conclusion == "CANCELLED")] | length')

            if [ "$failed" -gt 0 ]; then
              echo "[FAIL] One or more CI checks failed"
              exit 1
            elif [ "$pending" -eq 0 ]; then
              echo "[PASS] All CI checks completed successfully!"
              break
            else
              echo "⏳ $pending checks still running... (waited ${wait_time}s)"
              sleep $check_interval
              wait_time=$((wait_time + check_interval))
            fi
          done

          if [ $wait_time -ge $max_wait ]; then
            echo "⏰ Timeout waiting for CI checks"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable auto-merge (safe updates)
        if: |
          steps.version-check.outputs.is-major == 'false' &&
          steps.change-analysis.outputs.is-pure-dependency == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "[AUTO-MERGE] Enabling auto-merge for safe dependency update"

          # Add informative comment
          gh pr comment "$PR_NUMBER" --body "## ✅ Auto-merge Enabled

          **Safe dependency update detected**

          **Update Details:**
          - Type: \`${{ steps.metadata.outputs.update-type }}\`
          - Dependencies: \`${{ steps.metadata.outputs.dependency-names }}\`
          - Affected containers: \`${{ steps.change-analysis.outputs.affected-containers }}\`

          **Checks Passed:**
          - ✅ Pure dependency update (no code changes)
          - ✅ Non-major version update (patch/minor only)
          - ✅ All CI checks passed

          **Action:** Auto-merge enabled - will merge when all checks pass."

          # Enable auto-merge with squash
          gh pr merge "$PR_NUMBER" --auto --squash

      - name: Request review for major updates or complex changes
        if: |
          steps.version-check.outputs.is-major == 'true' ||
          steps.change-analysis.outputs.is-pure-dependency == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          if [[ "${{ steps.version-check.outputs.is-major }}" == "true" ]]; then
            reason="Major version update"
            details="Major versions may include breaking changes that require manual review and testing."
          else
            reason="Complex changes detected"
            details="This PR includes changes beyond simple dependency updates."
          fi

          echo "[REVIEW] $reason - manual review required"
          gh pr comment "$PR_NUMBER" --body "## ⚠️ Manual Review Required

          **Reason:** $reason

          **Details:** $details

          **This PR updates:** \`${{ steps.metadata.outputs.dependency-names }}\`
          **Update type:** \`${{ steps.metadata.outputs.update-type }}\`
          **Affected containers:** \`${{ steps.change-analysis.outputs.affected-containers }}\`

          **Next steps:**
          1. Review the changes and changelog for breaking changes
          2. Test locally if needed
          3. Approve and merge manually when ready"
