---
name: Production Deployment

"on":
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_security_scan:
        description: 'Skip security scan (emergency deployment only)'
        required: false
        default: 'false'
        type: boolean

# Required for OIDC authentication to Azure
permissions:
  id-token: write
  contents: read

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ENVIRONMENT_NAME: "production"

jobs:
  pre-production-validation:
    runs-on: ubuntu-latest
    name: Pre-Production Validation
    outputs:
      deployment-approved: ${{ steps.validation-gate.outputs.approved }}
      security-score: ${{ steps.security-scoring.outputs.score }}
      key-vault-name: ${{ steps.get-keyvault.outputs.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Get Key Vault Name
        id: get-keyvault
        run: |
          # Get Key Vault name from production resource group
          KEYVAULT_NAME=$(az keyvault list \
            --resource-group "ai-content-prod-rg" \
            --query "[0].name" -o tsv 2>/dev/null || echo "")
          if [ -z "$KEYVAULT_NAME" ]; then
            echo "Warning: Prod Key Vault not found, using fallback"
            echo "name=" >> $GITHUB_OUTPUT
          else
            echo "name=$KEYVAULT_NAME" >> $GITHUB_OUTPUT
            echo "Found Production Key Vault: $KEYVAULT_NAME"
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Security Tools
        if: ${{ !inputs.skip_security_scan }}
        run: |
          echo "Using Checkov Docker image - no installation needed"
          echo "Using Trivy Docker image - no installation needed"
          LATEST_URL=$(curl \
            -s \
            https://api.github.com/repos/tenable/terrascan/releases/latest \
            | grep -o -E "https://.*Linux_x86_64.tar.gz" | head -1)
          curl -L "$LATEST_URL" > terrascan.tar.gz
          tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz
          sudo mv terrascan /usr/local/bin

      - name: Comprehensive Security Scan
        if: ${{ !inputs.skip_security_scan }}
        run: |
              echo "üîí Running security validation for production deployment.."

              # Checkov - report but don't fail (except for critical issues)
              docker run \
                --rm -v $PWD:/workspace bridgecrew/checkov \
                -d /workspace/infra \
                --quiet \
                --compact \
                --output json \
                --output-file-path /workspace/infra/checkov-results.json \
                || echo "‚ö†Ô∏è Checkov found issues - check report"

              # Trivy - report but don't fail (log security findings)
              docker run \
                --rm \
                -v $PWD:/workspace aquasec/trivy config /workspace/infra \
                --format json --output /workspace/infra/trivy-results.json \
                -severity HIGH,CRITICAL || \
                echo "‚ö†Ô∏è Trivy found security findings - check report"

              # Terrascan - report issues
              cd infra && terrascan scan \
                -i terraform \
                --output json > terrascan-results.json \
                || echo "‚ö†Ô∏è Terrascan found policy violations - check report"

              echo "üìä Security validation completed - check reports"

      - name: Security Scoring
        id: security-scoring
        run: |
          SCORE=100
          DEDUCTIONS=0
          CRITICAL_BLOCKERS=0

          # Check for any security issues
          if [ -f infra/checkov-results.json ]; then
            CHECKOV_ISSUES=$(jq \
              -r '.summary.failed // 0' infra/checkov-results.json)
            DEDUCTIONS=$((DEDUCTIONS + CHECKOV_ISSUES * 5))

            # Check for critical  issues that should block deployment
            CHECKOV_CRITICAL=$(jq \
              -r '[.results.failed_checks[]? | \
              select(.severity == "CRITICAL")] | \
              length' infra/checkov-results.json)
            CRITICAL_BLOCKERS=$((CRITICAL_BLOCKERS + CHECKOV_CRITICAL))
          fi

          if [ -f infra/trivy-results.json ]; then
            TRIVY_ISSUES=$(jq -r '[.Results[]?.Misconfigurations[]?] \
              | length' infra/trivy-results.json)
            DEDUCTIONS=$((DEDUCTIONS + TRIVY_ISSUES * 3))

            # Count critical security misconfigurations
            TRIVY_CRITICAL=$(jq -r '[.Results[]?.Misconfigurations[]? \
              | select(.Severity == "CRITICAL")] | \
              length' infra/trivy-results.json)
            CRITICAL_BLOCKERS=$((CRITICAL_BLOCKERS + TRIVY_CRITICAL))
          fi

          FINAL_SCORE=$((SCORE - DEDUCTIONS))
          if [ $FINAL_SCORE -lt 0 ]; then FINAL_SCORE=0; fi

          echo "üîç Security Assessment:"
          echo "  ‚Ä¢ Security Score: $FINAL_SCORE/100"
          echo "  ‚Ä¢ Total Issues: $((DEDUCTIONS / 3))"
          echo "  ‚Ä¢ Critical Blockers: $CRITICAL_BLOCKERS"

          if [ $CRITICAL_BLOCKERS -gt 0 ]; then
            echo "üö® CRITICAL security issues found that must be resolved before production deployment"
            echo "blocker_found=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No critical blockers found - deployment can proceed with warnings"
            echo "blocker_found=false" >> $GITHUB_OUTPUT
          fi

          echo "score=$FINAL_SCORE" >> $GITHUB_OUTPUT

      - name: Cost Validation
        run: |
          # Skip cost validation if no API key is available
          if [ -z "${{ secrets.INFRACOST_API_KEY }}" ]; then
            echo "‚ö†Ô∏è Infracost API key not configured - skipping cost validation"
            echo "üìã To enable cost validation: Set INFRACOST_API_KEY secret"
            echo "üí∞ Estimated monthly cost: Unknown (validation skipped)"
            exit 0
          fi

          # Get Infracost API key from Key Vault or fallback to GitHub secrets
          if [ -n "${{ steps.get-keyvault.outputs.name }}" ]; then
            INFRACOST_API_KEY=$(az keyvault secret show --vault-name "${{ steps.get-keyvault.outputs.name }}" --name "infracost-api-key" --query "value" -o tsv 2>/dev/null || echo "")
            if [ -z "$INFRACOST_API_KEY" ] || [ "$INFRACOST_API_KEY" = "placeholder-get-from-infracost-io" ]; then
              echo "Using Infracost API key from GitHub secrets fallback"
              export INFRACOST_API_KEY="${{ secrets.INFRACOST_API_KEY }}"
            else
              echo "Using Infracost API key from Key Vault"
              export INFRACOST_API_KEY="$INFRACOST_API_KEY"
            fi
          else
            echo "Using Infracost API key from GitHub secrets fallback"
            export INFRACOST_API_KEY="${{ secrets.INFRACOST_API_KEY }}"
          fi

          # Install and run Infracost
          curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh

          cd infra
          infracost breakdown --path . --format json --out-file infracost-production.json

          # Check if monthly cost exceeds threshold ($100)
          MONTHLY_COST=$(jq -r '.totalMonthlyCost // "0"' infracost-production.json | cut -d. -f1)
          if [ "$MONTHLY_COST" -gt 100 ]; then
            echo "‚ö†Ô∏è Monthly cost estimate (\$${MONTHLY_COST}) exceeds production threshold (\$100)"
            echo "üìä Consider reviewing resource sizing and optimization"
            # Don't fail deployment, just warn
          fi

          echo "‚úÖ Cost validation completed: Monthly estimate \$${MONTHLY_COST}"

      - name: Final Validation Gate
        id: validation-gate
        run: |
          SECURITY_SCORE="${{ steps.security-scoring.outputs.score }}"
          BLOCKER_FOUND="${{ steps.security-scoring.outputs.blocker_found }}"

          # Only block deployment for critical security issues
          if [ "$BLOCKER_FOUND" = "true" ] && [ "${{ inputs.skip_security_scan }}" != "true" ]; then
            echo "üö® Production deployment BLOCKED: Critical security issues must be resolved"
            echo "approved=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Warn about low security scores but allow deployment
          if [ "$SECURITY_SCORE" -lt 90 ]; then
            echo "‚ö†Ô∏è Production deployment proceeding with WARNINGS:"
            echo "   Security Score: $SECURITY_SCORE/100 (recommended: ‚â•90)"
            echo "   Please review security findings and plan improvements"
          else
            echo "‚úÖ Production validation passed (Security Score: $SECURITY_SCORE)"
          fi

          echo "approved=true" >> $GITHUB_OUTPUT

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-summary
          path: deployment-summary.txt
          retention-days: 30

  production-deployment-approval:
    runs-on: ubuntu-latest
    name: Production Deployment Approval
    needs: [pre-production-validation]
    if: needs.pre-production-validation.outputs.deployment-approved == 'true'
    environment:
      name: production
      url: https://hot-topics-func.azurewebsites.net

    steps:
      - name: Manual Approval Required
        run: |
          echo "üéØ Production deployment approved by security validation"
          echo "üîí Security Score: ${{ needs.pre-production-validation.outputs.security-score }}/100"
          echo "‚è≥ Waiting for manual approval in production environment..."

  production-deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [pre-production-validation, production-deployment-approval]
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Setup Azure CLI
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Backup Current Production State
        run: |
          echo "üíæ Creating production state backup..."
          cd infra
          terraform init
          terraform workspace select production || terraform workspace new production

          # Export current state
          terraform show -json > production-state-backup-$(date +%Y%m%d-%H%M%S).json

      - name: Deploy Infrastructure to Production
        run: |
          echo "üöÄ Deploying infrastructure to production..."
          cd infra
          terraform workspace select production

          # Plan with production variables
          terraform plan -var-file="production.tfvars" -out=production.tfplan

          # Apply the planned changes
          terraform apply production.tfplan

      - name: Container Deployment (Future Implementation)
        run: |
          echo "üö¢ Container deployment preparation..."
          echo "‚úÖ Infrastructure deployed successfully for container hosting"
          echo "üìã Next steps for container deployment:"
          echo "  1. Build container images from containers/ directory"
          echo "  2. Push to Azure Container Registry (ACR)"
          echo "  3. Deploy to Azure Container Instances (ACI) or Azure Container Apps"
          echo "  4. Configure container networking and secrets"
          echo ""
          echo "üì¶ Available containers:"
          echo "  ‚Ä¢ content-collector"
          echo "  ‚Ä¢ content-enricher" 
          echo "  ‚Ä¢ content-processor"
          echo "  ‚Ä¢ content-ranker"
          echo "  ‚Ä¢ scheduler"
          echo "  ‚Ä¢ ssg"
          echo ""
          echo "üîÑ Container deployment will be implemented in future iterations"

      - name: Production Smoke Tests
        run: |
          echo "üß™ Running production infrastructure smoke tests..."

          # Wait for deployment to settle
          sleep 30

          # Test 1: Azure infrastructure availability
          echo "Testing Azure infrastructure readiness..."
          
          # Check resource group exists
          if az group show --name "ai-content-prod-rg" > /dev/null 2>&1; then
            echo "‚úÖ Production resource group is available"
          else
            echo "‚ùå Production resource group not found"
            exit 1
          fi
          
          # Check Key Vault exists and is accessible
          if [ -n "${{ needs.pre-production-validation.outputs.key-vault-name }}" ]; then
            KEYVAULT_NAME="${{ needs.pre-production-validation.outputs.key-vault-name }}"
            if az keyvault show --name "$KEYVAULT_NAME" > /dev/null 2>&1; then
              echo "‚úÖ Production Key Vault ($KEYVAULT_NAME) is accessible"
            else
              echo "‚ùå Production Key Vault not accessible"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Key Vault name not found - using GitHub secrets fallback"
          fi

          # Test 2: Storage account availability
          echo "Testing storage infrastructure..."
          STORAGE_ACCOUNTS=$(az storage account list --resource-group "ai-content-prod-rg" --query "[].name" -o tsv)
          if [ -n "$STORAGE_ACCOUNTS" ]; then
            echo "‚úÖ Production storage accounts are available"
            echo "Storage accounts: $STORAGE_ACCOUNTS"
          else
            echo "‚ùå No storage accounts found in production"
            exit 1
          fi

          echo "üèóÔ∏è Infrastructure smoke test: PASSED"
          echo "üì¶ Container deployment: READY FOR IMPLEMENTATION"
          echo "‚úÖ Smoke tests completed - infrastructure ready for containers"

      - name: Create Production Deployment Tag
        run: |
          # Create a deployment tag
          DEPLOYMENT_TAG="production-$(date +%Y%m%d-%H%M%S)"
          git tag -a "$DEPLOYMENT_TAG" -m "Production deployment: $(date)"
          git push origin "$DEPLOYMENT_TAG"

          echo "üè∑Ô∏è Created deployment tag: $DEPLOYMENT_TAG"

  post-deployment-validation:
    runs-on: ubuntu-latest
    name: Post-Deployment Validation
    needs: [pre-production-validation, production-deploy]
    if: always() && needs.production-deploy.result == 'success'

    steps:
      - name: Comprehensive Production Testing
        run: |
          echo "üîç Running comprehensive production validation..."

          # Test infrastructure completeness
          echo "Validating production infrastructure completeness..."
          
          # Check all required resources are deployed
          echo "Checking resource group contents..."
          RESOURCES=$(az resource list --resource-group "ai-content-prod-rg" --query "[].type" -o tsv | sort | uniq)
          echo "Deployed resource types:"
          echo "$RESOURCES" | sed 's/^/  ‚Ä¢ /'
          
          # Validate Key Vault
          if [ -n "${{ needs.pre-production-validation.outputs.key-vault-name }}" ]; then
            KEYVAULT_NAME="${{ needs.pre-production-validation.outputs.key-vault-name }}"
            echo "Testing Key Vault secrets management..."
            # Test that we can access Key Vault (without revealing secrets)
            SECRET_COUNT=$(az keyvault secret list --vault-name "$KEYVAULT_NAME" --query "length(@)" -o tsv 2>/dev/null || echo "0")
            echo "‚úÖ Key Vault contains $SECRET_COUNT secrets"
          fi
          
          # Validate Storage
          echo "Testing storage infrastructure..."
          STORAGE_ACCOUNT=$(az storage account list --resource-group "ai-content-prod-rg" --query "[0].name" -o tsv)
          if [ -n "$STORAGE_ACCOUNT" ]; then
            CONTAINERS=$(az storage container list --account-name "$STORAGE_ACCOUNT" --auth-mode login --query "[].name" -o tsv 2>/dev/null || echo "")
            if [ -n "$CONTAINERS" ]; then
              echo "‚úÖ Storage containers available: $CONTAINERS"
            else
              echo "‚ö†Ô∏è Storage account exists but containers not accessible"
            fi
          fi

          echo "üèóÔ∏è Infrastructure validation: PASSED"
          echo "üì¶ Ready for container deployment phase"

      - name: Update Documentation
        run: |
          echo "üìö Production infrastructure deployment completed successfully"
          echo "üèóÔ∏è Infrastructure Status: DEPLOYED"
          echo "üì¶ Container Status: READY FOR DEPLOYMENT"
          echo "ÔøΩ Security Score: \
            ${{ needs.pre-production-validation.outputs.security-score }}/100"
          echo "üìÖ Deployed: $(date)"
          echo ""
          echo "üöÄ Next Steps:"
          echo "  1. Build container images for microservices"
          echo "  2. Deploy to Azure Container Registry/Instances"
          echo "  3. Configure container networking and load balancing"
          echo "  4. Set up monitoring and logging for containers"

  rollback-preparation:
    runs-on: ubuntu-latest
    name: Prepare Rollback Capability
    needs: [production-deploy]
    if: always()

    steps:
      - name: Prepare Emergency Rollback
        run: |
          echo "üö® Rollback preparation:"
          echo "1. Previous state backup created during deployment"
          echo "2. Deployment tag created for quick identification"
          echo "3. To rollback: revert to previous git tag and redeploy"
          echo "4. Emergency contact: Check SECURITY_POLICY.md"

  notification:
    runs-on: ubuntu-latest
    name: Deployment Notification
    needs: [pre-production-validation, production-deploy, post-deployment-validation]
    if: always()

    steps:
      - name: Send Production Deployment Notification
        run: |
          if [[ "${{ needs.production-deploy.result }}" == "success" &&
                "${{ needs.post-deployment-validation.result }}" == "success" ]]; then
            echo "üéâ PRODUCTION INFRASTRUCTURE DEPLOYMENT SUCCESSFUL"
            echo "üèóÔ∏è Infrastructure: Azure Resource Group, Key Vault, Storage"
            echo "üîí Security Score: ${{ needs.pre-production-validation.outputs.security-score }}/100"
            echo "üìÖ Deployed: $(date)"
            echo "üè∑Ô∏è Git Tag: production-$(date +%Y%m%d-%H%M%S)"
            echo ""
            echo "üì¶ Container Deployment Status: PENDING"
            echo "üöÄ Ready for container deployment phase"
            echo "üìã Available containers: content-collector, content-enricher, content-processor, content-ranker, scheduler, ssg"
          else
            echo "‚ùå PRODUCTION INFRASTRUCTURE DEPLOYMENT FAILED"
            echo "üîç Check logs for details"
            echo "üö® Production environment needs attention"
          fi

  # Future container deployment job (currently disabled)
  # Uncomment and implement when ready to deploy containers
  # container-deployment:
  #   runs-on: ubuntu-latest
  #   name: Deploy Containers to Production
  #   needs: [production-deploy]
  #   if: false  # Disabled until container infrastructure is ready
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Azure CLI
  #       uses: azure/login@v2
  #       with:
  #         client-id: ${{ env.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ env.AZURE_TENANT_ID }}
  #         subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
  #
  #     - name: Build and Deploy Containers
  #       run: |
  #         echo "üèóÔ∏è Building container images..."
  #         # TODO: Add container build and deployment steps
  #         # 1. Build containers from containers/ directory
  #         # 2. Push to Azure Container Registry
  #         # 3. Deploy to Azure Container Instances/Apps
  #         # 4. Configure networking and secrets
  #         echo "üì¶ Container deployment completed"
