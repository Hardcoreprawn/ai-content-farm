name: Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_security_scan:
        description: 'Skip security scan (emergency deployment only)'
        required: false
        default: 'false'
        type: boolean

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ENVIRONMENT_NAME: "production"

jobs:
  pre-production-validation:
    runs-on: ubuntu-latest
    name: Pre-Production Validation
    outputs:
      deployment-approved: ${{ steps.validation-gate.outputs.approved }}
      security-score: ${{ steps.security-scoring.outputs.score }}
      key-vault-name: ${{ steps.get-keyvault.outputs.name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get Key Vault Name
      id: get-keyvault
      run: |
        # Get Key Vault name from production resource group
        KEYVAULT_NAME=$(az keyvault list --resource-group "ai-content-prod-rg" --query "[0].name" -o tsv 2>/dev/null || echo "")
        if [ -z "$KEYVAULT_NAME" ]; then
          echo "Warning: Production Key Vault not found, using GitHub secrets fallback"
          echo "name=" >> $GITHUB_OUTPUT
        else
          echo "name=$KEYVAULT_NAME" >> $GITHUB_OUTPUT
          echo "Found Production Key Vault: $KEYVAULT_NAME"
        fi

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Security Tools
      if: ${{ !inputs.skip_security_scan }}
      run: |
        echo "Using Checkov Docker image - no installation needed"
        echo "Using Trivy Docker image - no installation needed"
        LATEST_URL=$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | grep -o -E "https://.*Linux_x86_64.tar.gz" | head -1)
        curl -L "$LATEST_URL" > terrascan.tar.gz
        tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz
        sudo mv terrascan /usr/local/bin

    - name: Comprehensive Security Scan
      if: ${{ !inputs.skip_security_scan }}
      run: |
        echo "üîí Running comprehensive security validation for production..."
        
        # Checkov - strict mode for production
        docker run --rm -v $PWD:/workspace bridgecrew/checkov -d /workspace/infra --hard-fail-on HIGH,CRITICAL --quiet --compact --output json --output-file-path /workspace/infra/checkov-results.json
        # Azure function deploy directory removed - containers handle deployment now
        
        # Trivy - fail on high severity
        docker run --rm -v $PWD:/workspace aquasec/trivy config /workspace/infra --format json --output /workspace/infra/trivy-results.json --severity HIGH,CRITICAL --exit-code 1
        
        # Terrascan
        cd infra && terrascan scan -i terraform --output json > terrascan-results.json
        
        echo "‚úÖ All security scans passed production criteria"

    - name: Security Scoring
      id: security-scoring
      run: |
        SCORE=100
        DEDUCTIONS=0
        
        # Check for any security issues
        if [ -f infra/checkov-results.json ]; then
          CHECKOV_ISSUES=$(jq -r '.summary.failed // 0' infra/checkov-results.json)
          DEDUCTIONS=$((DEDUCTIONS + CHECKOV_ISSUES * 5))
        fi
        
        if [ -f infra/trivy-results.json ]; then
          TRIVY_ISSUES=$(jq -r '[.Results[]?.Misconfigurations[]?] | length' infra/trivy-results.json)
          DEDUCTIONS=$((DEDUCTIONS + TRIVY_ISSUES * 3))
        fi
        
        FINAL_SCORE=$((SCORE - DEDUCTIONS))
        if [ $FINAL_SCORE -lt 0 ]; then FINAL_SCORE=0; fi
        
        echo "Security Score: $FINAL_SCORE/100 (deductions: $DEDUCTIONS)"
        echo "score=$FINAL_SCORE" >> $GITHUB_OUTPUT

    - name: Cost Validation
      run: |
        # Get Infracost API key from Key Vault or fallback to GitHub secrets
        if [ -n "${{ steps.get-keyvault.outputs.name }}" ]; then
          INFRACOST_API_KEY=$(az keyvault secret show --vault-name "${{ steps.get-keyvault.outputs.name }}" --name "infracost-api-key" --query "value" -o tsv 2>/dev/null || echo "")
          if [ -z "$INFRACOST_API_KEY" ] || [ "$INFRACOST_API_KEY" = "placeholder-get-from-infracost-io" ]; then
            echo "Using Infracost API key from GitHub secrets fallback"
            export INFRACOST_API_KEY="${{ secrets.INFRACOST_API_KEY }}"
          else
            echo "Using Infracost API key from Key Vault"
            export INFRACOST_API_KEY="$INFRACOST_API_KEY"
          fi
        else
          echo "Using Infracost API key from GitHub secrets fallback"
          export INFRACOST_API_KEY="${{ secrets.INFRACOST_API_KEY }}"
        fi
        
        # Install and run Infracost
        curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
        
        cd infra
        infracost breakdown --path . --format json --out-file infracost-production.json
        
        # Check if monthly cost exceeds threshold ($100)
        MONTHLY_COST=$(jq -r '.totalMonthlyCost // "0"' infracost-production.json | cut -d. -f1)
        if [ "$MONTHLY_COST" -gt 100 ]; then
          echo "‚ùå Monthly cost estimate ($MONTHLY_COST) exceeds production threshold ($100)"
          exit 1
        fi
        
        echo "‚úÖ Cost validation passed: Monthly estimate $${MONTHLY_COST}"

    - name: Final Validation Gate
      id: validation-gate
      run: |
        SECURITY_SCORE="${{ steps.security-scoring.outputs.score }}"
        
        # Production requires minimum security score of 90
        if [ "$SECURITY_SCORE" -lt 90 ] && [ "${{ inputs.skip_security_scan }}" != "true" ]; then
          echo "‚ùå Production deployment blocked: Security score $SECURITY_SCORE < 90"
          echo "approved=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "‚úÖ Production validation passed (Security Score: $SECURITY_SCORE)"
        echo "approved=true" >> $GITHUB_OUTPUT

    - name: Upload deployment summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-summary
        path: deployment-summary.txt
        retention-days: 30

  production-deployment-approval:
    runs-on: ubuntu-latest
    name: Production Deployment Approval
    needs: [pre-production-validation]
    if: needs.pre-production-validation.outputs.deployment-approved == 'true'
    environment: 
      name: production
      url: https://hot-topics-func.azurewebsites.net
    
    steps:
    - name: Manual Approval Required
      run: |
        echo "üéØ Production deployment approved by security validation"
        echo "üîí Security Score: ${{ needs.pre-production-validation.outputs.security-score }}/100"
        echo "‚è≥ Waiting for manual approval in production environment..."

  production-deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [pre-production-validation, production-deployment-approval]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Backup Current Production State
      run: |
        echo "üíæ Creating production state backup..."
        cd infra
        terraform init
        terraform workspace select production || terraform workspace new production
        
        # Export current state
        terraform show -json > production-state-backup-$(date +%Y%m%d-%H%M%S).json

    - name: Deploy Infrastructure to Production
      run: |
        echo "üöÄ Deploying infrastructure to production..."
        cd infra
        terraform workspace select production
        
        # Plan with production variables
        terraform plan -var-file="production.tfvars" -out=production.tfplan
        
        # Apply the planned changes
        terraform apply production.tfplan

    - name: Container Deployment (Placeholder)
      run: |
        echo "ÔøΩ Production container deployment will be implemented in future iterations"
        echo "‚úÖ Infrastructure deployed successfully for production container hosting"
        # TODO: Implement production container deployment to Azure Container Instances or Azure Container Apps

    - name: Production Smoke Tests
      run: |
        echo "üß™ Running production smoke tests..."
        
        # Wait for deployment to settle
        sleep 30
        
        # Test 1: HTTP function health
        echo "Testing HTTP Summary Womble function..."
        PROD_RESPONSE=$(curl -s -w "%{http_code}" -X POST \
          -H "Content-Type: application/json" \
          -d '{"source": "test", "limit": 1}' \
          "https://hot-topics-func.azurewebsites.net/api/SummaryWomble")
        
        HTTP_CODE="${PROD_RESPONSE: -3}"
        if [ "$HTTP_CODE" != "200" ]; then
          echo "‚ùå Production smoke test failed: HTTP $HTTP_CODE"
          exit 1
        fi
        
        echo "‚úÖ Production smoke tests passed"

    - name: Create Production Deployment Tag
      run: |
        # Create a deployment tag
        DEPLOYMENT_TAG="production-$(date +%Y%m%d-%H%M%S)"
        git tag -a "$DEPLOYMENT_TAG" -m "Production deployment: $(date)"
        git push origin "$DEPLOYMENT_TAG"
        
        echo "üè∑Ô∏è Created deployment tag: $DEPLOYMENT_TAG"

  post-deployment-validation:
    runs-on: ubuntu-latest
    name: Post-Deployment Validation
    needs: [production-deploy]
    if: always() && needs.production-deploy.result == 'success'
    
    steps:
    - name: Comprehensive Production Testing
      run: |
        echo "üîç Running comprehensive production validation..."
        
        # Test all endpoints
        echo "Testing Summary Womble with real data..."
        curl -s -f "https://hot-topics-func.azurewebsites.net/api/SummaryWomble" \
          -X POST \
          -H "Content-Type: application/json" \
          -d '{"source": "reddit", "topics": ["technology"], "limit": 3, "credentials": {"source": "keyvault"}}' > /dev/null
        
        echo "‚úÖ All production endpoints validated"

    - name: Update Documentation
      run: |
        echo "üìö Production deployment completed successfully"
        echo "üîó Production URL: https://hot-topics-func.azurewebsites.net"
        echo "üìä Security Score: ${{ needs.pre-production-validation.outputs.security-score }}/100"
        echo "üìÖ Deployed: $(date)"

  rollback-preparation:
    runs-on: ubuntu-latest
    name: Prepare Rollback Capability
    needs: [production-deploy]
    if: always()
    
    steps:
    - name: Prepare Emergency Rollback
      run: |
        echo "üö® Rollback preparation:"
        echo "1. Previous state backup created during deployment"
        echo "2. Deployment tag created for quick identification"
        echo "3. To rollback: revert to previous git tag and redeploy"
        echo "4. Emergency contact: Check SECURITY_POLICY.md"

  notification:
    runs-on: ubuntu-latest
    name: Deployment Notification
    needs: [pre-production-validation, production-deploy, post-deployment-validation]
    if: always()
    
    steps:
    - name: Send Production Deployment Notification
      run: |
        if [[ "${{ needs.production-deploy.result }}" == "success" && 
              "${{ needs.post-deployment-validation.result }}" == "success" ]]; then
          echo "üéâ PRODUCTION DEPLOYMENT SUCCESSFUL"
          echo "üîó Production URL: https://hot-topics-func.azurewebsites.net"
          echo "üîí Security Score: ${{ needs.pre-production-validation.outputs.security-score }}/100"
          echo "üìÖ Deployed: $(date)"
          echo "üè∑Ô∏è Git Tag: production-$(date +%Y%m%d-%H%M%S)"
        else
          echo "‚ùå PRODUCTION DEPLOYMENT FAILED"
          echo "üîç Check logs for details"
          echo "üö® Production environment may need attention"
        fi
