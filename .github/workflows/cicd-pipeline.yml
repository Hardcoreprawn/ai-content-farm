---
name: Optimized CI/CD Pipeline

'on':
  push:
    branches: [main]
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write
  packages: write
  id-token: write

env:
  DOCKER_BUILDKIT: 1
  REGISTRY: ghcr.io
  REPOSITORY: hardcoreprawn/ai-content-farm

jobs:
  # === CHANGE DETECTION ===
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      containers: ${{ steps.changes.outputs.containers }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
      deploy-method: ${{ steps.changes.outputs.deploy-method }}
      is-dependabot: ${{ steps.changes.outputs.is-dependabot }}
      requires-terraform: ${{ steps.changes.outputs.requires-terraform }}
      requires-full-pipeline: ${{ steps.changes.outputs.requires-full-pipeline }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Need full history for proper change detection

      - name: Detect Changes and Actor
        id: changes
        uses: ./.github/actions/detect-changes
        with:
          github-event-name: ${{ github.event_name }}
          github-event-before: ${{ github.event.before }}
          github-event-after: ${{ github.event.after }}
          github-base-ref: ${{ github.base_ref }}
          github-actor: ${{ github.actor }}

  # === ALWAYS RUN (LIGHTWEIGHT) ===
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Lint Workflows
        uses: ./.github/actions/lint-workflows

      - name: Code Quality
        uses: ./.github/actions/code-quality

  # === CONTAINER TRACK (ALWAYS FOR CONTAINER CHANGES) ===
  test-containers:
    name: Test ${{ matrix.container }}
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-checks, security-code, security-containers]
    if: |
      always() &&
      needs.quality-checks.result == 'success' &&
      needs.security-code.result == 'success' &&
      needs.security-containers.result == 'success' &&
      fromJSON(needs.detect-changes.outputs.containers)[0] != null
    strategy:
      matrix:
        container: ${{ fromJSON(needs.detect-changes.outputs.containers) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Test Container
        uses: ./.github/actions/test-single-container
        with:
          container-name: ${{ matrix.container }}
          test-type: unit

  build-containers:
    name: Build ${{ matrix.container }}
    runs-on: ubuntu-latest
    needs: [detect-changes, test-containers]
    if: |
      always() &&
      needs.test-containers.result == 'success' &&
      fromJSON(needs.detect-changes.outputs.containers)[0] != null
    strategy:
      matrix:
        container: ${{ fromJSON(needs.detect-changes.outputs.containers) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push
        uses: ./.github/actions/build-and-push-container
        with:
          container-name: ${{ matrix.container }}
          registry: ${{ env.REGISTRY }}
          repository: ${{ env.REPOSITORY }}
          tag: ${{ github.sha }}

  # === SECURITY TRACK ===
  security-code:
    name: Security Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Code Security Scan
        uses: ./.github/actions/security-code
        with:
          fail-on-critical: 'true'

  security-containers:
    name: Security Containers
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.requires-full-pipeline == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Container Security Scan
        uses: ./.github/actions/security-containers
        with:
          fail-on-critical: 'true'
          scan-mode: 'dockerfile'

  security-container-images:
    name: Security ${{ matrix.container }}
    runs-on: ubuntu-latest
    needs: [detect-changes, build-containers]
    if: |
      always() &&
      needs.build-containers.result == 'success' &&
      fromJSON(needs.detect-changes.outputs.containers)[0] != null
    strategy:
      matrix:
        container: ${{ fromJSON(needs.detect-changes.outputs.containers) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Container Image Security Scan
        uses: ./.github/actions/security-containers
        with:
          fail-on-critical: 'true'
          scan-mode: 'image'
          registry: ${{ env.REGISTRY }}
          repository: ${{ env.REPOSITORY }}
          image-tag: ${{ github.sha }}
          container-name: ${{ matrix.container }}

  # === INFRASTRUCTURE TRACK (CONDITIONAL) ===
  security-infrastructure:
    name: Security Infrastructure
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: |
      needs.detect-changes.outputs.requires-terraform == 'true' ||
      github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Infrastructure Security Scan
        uses: ./.github/actions/security-infrastructure
        with:
          fail-on-critical: 'false'

  terraform-checks:
    name: Terraform Checks
    runs-on: ubuntu-latest
    needs: [detect-changes, security-infrastructure]
    if: |
      needs.detect-changes.outputs.requires-terraform == 'true' ||
      github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Terraform Quality
        uses: ./.github/actions/infrastructure-quality
        with:
          infra-changed: ${{ needs.detect-changes.outputs.infrastructure }}

      - name: Cost Analysis
        uses: ./.github/actions/cost-analysis
        with:
          infracost-api-key: ${{ secrets.INFRACOST_API_KEY }}

  # === DEPLOYMENT ===
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [detect-changes, terraform-checks, security-infrastructure]
    if: |
      always() &&
      github.ref == 'refs/heads/main' &&
      (needs.detect-changes.outputs.requires-terraform == 'true' || github.ref == 'refs/heads/main') &&
      needs.terraform-checks.result == 'success' &&
      needs.security-infrastructure.result == 'success'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.2

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy
        uses: ./.github/actions/smart-deploy
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          environment: production
          deployment-method: ${{ needs.detect-changes.outputs.deploy-method }}
          terraform-storage-account: ${{ vars.TERRAFORM_STATE_STORAGE_ACCOUNT_PROD }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          image-tag: ${{ github.sha }}

  # === CONTAINER SYNC ===
  container-sync:
    name: Sync ${{ matrix.container }}
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy, security-container-images]
    if: |
      always() &&
      github.ref == 'refs/heads/main' &&
      (needs.deploy.result == 'success' || needs.deploy.result == 'skipped') &&
      needs.security-container-images.result == 'success' &&
      fromJSON(needs.detect-changes.outputs.containers)[0] != null
    strategy:
      matrix:
        container: ${{ fromJSON(needs.detect-changes.outputs.containers) }}
      fail-fast: false
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Sync Container Versions
        uses: ./.github/actions/sync-container-versions
        with:
          registry: ${{ env.REGISTRY }}
          repository: ${{ env.REPOSITORY }}
          image-tag: ${{ github.sha }}
          resource-group: ${{ github.ref == 'refs/heads/main' && 'ai-content-prod-rg' || 'ai-content-dev-rg' }}
          container-name: ${{ matrix.container }}

  # === SUMMARY ===
  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs:
      - detect-changes
      - quality-checks
      - security-code
      - security-containers
      - security-infrastructure
      - security-container-images
      - terraform-checks
      - test-containers
      - build-containers
      - deploy
      - container-sync
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Generate Pipeline Summary
        uses: ./.github/actions/generate-summary
        with:
          is-dependabot: ${{ needs.detect-changes.outputs.is-dependabot }}
          requires-terraform: ${{ needs.detect-changes.outputs.requires-terraform }}
          test-containers-result: ${{ needs.test-containers.result }}
          security-containers-result: ${{ needs.security-containers.result }}
          terraform-checks-result: ${{ needs.terraform-checks.result }}
          deploy-result: ${{ needs.deploy.result }}
          container-sync-result: ${{ needs.container-sync.result }}
