name: CI/CD Pipeline
on:
  push:
    branches: [main]
    paths-ignore:
      - '.github/workflows/**'
      - '.github/actions/**'
      - '**.md'
      - 'docs/**'

permissions:
  contents: read
  security-events: write
  pull-requests: write
  issues: write
  actions: read
  checks: write
  id-token: write # Required for OIDC authentication

jobs:
  # Workflow Validation - Fast fail if workflows are invalid
  workflow-validation:
    name: Validate Workflows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Validate Workflows
        uses: ./.github/actions/lint-workflows

  # Container Build Validation - Quick smoke test for all containers
  container-build-validation:
    name: Container Build Validation
    runs-on: ubuntu-latest
    needs: workflow-validation
    if: always() && needs.workflow-validation.result != 'failure'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Test All Container Builds
        run: |
          echo "🐳 Testing Docker builds for all containers..."

          build_failures=0
          containers_tested=0

          for container_dir in containers/*/; do
            if [ -d "$container_dir" ] && [ -f "$container_dir/Dockerfile" ]; then
              container_name=$(basename "$container_dir")
              containers_tested=$((containers_tested + 1))

              echo "🔨 Building $container_name..."

              if docker build -t "test-$container_name:latest" "$container_dir"; then
                echo "✅ $container_name builds successfully"
                # Clean up test image
                docker rmi "test-$container_name:latest" || true
              else
                echo "❌ $container_name build failed"
                build_failures=$((build_failures + 1))
              fi
            fi
          done

          echo "📊 Build Summary:"
          echo "- Containers tested: $containers_tested"
          echo "- Build failures: $build_failures"
          echo "- Success rate: $(( (containers_tested - build_failures) * 100 / containers_tested ))%"

          if [ "$build_failures" -gt 0 ]; then
            echo "❌ $build_failures container(s) failed to build"
            exit 1
          else
            echo "✅ All containers build successfully"
          fi

  # Quality Gate - Parallel Matrix of Quality Checks
  quality-gate:
    name: Quality Check - ${{ matrix.check-type }}
    runs-on: ubuntu-latest
    needs: workflow-validation
    strategy:
      matrix:
        check-type:
          - security-scan
          - code-quality
          - dependency-check
          - infrastructure-lint
      fail-fast: false  # Continue other checks even if one fails
    outputs:
      security-passed: ${{ steps.security-check.outputs.passed }}
      quality-passed: ${{ steps.quality-check.outputs.passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python (for quality checks)
        if: matrix.check-type == 'code-quality' || matrix.check-type == 'dependency-check'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Run Security Scan
        if: matrix.check-type == 'security-scan'
        id: security-check
        uses: ./.github/actions/security-scan
        with:
          upload-sarif: 'true'

      - name: Run Code Quality Checks
        if: matrix.check-type == 'code-quality'
        id: quality-check
        run: |
          echo "🔍 Running code quality checks..."

          # Install quality tools
          pip install flake8 black isort mypy pylint

          # Run code formatting checks
          echo "Checking code formatting with black..."
          black --check --diff . || echo "black_failed=true" >> "$GITHUB_ENV"

          # Run import sorting checks
          echo "Checking import sorting with isort..."
          isort --check-only --diff . || echo "isort_failed=true" >> "$GITHUB_ENV"

          # Run linting
          echo "Running flake8 linting..."
          flake8 --max-line-length=100 --extend-ignore=E203,W503 . || echo "flake8_failed=true" >> "$GITHUB_ENV"

          # Check for any failures
          if [[ "${black_failed}" == "true" || "${isort_failed}" == "true" || "${flake8_failed}" == "true" ]]; then
            echo "passed=false" >> "$GITHUB_OUTPUT"
            exit 1
          else
            echo "passed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run Dependency Security Check
        if: matrix.check-type == 'dependency-check'
        run: |
          echo "🔒 Running dependency security checks..."

          # Install safety for dependency scanning
          pip install safety

          # Check each container's requirements
          find containers/ -name "requirements.txt" -type f | while read -r req_file; do
            echo "Checking dependencies in $req_file..."
            safety check --file "$req_file" --output text || echo "safety issues found in $req_file"
          done

          # Check main libs requirements
          if [ -f "libs/requirements.txt" ]; then
            echo "Checking libs dependencies..."
            safety check --file "libs/requirements.txt" --output text || echo "safety issues found in libs"
          fi

      - name: Run Infrastructure Linting
        if: matrix.check-type == 'infrastructure-lint'
        run: |
          echo "🏗️ Running infrastructure linting..."

          # Run Terraform formatting check
          if command -v terraform >/dev/null 2>&1; then
            echo "Checking Terraform formatting..."
            terraform fmt -check -recursive infra/ || echo "terraform_fmt_failed=true"
          else
            echo "Terraform not available, using Docker..."
            docker run --rm -v "$(pwd)/infra:/workspace" -w /workspace hashicorp/terraform:latest fmt -check -recursive . || echo "terraform_fmt_failed=true"
          fi

          # Run YAML linting on infrastructure files
          echo "Checking YAML files..."
          find infra/ -name "*.yml" -o -name "*.yaml" | head -5 | while read -r file; do
            echo "Checking $file"
          done

  # Quality Gate Summary - Aggregate Results
  quality-gate-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: quality-gate
    if: always() && needs.quality-gate.result != 'cancelled'
    outputs:
      passed: ${{ steps.evaluate.outputs.passed }}
    steps:
      - name: Evaluate Quality Gate Results
        id: evaluate
        run: |
          echo "📊 Evaluating quality gate results..."

          # Check if any quality gate jobs failed
          if [ "${{ needs.quality-gate.result }}" = "failure" ]; then
            echo "❌ Quality gate failed - see individual check results"
            echo "passed=false" >> "$GITHUB_OUTPUT"

            {
              echo "## Quality Gate Summary"
              echo "❌ **Status**: FAILED"
              echo "Some quality checks did not pass. Review the individual check results above."
            } >> "$GITHUB_STEP_SUMMARY"
            exit 1
          else
            echo "✅ Quality gate passed - all checks successful"
            echo "passed=true" >> "$GITHUB_OUTPUT"

            {
              echo "## Quality Gate Summary"
              echo "✅ **Status**: PASSED"
              echo "All quality checks completed successfully!"
            } >> "$GITHUB_STEP_SUMMARY"
          fi

  # Cost Analysis
  cost-analysis:
    name: Cost Analysis
    runs-on: ubuntu-latest
    needs: quality-gate-summary
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Analyze Infrastructure Costs
        uses: ./.github/actions/cost-analysis
        with:
          infracost-api-key: ${{ secrets.INFRACOST_API_KEY }}
          comment-on-pr: 'false'

  # Dependency Analysis
  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    needs: quality-gate-summary
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Analyze Dependencies
        run: |
          echo "Analyzing dependencies..."
          if [ -f "scripts/dependency-analysis.sh" ]; then
            bash scripts/dependency-analysis.sh
          else
            echo "Dependency analysis script not found - using basic analysis"
          fi

  # Container Tests - Comprehensive Matrix Strategy
  container-tests:
    name: Test ${{ matrix.container }} (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    needs: quality-gate-summary
    strategy:
      matrix:
        container:
          - content-collector
          - content-processor
          - content-ranker
          - content-enricher
          - content-generator
          - site-generator
          - markdown-generator
          - collector-scheduler
        test-type:
          - smoke
          - unit
          - integration
      fail-fast: false  # Continue testing other containers even if one fails
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Test Container
        uses: ./.github/actions/test-single-container
        with:
          container-name: ${{ matrix.container }}
          test-type: ${{ matrix.test-type }}
          fail-fast: 'false'
          upload-coverage: 'true'

  # Container Test Results Aggregation
  container-tests-summary:
    name: Container Tests Summary
    runs-on: ubuntu-latest
    needs: container-tests
    if: always() && needs.container-tests.result != 'cancelled'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download All Test Results
        uses: actions/download-artifact@v5
        with:
          pattern: test-results-*
          path: test-results/

      - name: Aggregate Test Results
        run: |
          echo "📊 Aggregating test results from all containers..."

          total_jobs="${{ strategy.job-total }}"
          failed_jobs=0

          # Count successful vs failed matrix jobs
          if [ "${{ needs.container-tests.result }}" = "failure" ]; then
            echo "❌ Some container tests failed"
            failed_jobs=1
          fi

          {
            echo "## Container Test Summary"
            echo "- **Total Matrix Jobs**: ${total_jobs}"
            echo "- **Failed Jobs**: ${failed_jobs}"
            echo "- **Success Rate**: $(( (total_jobs - failed_jobs) * 100 / total_jobs ))%"
            echo ""
            echo "### Test Artifacts Generated:"
            find test-results/ -name "*.xml" | sort
          } >> "$GITHUB_STEP_SUMMARY"

          # Exit with error if any tests failed
          if [ "$failed_jobs" -gt 0 ]; then
            echo "Container tests failed - see individual job logs for details"
            exit 1
          fi

  # AI Security Review - DISABLED FOR PERFORMANCE
  # ai-security-review:
  #   name: AI Security Review
  #   runs-on: ubuntu-latest
  #   needs: quality-gate-summary
  #   if: always() && (needs.quality-gate-summary.result == 'success' || needs.quality-gate-summary.result == 'failure')
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5
  #
  #     - name: AI Security Review
  #       uses: ./.github/actions/ai-review-security
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}

  # Production Deployment
  production-deployment:
    name: Production Deployment
    runs-on: ubuntu-latest
    needs: [quality-gate-summary, cost-analysis, dependency-analysis, container-tests-summary]
    environment: production
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.14.0"

      - name: Deploy to Production
        id: deploy
        run: |
          echo "Starting production deployment using Terraform and Azure Container Apps..."

          # Deploy infrastructure and containers using existing deployment logic
          echo "Deploying to production environment..."

          # Switch to production workspace
          cd infra
          terraform workspace select production || terraform workspace new production

          # Initialize if needed
          if [ ! -d ".terraform" ]; then
            terraform init
          fi

          # Plan and apply infrastructure changes
          terraform plan -var="environment=production" -var="resource_prefix=ai-content-prod" -out=tfplan
          terraform apply "tfplan"

          # Deploy containers using the deployment script
          echo "Deploying containers..."
          cd ..
          bash "scripts/deploy-containers.sh"

          # Get the Container App URL
          CONTAINER_APP_URL=$(az containerapp show \
            --name "ai-content-farm-core-content-generator" \
            --resource-group "ai-content-farm-core-rg" \
            --query "properties.configuration.ingress.fqdn" \
            -o tsv)

          # Set the deployment URL output
          if [ -n "$CONTAINER_APP_URL" ]; then
            echo "deployment-url=https://$CONTAINER_APP_URL" >> "$GITHUB_OUTPUT"
            echo "Production deployment completed successfully"
            echo "Container App URL: https://$CONTAINER_APP_URL"
          else
            echo "Failed to get Container App URL"
            exit 1
          fi

  # Post-Deployment Tests
  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: production-deployment
    if: needs.production-deployment.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Health Check
        run: |
          echo "Running post-deployment health checks..."
          deployment_url="${{ needs.production-deployment.outputs.deployment-url }}"
          if [ -n "$deployment_url" ]; then
            echo "Testing deployment at: \"$deployment_url\""
            # Add actual health check logic here
            # curl -f "$deployment_url/health" || exit 1
            echo "Health check passed"
          else
            echo "No deployment URL available for testing"
            exit 1
          fi

      - name: Integration Tests
        run: |
          echo "Running post-deployment integration tests..."
          # Add actual integration test logic here
          echo "Integration tests passed"

      - name: Smoke Tests
        run: |
          echo "Running smoke tests against production..."
          # Add actual smoke test logic here
          echo "Smoke tests passed"
