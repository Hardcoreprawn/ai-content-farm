name: CI/CD Pipeline
on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '.github/workflows/**'
      - '.github/actions/**'
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '.github/workflows/**'
      - '.github/actions/**'
      - '**.md'
      - 'docs/**'

permissions:
  contents: read
  security-events: write
  pull-requests: write
  issues: write
  actions: read
  checks: write
  id-token: write  # Required for Azure OIDC authentication

env:
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

jobs:
  # Stage 1: Workflow Validation
  workflow-validation:
    name: Validate Workflows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Record Stage Start
        id: start-time
        run: echo "start-time=$(date +%s)" >> "$GITHUB_OUTPUT"

      - name: Validate Workflows
        uses: ./.github/actions/lint-workflows

      - name: Calculate Stage Duration
        id: stage-end
        if: always()
        run: |
          end_time=$(date +%s)
          start_time="${{ steps.start-time.outputs.start-time }}"
          # Validate start_time is numeric
          if ! [[ "$start_time" =~ ^[0-9]+$ ]]; then
            echo "Invalid start time: $start_time"
            exit 1
          fi
          duration=$((end_time - start_time))
          echo "duration=$duration" >> "$GITHUB_OUTPUT"

      - name: Monitor Stage Performance
        if: always()
        uses: ./.github/actions/pipeline-monitoring
        with:
          stage-name: 'workflow-validation'
          stage-result: ${{ job.status }}
          stage-duration: ${{ steps.stage-end.outputs.duration }}
          collect-metrics: 'true'
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # Stage 2: Change Detection
  change-detection:
    name: Detect Changes
    runs-on: ubuntu-latest
    needs: workflow-validation
    outputs:
      containers-changed: ${{ steps.changes.outputs.containers-changed }}
      infra-changed: ${{ steps.changes.outputs.infrastructure-changed }}
      libs-changed: ${{ steps.changes.outputs.libs-changed }}
      all-containers: ${{ steps.changes.outputs.all-containers }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Detect Changes
        id: changes
        uses: ./.github/actions/detect-changes
        with:
          force-build-all: ${{ github.ref == 'refs/heads/main' && 'true' || 'false' }}

  # Stage 3: Container Build
  # Build base images first (required dependency for all service containers)
  build-base:
    name: Build Base Images
    runs-on: ubuntu-latest
    needs: [change-detection]
    if: needs.change-detection.outputs.containers-changed != '' || needs.change-detection.outputs.libs-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Base Images
        uses: ./.github/actions/build-base-images
        with:
          enable-cache: 'true'

  # Generate build matrix for parallel container builds
  build-matrix:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    needs: [change-detection]
    if: needs.change-detection.outputs.containers-changed != '' || needs.change-detection.outputs.libs-changed == 'true'
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
    steps:
      - name: Generate Container Build Matrix
        id: generate
        run: |
          # Generate matrix based on what changed
          libs_changed="${{ needs.change-detection.outputs.libs-changed }}"
          all_containers="${{ needs.change-detection.outputs.all-containers }}"
          containers_changed="${{ needs.change-detection.outputs.containers-changed }}"

          # Validate inputs - only allow expected values
          if [[ "$libs_changed" != "true" && "$libs_changed" != "false" ]]; then
            echo "Invalid libs-changed value: $libs_changed"
            exit 1
          fi

          if [ "$libs_changed" = "true" ]; then
            # Build all containers if libs changed
            echo "Building all containers due to libs change"
            matrix="$all_containers"
          else
            # Build only changed containers
            echo "Building changed containers only"
            matrix="$containers_changed"
          fi

          # Validate matrix contains only allowed characters (alphanumeric, commas, hyphens)
          if [[ ! "$matrix" =~ ^[a-zA-Z0-9,-]*$ ]]; then
            echo "Invalid characters in matrix: $matrix"
            exit 1
          fi

          # Convert comma-separated to JSON array safely
          if [ -n "$matrix" ]; then
            containers_array=$(echo "$matrix" | sed 's/,/","/g' | sed 's/^/["/' | sed 's/$/"]/')
          else
            containers_array='[]'
          fi

          echo "Generated matrix: $containers_array"
          echo "matrix=$containers_array" >> "$GITHUB_OUTPUT"

  # Build service containers in parallel (after base images)
  build-containers:
    name: Build ${{ matrix.container }}
    runs-on: ubuntu-latest
    needs: [build-matrix, build-base]
    strategy:
      matrix:
        container: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Container
        uses: ./.github/actions/build-single-container
        with:
          container-name: ${{ matrix.container }}
          enable-cache: 'true'

  # Collect build results and setup tests
  container-build-summary:
    name: Container Build Summary
    runs-on: ubuntu-latest
    needs: [change-detection, build-matrix, build-containers]
    if: always() && (needs.change-detection.outputs.containers-changed != '' || needs.change-detection.outputs.libs-changed == 'true')
    outputs:
      containers-built: ${{ steps.summary.outputs.containers-built }}
      containers-to-test: ${{ steps.test-setup.outputs.containers-to-test }}
      containers-json: ${{ steps.test-setup.outputs.containers-json }}
      build-result: ${{ steps.summary.outputs.build-result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Collect Build Results
        id: summary
        uses: ./.github/actions/collect-build-results
        with:
          container-jobs: ${{ toJson(needs.build-containers) }}
          all-containers: ${{ needs.change-detection.outputs.all-containers }}
      - name: Setup Container Tests
        id: test-setup
        uses: ./.github/actions/setup-container-tests
        with:
          containers-changed: ${{ needs.change-detection.outputs.containers-changed }}
          libs-changed: ${{ needs.change-detection.outputs.libs-changed }}
          all-containers: ${{ needs.change-detection.outputs.all-containers }}

  # Stage 4: Quality Gates (Parallel)
  security-trivy:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run Trivy Scan
        uses: ./.github/actions/security-trivy

  infrastructure-quality:
    name: Infrastructure Quality
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run Infrastructure Quality Checks
        uses: ./.github/actions/infrastructure-quality
        with:
          infra-changed: ${{ needs.change-detection.outputs.infra-changed }}

  security-semgrep:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.change-detection.outputs.containers-changed != '' || needs.change-detection.outputs.libs-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run Semgrep Scan
        uses: ./.github/actions/security-semgrep

  security-python:
    name: Python Security Scan
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.change-detection.outputs.containers-changed != '' || needs.change-detection.outputs.libs-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run Python Security Scan
        uses: ./.github/actions/security-python

  security-sbom:
    name: SBOM Generation
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.change-detection.outputs.containers-changed != '' || needs.change-detection.outputs.libs-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Generate SBOM
        uses: ./.github/actions/security-sbom

  security-checkov:
    name: Checkov Infrastructure Scan
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.change-detection.outputs.infra-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run Checkov Scan
        uses: ./.github/actions/security-checkov

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run Code Quality Checks
        uses: ./.github/actions/code-quality

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run Dependency Security Analysis
        uses: ./.github/actions/dependency-analysis

  cost-analysis:
    name: Cost Analysis
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.change-detection.outputs.infra-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Analyze Infrastructure Costs
        uses: ./.github/actions/cost-analysis
        with:
          infracost-api-key: ${{ secrets.INFRACOST_API_KEY }}
          comment-on-pr: ${{ github.event_name == 'pull_request' && 'true' || 'false' }}

  # Stage 5: Container Tests
  container-tests:
    name: Test ${{ matrix.container }} (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    needs: [container-build-summary]
    if: needs.container-build-summary.outputs.containers-to-test != '' && needs.container-build-summary.outputs.containers-json != '[]'
    strategy:
      matrix:
        container: ${{ fromJson(needs.container-build-summary.outputs.containers-json) }}
        test-type: [unit, integration]
        exclude:
          - container: collector-scheduler
            test-type: integration
          - container: markdown-generator
            test-type: integration
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Test Container
        uses: ./.github/actions/test-single-container
        with:
          container-name: ${{ matrix.container }}
          test-type: ${{ matrix.test-type }}
          upload-coverage: 'true'

  # Stage 6: Build Report (Quality Gates + Test Results)
  build-report:
    name: Build Report
    runs-on: ubuntu-latest
    needs: [security-trivy, security-semgrep, security-python, security-sbom, security-checkov, code-quality, infrastructure-quality, dependency-analysis, cost-analysis, container-build-summary, container-tests]
    if: always() && !cancelled()
    outputs:
      build-passed: ${{ steps.report.outputs.build-passed }}
      quality-passed: ${{ steps.report.outputs.quality-passed }}
      tests-passed: ${{ steps.report.outputs.tests-passed }}
      summary: ${{ steps.report.outputs.summary }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Generate Build Report
        id: report
        uses: ./.github/actions/build-report
        with:
          security-trivy-result: ${{ needs.security-trivy.result }}
          security-semgrep-result: ${{ needs.security-semgrep.result }}
          security-python-result: ${{ needs.security-python.result }}
          security-sbom-result: ${{ needs.security-sbom.result }}
          security-checkov-result: ${{ needs.security-checkov.result }}
          code-quality-result: ${{ needs.code-quality.result }}
          infrastructure-result: ${{ needs.infrastructure-quality.result }}
          dependency-result: ${{ needs.dependency-analysis.result }}
          cost-analysis-result: ${{ needs.cost-analysis.result }}
          containers-to-test: ${{ needs.container-build-summary.outputs.containers-to-test }}
          containers-json: ${{ needs.container-build-summary.outputs.containers-json }}
          container-tests-result: ${{ needs.container-tests.result }}
          container-build-result: ${{ needs.container-build-summary.outputs.build-result }}

  # Stage 7: Deployment (Production Only)
  deployment:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-report, cost-analysis, container-build-summary]
    if: |
      github.ref == 'refs/heads/main' &&
      always() &&
      needs.build-report.outputs.build-passed == 'true' &&
      (needs.cost-analysis.result == 'success' || needs.cost-analysis.result == 'skipped') &&
      needs.container-build-summary.outputs.build-result == 'success'
    environment: production
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      - name: Deploy to Azure
        id: deploy
        uses: ./.github/actions/deploy-to-azure
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          resource-group: ai-content-farm-core-rg
          environment: production
          containers: ${{ needs.container-build-summary.outputs.containers-built || 'all' }}

  # Stage 8: Post-Deployment Tests
  post-deployment:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: deployment
    if: needs.deployment.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Validate Deployment
        uses: ./.github/actions/post-deployment
        with:
          deployment-url: ${{ needs.deployment.outputs.deployment-url }}
