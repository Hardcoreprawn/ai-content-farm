name: CI/CD Pipeline
on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '.github/workflows/**'
      - '.github/actions/**'
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '.github/workflows/**'
      - '.github/actions/**'
      - '**.md'
      - 'docs/**'

permissions:
  contents: read
  security-events: write
  pull-requests: write
  issues: write
  actions: read
  checks: write
  id-token: write

env:
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

jobs:
  # Stage 1: Fast Validation
  workflow-validation:
    name: Validate Workflows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Record Stage Start
        id: start-time
        run: echo "start-time=$(date +%s)" >> "$GITHUB_OUTPUT"

      - name: Validate Workflows
        uses: ./.github/actions/lint-workflows

      - name: Calculate Stage Duration
        id: stage-end
        if: always()
        run: |
          end_time=$(date +%s)
          start_time=${{ steps.start-time.outputs.start-time }}
          duration=$((end_time - start_time))
          echo "duration=$duration" >> "$GITHUB_OUTPUT"

      - name: Monitor Stage Performance
        if: always()
        uses: ./.github/actions/pipeline-monitoring
        with:
          stage-name: 'workflow-validation'
          stage-result: ${{ job.status }}
          stage-duration: ${{ steps.stage-end.outputs.duration }}
          collect-metrics: 'true'
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # Stage 2: Change Detection
  change-detection:
    name: Detect Changes
    runs-on: ubuntu-latest
    needs: workflow-validation
    outputs:
      containers-changed: ${{ steps.changes.outputs.containers-changed }}
      infra-changed: ${{ steps.changes.outputs.infrastructure-changed }}
      libs-changed: ${{ steps.changes.outputs.libs-changed }}
      all-containers: ${{ steps.changes.outputs.all-containers }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Detect Changes
        id: changes
        uses: ./.github/actions/detect-changes

  # Stage 3: Container Build
  container-build:
    name: Build Containers
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.change-detection.outputs.containers-changed != '' || needs.change-detection.outputs.libs-changed == 'true'
    outputs:
      service-containers: ${{ steps.build-services.outputs.containers-built }}
      containers-to-test: ${{ steps.test-setup.outputs.containers-to-test }}
      containers-json: ${{ steps.test-setup.outputs.containers-json }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Base Images
        uses: ./.github/actions/build-base-images
        with:
          enable-cache: 'true'
      - name: Build Service Containers
        id: build-services
        uses: ./.github/actions/build-service-containers
        with:
          containers: ${{ needs.change-detection.outputs.containers-changed }}
          force-rebuild-on-libs-change: ${{ needs.change-detection.outputs.libs-changed }}
          enable-cache: 'true'
      - name: Setup Container Tests
        id: test-setup
        uses: ./.github/actions/setup-container-tests
        with:
          containers-changed: ${{ needs.change-detection.outputs.containers-changed }}
          libs-changed: ${{ needs.change-detection.outputs.libs-changed }}
          all-containers: ${{ needs.change-detection.outputs.all-containers }}

  # Stage 4: Quality Gates (Parallel)
  security-scanning:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: workflow-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run Security Scan
        uses: ./.github/actions/security-scan
        with:
          upload-sarif: 'true'
          environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: workflow-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Run Code Quality Checks
        run: |
          pip install flake8 black isort mypy pylint
          black --check --diff .
          isort --check-only --diff .
          flake8 .

  infrastructure-quality:
    name: Infrastructure Quality
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.change-detection.outputs.infra-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run Infrastructure Checks
        run: |
          docker run --rm -v "$(pwd)/infra:/workspace" -w /workspace hashicorp/terraform:latest fmt -check -recursive .

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    needs: workflow-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Run Dependency Security Check
        run: |
          pip install safety
          find containers/ -name "requirements.txt" -exec safety check --file {} \;

  # Stage 5: Quality Gate Summary
  quality-gate-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [security-scanning, code-quality, infrastructure-quality, dependency-analysis]
    if: always() && !cancelled()
    outputs:
      passed: ${{ steps.evaluate.outputs.passed }}
    steps:
      - name: Evaluate Quality Gates
        id: evaluate
        uses: ./.github/actions/evaluate-quality-gates
        with:
          security-result: ${{ needs.security-scanning.result }}
          code-quality-result: ${{ needs.code-quality.result }}
          infrastructure-result: ${{ needs.infrastructure-quality.result }}
          dependency-result: ${{ needs.dependency-analysis.result }}

  # Stage 6: Container Tests
  container-tests:
    name: Test ${{ matrix.container }} (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    needs: [container-build, quality-gate-summary]
    if: needs.container-build.outputs.containers-to-test != ''
    strategy:
      matrix:
        container: ${{ fromJson(needs.container-build.outputs.containers-json) }}
        test-type: [unit, integration]
        exclude:
          - container: collector-scheduler
            test-type: integration
          - container: markdown-generator
            test-type: integration
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Test Container
        uses: ./.github/actions/test-single-container
        with:
          container-name: ${{ matrix.container }}
          test-type: ${{ matrix.test-type }}
          upload-coverage: 'true'

  # Stage 7: Container Test Summary
  container-tests-summary:
    name: Container Tests Summary
    runs-on: ubuntu-latest
    needs: [container-build, container-tests]
    if: always() && !cancelled()
    outputs:
      tests-passed: ${{ steps.summary.outputs.passed }}
    steps:
      - name: Evaluate Test Results
        id: summary
        run: |
          if [[ "${{ needs.container-build.outputs.containers-to-test }}" == "" ]]; then
            echo "passed=true" >> "$GITHUB_OUTPUT"
            echo "No containers needed testing"
          elif [[ "${{ needs.container-tests.result }}" == "success" ]]; then
            echo "passed=true" >> "$GITHUB_OUTPUT"
            echo "All container tests passed"
          else
            echo "passed=false" >> "$GITHUB_OUTPUT"
            echo "Some container tests failed"
            exit 1
          fi

  # Stage 8: Cost Analysis (for infrastructure changes)
  cost-analysis:
    name: Cost Analysis
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.change-detection.outputs.infra-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Analyze Infrastructure Costs
        uses: ./.github/actions/cost-analysis
        with:
          infracost-api-key: ${{ secrets.INFRACOST_API_KEY }}
          comment-on-pr: ${{ github.event_name == 'pull_request' && 'true' || 'false' }}

  # Stage 9: Deployment
  deployment:
    name: Deploy to ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
    runs-on: ubuntu-latest
    needs: [quality-gate-summary, container-tests-summary, cost-analysis, container-build]
    if: |
      always() &&
      needs.quality-gate-summary.outputs.passed == 'true' &&
      (needs.container-tests-summary.outputs.tests-passed == 'true' || needs.container-tests-summary.result == 'skipped') &&
      (needs.cost-analysis.result == 'success' || needs.cost-analysis.result == 'skipped')
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Deploy to Azure
        id: deploy
        uses: ./.github/actions/deploy-to-azure
        with:
          azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ github.ref == 'refs/heads/main' && 'ai-content-farm-core-rg' || 'ai-content-farm-staging-rg' }}
          environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          containers: ${{ needs.container-build.outputs.service-containers || 'all' }}

  # Stage 10: Post-Deployment Tests
  post-deployment:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: deployment
    if: needs.deployment.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Health Check
        run: |
          deployment_url="${{ needs.deployment.outputs.deployment-url }}"
          if [ -n "$deployment_url" ]; then
            for attempt in {1..5}; do
              if curl -f --max-time 30 "$deployment_url/health"; then
                echo "Health check passed"
                exit 0
              fi
              echo "Attempt $attempt failed, retrying..."
              sleep 10
            done
            echo "Health check failed after 5 attempts"
            exit 1
          fi
