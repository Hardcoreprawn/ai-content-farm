name: CI/CD Pipeline
on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '.github/workflows/**'
      - '.github/actions/**'
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '.github/workflows/**'
      - '.github/actions/**'
      - '**.md'
      - 'docs/**'

permissions:
  contents: read
  security-events: write
  pull-requests: write
  issues: write
  actions: read
  checks: write
  packages: write  # Required for pushing to GitHub Container Registry
  id-token: write  # Required for Azure OIDC authentication

env:
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

jobs:
  # Stage 1: Workflow Validation (with pre-commit hook validation)
  workflow-validation:
    name: Validate Workflows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Record Stage Start
        id: start-time
        run: echo "start-time=$(date +%s)" >> "$GITHUB_OUTPUT"

      - name: Validate Workflows
        uses: ./.github/actions/lint-workflows

      - name: Calculate Stage Duration
        id: stage-end
        if: always()
        run: |
          end_time=$(date +%s)
          start_time="${{ steps.start-time.outputs.start-time }}"
          # Validate start_time is numeric
          if ! [[ "$start_time" =~ ^[0-9]+$ ]]; then
            echo "Invalid start time: $start_time"
            exit 1
          fi
          duration=$((end_time - start_time))
          echo "duration=$duration" >> "$GITHUB_OUTPUT"

      - name: Monitor Stage Performance
        if: always()
        uses: ./.github/actions/pipeline-monitoring
        with:
          stage-name: 'workflow-validation'
          stage-result: ${{ job.status }}
          stage-duration: ${{ steps.stage-end.outputs.duration }}
          collect-metrics: 'true'
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # Stage 2: Change Detection
  change-detection:
    name: Detect Changes
    runs-on: ubuntu-latest
    needs: workflow-validation
    if: always() && needs.workflow-validation.result != 'cancelled'
    outputs:
      containers-changed: ${{ steps.changes.outputs.containers-changed }}
      infra-changed: ${{ steps.changes.outputs.infrastructure-changed }}
      libs-changed: ${{ steps.changes.outputs.libs-changed }}
      all-containers: ${{ steps.changes.outputs.all-containers }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Detect Changes
        id: changes
        uses: ./.github/actions/detect-changes
        with:
          force-build-all: ${{ github.ref == 'refs/heads/main' && 'true' || 'false' }}

  # Stage 3: Test Matrix Generation for Parallel Testing
  test-matrix:
    name: Generate Test Matrix
    runs-on: ubuntu-latest
    needs: [change-detection]
    if: needs.change-detection.outputs.containers-changed != '' || needs.change-detection.outputs.libs-changed == 'true'
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
      containers-count: ${{ steps.generate.outputs.containers-count }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Generate Container Test Matrix
        id: generate
        uses: ./.github/actions/generate-test-matrix
        with:
          libs-changed: ${{ needs.change-detection.outputs.libs-changed }}
          all-containers: ${{ needs.change-detection.outputs.all-containers }}
          containers-changed: ${{ needs.change-detection.outputs.containers-changed }}

  # Stage 4: Quality Gates + Container Tests (Parallel Execution)

  # Container Tests - Run in parallel with quality checks
  container-tests:
    name: Test ${{ matrix.container }} (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    needs: [test-matrix, dependency-analysis]
    if: needs.test-matrix.outputs.matrix != '[]'
    strategy:
      matrix:
        container: ${{ fromJson(needs.test-matrix.outputs.matrix) }}
        test-type: [unit, integration]
        exclude:
          - container: collector-scheduler
            test-type: integration
          - container: markdown-generator
            test-type: integration
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Download Dependency Analysis Results
        uses: actions/download-artifact@v4
        with:
          name: security-results-dependencies
          path: security-results/
        continue-on-error: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Test Container
        uses: ./.github/actions/test-single-container
        with:
          container-name: ${{ matrix.container }}
          test-type: ${{ matrix.test-type }}
          upload-coverage: 'true'

  security-trivy:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.workflow-validation.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run Trivy Scan
        uses: ./.github/actions/security-trivy

  infrastructure-quality:
    name: Infrastructure Quality
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.workflow-validation.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run Infrastructure Quality Checks
        uses: ./.github/actions/infrastructure-quality
        with:
          infra-changed: ${{ needs.change-detection.outputs.infra-changed }}

  security-semgrep:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.workflow-validation.result == 'success' && (needs.change-detection.outputs.containers-changed != '' || needs.change-detection.outputs.libs-changed == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run Semgrep Scan
        uses: ./.github/actions/security-semgrep

  security-python:
    name: Python Security Scan
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.workflow-validation.result == 'success' && (needs.change-detection.outputs.containers-changed != '' || needs.change-detection.outputs.libs-changed == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run Python Security Scan
        uses: ./.github/actions/security-python

  security-sbom:
    name: SBOM Generation
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.workflow-validation.result == 'success' && (needs.change-detection.outputs.containers-changed != '' || needs.change-detection.outputs.libs-changed == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Generate SBOM
        uses: ./.github/actions/security-sbom

  security-checkov:
    name: Checkov Infrastructure Scan
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.change-detection.outputs.infra-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run Checkov Scan
        uses: ./.github/actions/security-checkov

  auto-fix-formatting:
    name: Auto-fix Code Formatting
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.workflow-validation.result == 'success' && github.event_name == 'pull_request' && (needs.change-detection.outputs.containers-changed != '' || needs.change-detection.outputs.libs-changed == 'true')
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
      - name: Auto-fix Code Formatting
        uses: ./.github/actions/auto-fix-formatting

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection, auto-fix-formatting]
    if: always() && !cancelled() && needs.workflow-validation.result == 'success' && (needs.change-detection.outputs.containers-changed != '' || needs.change-detection.outputs.libs-changed == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run Code Quality Checks
        uses: ./.github/actions/code-quality

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.workflow-validation.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Run Dependency Security Analysis
        uses: ./.github/actions/dependency-analysis

  cost-analysis:
    name: Cost Analysis
    runs-on: ubuntu-latest
    needs: [workflow-validation, change-detection]
    if: needs.workflow-validation.result == 'success' && needs.change-detection.outputs.infra-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Analyze Infrastructure Costs
        uses: ./.github/actions/cost-analysis
        with:
          infracost-api-key: ${{ secrets.INFRACOST_API_KEY }}
          comment-on-pr: ${{ github.event_name == 'pull_request' && 'true' || 'false' }}

  # Stage 5: Conditional Container Build & Registry Push
  container-test-summary:
    name: Container Test Summary
    runs-on: ubuntu-latest
    needs: [container-tests]
    if: always() && needs.container-tests.result != 'skipped'
    outputs:
      passed-containers: ${{ steps.summary.outputs.passed-containers }}
      failed-containers: ${{ steps.summary.outputs.failed-containers }}
      containers-to-build: ${{ steps.summary.outputs.containers-to-build }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Collect Test Results
        id: summary
        uses: ./.github/actions/collect-test-results
        with:
          test-jobs: ${{ toJson(needs.container-tests) }}

  build-and-push-containers:
    name: Build & Push ${{ matrix.container }}
    runs-on: ubuntu-latest
    needs: [container-test-summary, dependency-analysis]
    if: needs.container-test-summary.outputs.containers-to-build != '[]'
    strategy:
      matrix:
        container: ${{ fromJson(needs.container-test-summary.outputs.containers-to-build) }}
      fail-fast: false
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Download Dependency Analysis Results
        uses: actions/download-artifact@v4
        with:
          name: security-results-dependencies
          path: security-results/
        continue-on-error: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Container
        uses: ./.github/actions/build-and-push-container
        with:
          container-name: ${{ matrix.container }}
          registry: 'ghcr.io'
          repository: ${{ github.repository }}
          tag: ${{ github.sha }}
          enable-cache: 'true'
          dependency-results-path: 'security-results/'

  container-build-summary:
    name: Container Build Summary
    runs-on: ubuntu-latest
    needs: [build-and-push-containers, container-test-summary]
    if: always() && needs.build-and-push-containers.result != 'skipped'
    outputs:
      registry-images: ${{ steps.summary.outputs.registry-images }}
      build-summary: ${{ steps.summary.outputs.build-summary }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Collect Build Results
        id: summary
        uses: ./.github/actions/collect-build-summary
        with:
          build-jobs: ${{ toJson(needs.build-and-push-containers) }}
          registry: 'ghcr.io'
          commit-sha: ${{ github.sha }}

  # Stage 6: Build Report (Quality Gates + Test Results)
  build-report:
    name: Build Report
    runs-on: ubuntu-latest
    needs: [security-trivy, security-semgrep, security-python, security-sbom, security-checkov, auto-fix-formatting, code-quality, infrastructure-quality, dependency-analysis, cost-analysis, container-build-summary, container-tests, container-test-summary, build-and-push-containers]
    if: always() && !cancelled()
    outputs:
      build-passed: ${{ steps.report.outputs.build-passed }}
      quality-passed: ${{ steps.report.outputs.quality-passed }}
      tests-passed: ${{ steps.report.outputs.tests-passed }}
      summary: ${{ steps.report.outputs.summary }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Generate Build Report
        id: report
        uses: ./.github/actions/build-report
        with:
          security-trivy-result: ${{ needs.security-trivy.result }}
          security-semgrep-result: ${{ needs.security-semgrep.result }}
          security-python-result: ${{ needs.security-python.result }}
          security-sbom-result: ${{ needs.security-sbom.result }}
          security-checkov-result: ${{ needs.security-checkov.result }}
          auto-fix-formatting-result: ${{ needs.auto-fix-formatting.result }}
          code-quality-result: ${{ needs.code-quality.result }}
          infrastructure-result: ${{ needs.infrastructure-quality.result }}
          dependency-result: ${{ needs.dependency-analysis.result }}
          cost-analysis-result: ${{ needs.cost-analysis.result }}
          containers-to-test: ${{ needs.container-test-summary.outputs.containers-to-build }}
          containers-json: ${{ needs.container-test-summary.outputs.passed-containers }}
          container-tests-result: ${{ needs.container-tests.result }}
          container-build-result: ${{ needs.build-and-push-containers.result }}

  # Stage 7: Deployment (Production Only)
  deployment:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-report, cost-analysis, container-build-summary, build-and-push-containers]
    if: |
      github.ref == 'refs/heads/main' &&
      always() &&
      needs.build-report.outputs.build-passed == 'true' &&
      (needs.cost-analysis.result == 'success' || needs.cost-analysis.result == 'skipped') &&
      (needs.build-and-push-containers.result == 'success' || needs.build-and-push-containers.result == 'skipped')
    environment: production
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      - name: Smart Deploy to Azure
        id: deploy
        uses: ./.github/actions/smart-deploy
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          environment: production
          registry-images: ${{ needs.container-build-summary.outputs.registry-images }}
          terraform-storage-account: ${{ vars.TERRAFORM_STATE_STORAGE_ACCOUNT_PROD || 'aicontentfarmtfstate' }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # Stage 8: Post-Deployment Tests
  post-deployment:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: deployment
    if: needs.deployment.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Validate Deployment
        uses: ./.github/actions/post-deployment
        with:
          deployment-url: ${{ needs.deployment.outputs.deployment-url }}
