name: CI/CD Pipeline
on:
  push:
    branches: [main]

permissions:
  contents: read
  security-events: write
  pull-requests: write
  issues: write
  actions: read
  checks: write

jobs:
  # Workflow Validation - Fast fail if workflows are invalid
  workflow-validation:
    name: Validate Workflows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Workflows
        uses: ./.github/actions/lint-workflows

  # Quality Gate - Combined security and quality checks
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: workflow-validation
    outputs:
      security-passed: ${{ steps.security-check.outputs.passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Security Scan
        id: security-check
        uses: ./.github/actions/security-scan
        with:
          upload-sarif: 'true'

  # Cost Analysis
  cost-analysis:
    name: Cost Analysis
    runs-on: ubuntu-latest
    needs: quality-gate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Analyze Infrastructure Costs
        uses: ./.github/actions/cost-analysis
        with:
          infracost-api-key: ${{ secrets.INFRACOST_API_KEY }}
          comment-on-pr: 'false'

  # Dependency Analysis
  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    needs: quality-gate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Analyze Dependencies
        run: |
          echo "Analyzing dependencies..."
          if [ -f "scripts/dependency-analysis.sh" ]; then
            bash scripts/dependency-analysis.sh
          else
            echo "Dependency analysis script not found - using basic analysis"
          fi

  # Container Tests - Unit, Integration, and Smoke Tests
  container-tests:
    name: Container Tests
    runs-on: ubuntu-latest
    needs: quality-gate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Container Tests
        uses: ./.github/actions/container-tests
        with:
          test-type: 'all'
          fail-fast: 'true'
          upload-coverage: 'true'

  # AI Security Review
  ai-security-review:
    name: AI Security Review
    runs-on: ubuntu-latest
    needs: quality-gate
    if: always() && (needs.quality-gate.result == 'success' || needs.quality-gate.result == 'failure')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: AI Security Review
        uses: ./.github/actions/ai-review-security
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # Production Deployment
  production-deployment:
    name: Production Deployment
    runs-on: ubuntu-latest
    needs: [quality-gate, cost-analysis, dependency-analysis, container-tests, ai-security-review]
    environment: production
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        id: deploy
        run: |
          echo "Deploying to production..."
          echo "This would deploy using Azure credentials"
          echo "Deployment strategy: blue-green"
          # Add actual production deployment logic here
          echo "deployment-url=https://your-production-url.com" >> $GITHUB_OUTPUT

  # Post-Deployment Tests
  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: production-deployment
    if: needs.production-deployment.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Health Check
        run: |
          echo "Running post-deployment health checks..."
          deployment_url="${{ needs.production-deployment.outputs.deployment-url }}"
          if [ -n "$deployment_url" ]; then
            echo "Testing deployment at: $deployment_url"
            # Add actual health check logic here
            # curl -f "$deployment_url/health" || exit 1
            echo "Health check passed"
          else
            echo "No deployment URL available for testing"
            exit 1
          fi

      - name: Integration Tests
        run: |
          echo "Running post-deployment integration tests..."
          # Add actual integration test logic here
          echo "Integration tests passed"

      - name: Smoke Tests
        run: |
          echo "Running smoke tests against production..."
          # Add actual smoke test logic here
          echo "Smoke tests passed"
