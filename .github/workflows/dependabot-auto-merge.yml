name: Dependabot Auto-Merge

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

permissions:
  pull-requests: write
  contents: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if auto-merge label is present
        id: check-label
        run: |
          # Check if the PR has the auto-merge label
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'auto-merge') }}" == "true" ]]; then
            echo "auto_merge=true" >> "$GITHUB_OUTPUT"
          else
            echo "auto_merge=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check if PR only updates Python dependencies
        id: check-changes
        if: steps.check-label.outputs.auto_merge == 'true'
        run: |
          # Get the list of changed files
          gh api "repos/${{ github.repository }}/pulls/${{ github.event.number }}/files" \
            --jq '.[].filename' > changed_files.txt

          # Check if all changed files are Python dependency files
          PYTHON_DEPS_ONLY=true
          while IFS= read -r file; do
            if [[ ! "$file" =~ (requirements.*\.txt|setup\.py|pyproject\.toml|Pipfile|poetry\.lock)$ ]]; then
              echo "Non-dependency file changed: $file"
              PYTHON_DEPS_ONLY=false
              break
            fi
          done < changed_files.txt

          echo "python_deps_only=$PYTHON_DEPS_ONLY" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check PR title for version type
        id: check-version-type
        if: steps.check-label.outputs.auto_merge == 'true' && steps.check-changes.outputs.python_deps_only == 'true'
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          # Check if the PR title indicates patch or minor update
          if [[ "$PR_TITLE" =~ (patch|minor) ]] && [[ ! "$PR_TITLE" =~ major ]]; then
            echo "safe_version_update=true" >> "$GITHUB_OUTPUT"
          else
            echo "safe_version_update=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Wait for status checks
        id: wait-for-checks
        if: steps.check-label.outputs.auto_merge == 'true' && steps.check-changes.outputs.python_deps_only == 'true' && steps.check-version-type.outputs.safe_version_update == 'true'
        run: |
          # Wait up to 30 minutes for status checks to complete
          timeout 1800 bash -c "
            while true; do
              # Check if all required status checks have passed
              CHECKS_PASSED=\$(gh api repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/status \
                --jq '.state')

              # Also check check runs (for GitHub Actions)
              CHECK_RUNS_PASSED=\$(gh api repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/check-runs \
                --jq '.check_runs | map(select(.conclusion != \"success\" and .conclusion != \"neutral\" and .conclusion != null)) | length')

              echo \"Overall status: \$CHECKS_PASSED\"
              echo \"Failed check runs: \$CHECK_RUNS_PASSED\"

              if [[ \"\$CHECKS_PASSED\" == \"success\" && \"\$CHECK_RUNS_PASSED\" == \"0\" ]]; then
                echo \"All checks passed!\"
                echo \"checks_passed=true\" >> \$GITHUB_OUTPUT
                break
              elif [[ \"\$CHECKS_PASSED\" == \"failure\" || \"\$CHECK_RUNS_PASSED\" != \"0\" ]]; then
                echo \"Some checks failed, will not auto-merge\"
                echo \"checks_passed=false\" >> \$GITHUB_OUTPUT
                break
              else
                echo \"Waiting for checks to complete...\"
                sleep 30
              fi
            done
          " || echo "checks_passed=timeout" >> \$GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable auto-merge
        if: steps.check-label.outputs.auto_merge == 'true' && steps.check-changes.outputs.python_deps_only == 'true' && steps.check-version-type.outputs.safe_version_update == 'true' && steps.wait-for-checks.outputs.checks_passed == 'true'
        run: |
          # Enable auto-merge on the PR
          gh pr merge ${{ github.event.number }} --auto --squash
          echo "[PASS] Auto-merge enabled for Dependabot PR #${{ github.event.number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add comment explaining auto-merge decision
        if: steps.check-label.outputs.auto_merge == 'true'
        run: |
          if [[ "${{ steps.check-changes.outputs.python_deps_only }}" == "true" && "${{ steps.check-version-type.outputs.safe_version_update }}" == "true" && "${{ steps.wait-for-checks.outputs.checks_passed }}" == "true" ]]; then
            gh pr comment ${{ github.event.number }} --body "[AUTO-MERGE] **Auto-merge enabled** - This Dependabot PR updates only Python dependencies with patch/minor versions and all checks have passed."
          elif [[ "${{ steps.check-changes.outputs.python_deps_only }}" != "true" ]]; then
            gh pr comment ${{ github.event.number }} --body "[WARNING] **Auto-merge skipped** - This PR contains non-dependency file changes and requires manual review."
          elif [[ "${{ steps.check-version-type.outputs.safe_version_update }}" != "true" ]]; then
            gh pr comment ${{ github.event.number }} --body "[WARNING] **Auto-merge skipped** - This appears to be a major version update and requires manual review."
          elif [[ "${{ steps.wait-for-checks.outputs.checks_passed }}" != "true" ]]; then
            gh pr comment ${{ github.event.number }} --body "[FAIL] **Auto-merge skipped** - Some required checks have failed or timed out."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
