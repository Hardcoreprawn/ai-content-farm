{"version":"1.131.0","results":[{"check_id":"terraform.azure.security.storage.storage-allow-microsoft-service-bypass.storage-allow-microsoft-service-bypass","path":"/src/infra/main.tf","start":{"line":210,"col":1,"offset":6696},"end":{"line":235,"col":2,"offset":8223},"extra":{"message":"Some Microsoft services that interact with storage accounts operate from networks that can't be granted access through network rules. To help this type of service work as intended, allow the set of trusted Microsoft services to bypass the network rules","metadata":{"cwe":["CWE-1220: Insufficient Granularity of Access Control"],"category":"security","technology":["terraform","azure"],"references":["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#bypass","https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account_network_rules#bypass","https://docs.microsoft.com/en-us/azure/storage/common/storage-network-security#trusted-microsoft-services"],"owasp":["A05:2017 - Broken Access Control","A01:2021 - Broken Access Control"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/terraform.azure.security.storage.storage-allow-microsoft-service-bypass.storage-allow-microsoft-service-bypass","shortlink":"https://sg.run/WpX4"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"terraform.azure.security.storage.storage-queue-services-logging.storage-queue-services-logging","path":"/src/infra/main.tf","start":{"line":210,"col":1,"offset":6696},"end":{"line":235,"col":2,"offset":8223},"extra":{"message":"Storage Analytics logs detailed information about successful and failed requests to a storage service. This information can be used to monitor individual requests and to diagnose issues with a storage service. Requests are logged on a best-effort basis.","metadata":{"cwe":["CWE-778: Insufficient Logging"],"category":"security","technology":["terraform","azure"],"references":["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#logging","https://docs.microsoft.com/en-us/azure/storage/common/storage-analytics-logging?tabs=dotnet"],"owasp":["A10:2017 - Insufficient Logging & Monitoring","A09:2021 - Security Logging and Monitoring Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insufficient Logging"],"source":"https://semgrep.dev/r/terraform.azure.security.storage.storage-queue-services-logging.storage-queue-services-logging","shortlink":"https://sg.run/0yEv"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[{"code":3,"level":"warn","type":"Syntax error","message":"Syntax error at line /src/python-safety-results.json:1:\n missing element","path":"/src/python-safety-results.json"},{"code":3,"level":"warn","type":"Syntax error","message":"Syntax error at line /src/security-results/safety-collector-scheduler.json:1:\n missing element","path":"/src/security-results/safety-collector-scheduler.json"},{"code":3,"level":"warn","type":"Syntax error","message":"Syntax error at line /src/security-results/safety-content-collector.json:1:\n missing element","path":"/src/security-results/safety-content-collector.json"},{"code":3,"level":"warn","type":"Syntax error","message":"Syntax error at line /src/security-results/safety-content-enricher.json:1:\n missing element","path":"/src/security-results/safety-content-enricher.json"},{"code":3,"level":"warn","type":"Syntax error","message":"Syntax error at line /src/security-results/safety-content-generator.json:1:\n missing element","path":"/src/security-results/safety-content-generator.json"},{"code":3,"level":"warn","type":"Syntax error","message":"Syntax error at line /src/security-results/safety-content-processor.json:1:\n missing element","path":"/src/security-results/safety-content-processor.json"},{"code":3,"level":"warn","type":"Syntax error","message":"Syntax error at line /src/security-results/safety-content-ranker.json:1:\n missing element","path":"/src/security-results/safety-content-ranker.json"},{"code":3,"level":"warn","type":"Syntax error","message":"Syntax error at line /src/security-results/safety-markdown-generator.json:1:\n missing element","path":"/src/security-results/safety-markdown-generator.json"},{"code":3,"level":"warn","type":"Syntax error","message":"Syntax error at line /src/security-results/safety-site-generator.json:1:\n missing element","path":"/src/security-results/safety-site-generator.json"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"yaml.github-actions.security.curl-eval.curl-eval","message":"Internal matching error when running yaml.github-actions.security.curl-eval.curl-eval on /src/.github/actions/ai-review-cost/action.yml:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nrule yaml.github-actions.security.curl-eval.curl-eval: metavariable-pattern failed when parsing $SHELL's content as Bash: echo \"R`TE Generating cost optimization report...\"\n\ncd ai-reviews/cost\n\n# Create markdown report\ncat > cost-review.md << EOF\n# R`Sq AI Cost Optimization Review Report\n\n**Analysis Date**: $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\n**Cost Score**: $([ -f \"cost-analysis-ai.json\" ] && jq -r '.cost_score // \"N/A\"' cost-analysis-ai.json || echo \"N/A\")/10\n**Optimization Level**: $([ -f \"cost-analysis-ai.json\" ] && jq -r '.optimization_level // \"UNKNOWN\"' cost-analysis-ai.json || echo \"UNKNOWN\")\n**Savings Potential**: $([ -f \"cost-analysis-ai.json\" ] && jq -r '.total_savings_potential // \"Review needed\"' cost-analysis-ai.json || echo \"Review needed\")\n\n## High-Impact Cost Savings Opportunities\n$([ -f \"cost-analysis-ai.json\" ] && jq -r '.high_impact_savings[]? | \"### \\(.title)\\n**Description**: \\(.description)\\n**Implementation**: \\(.implementation)\\n**Estimated Savings**: \\(.estimated_savings)\\n**Effort**: \\(.effort)\\n\"' cost-analysis-ai.json || echo \"None identified\")\n\n## Medium-Impact Optimizations\n$([ -f \"cost-analysis-ai.json\" ] && jq -r '.medium_impact_optimizations[]? | \"- **\\(.title)**: \\(.description) (Savings: \\(.estimated_savings))\"' cost-analysis-ai.json || echo \"None identified\")\n\n## Cost Monitoring Recommendations\n$([ -f \"cost-analysis-ai.json\" ] && jq -r '.monitoring_recommendations[]? | \"- \\(.)\"' cost-analysis-ai.json || echo \"Manual review recommended\")\n\n## Summary\n$([ -f \"cost-analysis-ai.json\" ] && jq -r '.summary // \"Cost optimization analysis completed\"' cost-analysis-ai.json || echo \"Cost optimization analysis completed\")\n\n---\n*Generated by AI Cost Optimization Assistant*\nEOF\n","path":"/src/.github/actions/ai-review-cost/action.yml"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"yaml.github-actions.security.curl-eval.curl-eval","message":"Internal matching error when running yaml.github-actions.security.curl-eval.curl-eval on /src/.github/workflows/cicd-pipeline.yml:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nrule yaml.github-actions.security.curl-eval.curl-eval: metavariable-pattern failed when parsing $SHELL's content as Bash: echo \"R`TK Aggregating test results from all containers...\"\n\ntotal_jobs=\"${{ strategy.job-total }}\"\nfailed_jobs=0\n\n# Count successful vs failed matrix jobs\nif [ \"${{ needs.container-tests.result }}\" = \"failure\" ]; then\n  echo \"D^M Some container tests failed\"\n  failed_jobs=1\nfi\n\n{\n  echo \"## Container Test Summary\"\n  echo \"- **Total Matrix Jobs**: ${total_jobs}\"\n  echo \"- **Failed Jobs**: ${failed_jobs}\"\n  echo \"- **Success Rate**: $(( (total_jobs - failed_jobs) * 100 / total_jobs ))%\"\n  echo \"\"\n  echo \"### Test Artifacts Generated:\"\n  find test-results/ -name \"*.xml\" | sort\n} >> \"$GITHUB_STEP_SUMMARY\"\n\n# Exit with error if any tests failed\nif [ \"$failed_jobs\" -gt 0 ]; then\n  echo \"Container tests failed - see individual job logs for details\"\n  exit 1\nfi\n","path":"/src/.github/workflows/cicd-pipeline.yml"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"yaml.github-actions.security.curl-eval.curl-eval","message":"Internal matching error when running yaml.github-actions.security.curl-eval.curl-eval on /src/.github/workflows/cicd-pipeline.yml:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nrule yaml.github-actions.security.curl-eval.curl-eval: metavariable-pattern failed when parsing $SHELL's content as Bash: echo \"R`TK Evaluating quality gate results...\"\n\n# Check if any quality gate jobs failed\nif [ \"${{ needs.quality-gate.result }}\" = \"failure\" ]; then\n  echo \"D^M Quality gate failed - see individual check results\"\n  echo \"passed=false\" >> \"$GITHUB_OUTPUT\"\n\n  {\n    echo \"## Quality Gate Summary\"\n    echo \"D^M **Status**: FAILED\"\n    echo \"Some quality checks did not pass. Review the individual check results above.\"\n  } >> \"$GITHUB_STEP_SUMMARY\"\n  exit 1\nelse\n  echo \"D]F Quality gate passed - all checks successful\"\n  echo \"passed=true\" >> \"$GITHUB_OUTPUT\"\n\n  {\n    echo \"## Quality Gate Summary\"\n    echo \"D]F **Status**: PASSED\"\n    echo \"All quality checks completed successfully!\"\n  } >> \"$GITHUB_STEP_SUMMARY\"\nfi\n","path":"/src/.github/workflows/cicd-pipeline.yml"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"yaml.github-actions.security.curl-eval.curl-eval","message":"Internal matching error when running yaml.github-actions.security.curl-eval.curl-eval on /src/.github/actions/container-tests/action.yml:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nrule yaml.github-actions.security.curl-eval.curl-eval: metavariable-pattern failed when parsing $SHELL's content as Bash: echo \"R`Te Test results summary:\"\n\n# Create simple test summary without heredoc to avoid YAML issues\necho \"# Container Test Results\" > test-summary.md\necho \"\" >> test-summary.md\necho \"Test Type: ${INPUT_TEST_TYPE}\" >> test-summary.md\necho \"Fail Fast: ${INPUT_FAIL_FAST}\" >> test-summary.md\necho \"\" >> test-summary.md\n\n# Add results for each test type\nif [ \"${INPUT_TEST_TYPE}\" = \"unit\" ] || [ \"${INPUT_TEST_TYPE}\" = \"all\" ]; then\n  echo \"Unit Tests: \\$([ \\\"\\${unit_exit_code:-0}\\\" -eq 0 ] && echo \\\"PASSED\\\" || echo \\\"FAILED\\\")\" >> test-summary.md\nfi\n\nif [ \"${INPUT_TEST_TYPE}\" = \"integration\" ] || [ \"${INPUT_TEST_TYPE}\" = \"all\" ]; then\n  echo \"Integration Tests: \\$([ \\\"\\${integration_exit_code:-0}\\\" -eq 0 ] && echo \\\"PASSED\\\" || echo \\\"FAILED\\\")\" >> test-summary.md\nfi\n\nif [ \"${INPUT_TEST_TYPE}\" = \"smoke\" ] || [ \"${INPUT_TEST_TYPE}\" = \"all\" ]; then\n  echo \"Smoke Tests: \\$([ \\\"\\${smoke_exit_code:-0}\\\" -eq 0 ] && echo \\\"PASSED\\\" || echo \\\"FAILED\\\")\" >> test-summary.md\nfi\n\necho \"\" >> test-summary.md\necho \"Generated at: \\$(date -u)\" >> test-summary.md\n\ncat test-summary.md\n","path":"/src/.github/actions/container-tests/action.yml"},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-cost/action.yml","start":{"line":35,"col":18,"offset":996},"end":{"line":57,"col":4,"offset":1937}}]],"message":"Syntax error at line /src/.github/actions/ai-review-cost/action.yml:35:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Sq Preparing cost review context...\"\nmkdir -p ai-reviews/cost\n\n# Collect cost-relevant file changes\nif [ \"${GITHUB_EVENT_NAME}\" = \"pull_request\" ]; then\n  echo \"Collecting infrastructure changes for cost review...\"\n\n  # Get infrastructure and config changes\n  git diff --name-only origin/${GITHUB_BASE_REF}...HEAD \\\n    | grep -E '\\.(tf|tfvars|yml|yaml|json)$|docker|infra|config' \\\n    > ai-reviews/cost/changed-files.txt || true\n\n  # Extract infrastructure changes\n  git diff origin/${GITHUB_BASE_REF}...HEAD \\\n    --unified=10 \\\n    -- '*.tf' '*.tfvars' '*.yml' '*.yaml' 'docker-compose*' 'Dockerfile*' \\\n    > ai-reviews/cost/infrastructure-changes.diff\nelse\n  echo \"Collecting full infrastructure for cost review...\"\n  find . -type f \\( -name \"*.tf\" -o -name \"*.tfvars\" -o -name \"*.yml\" -o -name \"*.yaml\" -o -name \"docker-compose*\" -o -name \"Dockerfile*\" \\) \\\n    -not -path \"./.git/*\" \\\n    > ai-reviews/cost/all-infra-files.txt\nfi\n` was unexpected","path":"/src/.github/actions/ai-review-cost/action.yml","spans":[{"file":"/src/.github/actions/ai-review-cost/action.yml","start":{"line":35,"col":18,"offset":996},"end":{"line":57,"col":4,"offset":1937}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-cost/action.yml","start":{"line":67,"col":18,"offset":2367},"end":{"line":106,"col":5,"offset":3779}}]],"message":"Syntax error at line /src/.github/actions/ai-review-cost/action.yml:67:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TK Collecting cost analysis results for AI review...\"\n\n# Collect cost artifacts if they exist\nif [ -d \"cost-analysis\" ]; then\n  cp -r cost-analysis/* ai-reviews/cost/ 2>/dev/null || true\nfi\n\n# Collect usage estimates\nif [ -f \"infra/usage-estimates.yml\" ]; then\n  cp infra/usage-estimates.yml ai-reviews/cost/\nfi\n\n# Create cost context summary\ncat > ai-reviews/cost/context.md << EOF\n# Cost Review Context\n\n**Review Type**: ${GITHUB_EVENT_NAME}\n**Repository**: ${GITHUB_REPOSITORY}\n**Branch**: ${GITHUB_REF}\n**Commit**: ${GITHUB_SHA}\n**Date**: $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\n\n## Available Cost Data\n- Infracost analysis: $([ -f \"ai-reviews/cost/current.json\" ] && echo \"Available\" || echo \"Not available\")\n- Cost diff: $([ -f \"ai-reviews/cost/diff.json\" ] && echo \"Available\" || echo \"Not available\")\n- Usage estimates: $([ -f \"ai-reviews/cost/usage-estimates.yml\" ] && echo \"Available\" || echo \"Not available\")\n- Infrastructure changes: $([ -f \"ai-reviews/cost/infrastructure-changes.diff\" ] && echo \"Available\" || echo \"Full infrastructure review\")\n\n## Focus Areas for Cost Review\n1. Resource rightsizing (CPU, memory, storage)\n2. Auto-scaling configuration\n3. Reserved vs on-demand pricing\n4. Storage optimization\n5. Network costs\n6. Redundancy vs cost balance\n7. Environment-specific sizing\n8. Cost monitoring and alerting\n9. Serverless vs container cost efficiency\n10. Data transfer optimization\nEOF\n` was unexpected","path":"/src/.github/actions/ai-review-cost/action.yml","spans":[{"file":"/src/.github/actions/ai-review-cost/action.yml","start":{"line":67,"col":18,"offset":2367},"end":{"line":106,"col":5,"offset":3779}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-cost/action.yml","start":{"line":114,"col":18,"offset":4200},"end":{"line":355,"col":4,"offset":12695}}]],"message":"Syntax error at line /src/.github/actions/ai-review-cost/action.yml:114:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`eW Checking AI cost review configuration...\"\n\n# Check if OpenAI API key is provided\nif [ -z \"${OPENAI_API_KEY}\" ]; then\n  echo \"OpenAI API key not provided - AI review disabled\"\n  echo \"Using Copilot PR reviews instead for AI-powered analysis\"\n\n  # Create placeholder results\n  mkdir -p ai-reviews/cost\n  cat > ai-reviews/cost/cost-analysis-ai.json << EOF\n{\n  \"cost_score\": 5,\n  \"optimization_level\": \"FAIR\",\n  \"high_impact_savings\": [],\n  \"medium_impact_optimizations\": [],\n  \"monitoring_recommendations\": [\"Use GitHub Copilot PR reviews for AI-powered cost analysis\"],\n  \"total_savings_potential\": \"Use Copilot for analysis\",\n  \"summary\": \"AI cost review disabled - using Copilot PR reviews for AI analysis\"\n}\nEOF\n\n  echo \"cost-score=5\" >> $GITHUB_OUTPUT\n  echo \"savings-potential=Use Copilot for analysis\" >> $GITHUB_OUTPUT\n  exit 0\nfi\n\n# Create Python script for AI cost analysis\ncat > ai-reviews/cost/cost_review.py << 'EOF'\nimport os\nimport json\nimport requests\nimport sys\nimport yaml\nfrom datetime import datetime\n\ndef read_file_safe(filepath):\n    \"\"\"Safely read file content with encoding handling\"\"\"\n    try:\n        with open(filepath, 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        return f\"Error reading {filepath}: {str(e)}\"\n\ndef read_json_safe(filepath):\n    \"\"\"Safely read JSON file\"\"\"\n    try:\n        with open(filepath, 'r') as f:\n            return json.load(f)\n    except Exception as e:\n        return {\"error\": f\"Could not read {filepath}: {str(e)}\"}\n\ndef analyze_cost_optimization(changes_content, cost_data, context):\n    \"\"\"Perform AI cost optimization analysis\"\"\"\n\n    system_prompt = \"\"\"You are a senior cloud cost optimization engineer.\n    Analyze the provided infrastructure changes, cost data, and context to identify cost optimization opportunities.\n\n    Focus on:\n    1. Resource rightsizing opportunities\n    2. Auto-scaling configuration optimizat... (truncated 6580 more characters)","path":"/src/.github/actions/ai-review-cost/action.yml","spans":[{"file":"/src/.github/actions/ai-review-cost/action.yml","start":{"line":114,"col":18,"offset":4200},"end":{"line":355,"col":4,"offset":12695}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":67,"col":18,"offset":2468},"end":{"line":136,"col":5,"offset":5170}}]],"message":"Syntax error at line /src/.github/actions/ai-review-operations/action.yml:67:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TK Collecting operational metrics and configurations...\"\n\n# Collect available operational data\nif [ -d \"security-results\" ]; then\n  cp -r security-results/* ai-reviews/operations/ 2>/dev/null || true\nfi\n\nif [ -d \"cost-analysis\" ]; then\n  cp -r cost-analysis/* ai-reviews/operations/ 2>/dev/null || true\nfi\n\n# Analyze project structure for ops readiness\ncat > ai-reviews/operations/project-analysis.txt << EOF\n# Project Structure Analysis\n\n## Container Configuration\nDocker Compose Files: $(find . -name \"docker-compose*.yml\" -o -name \"docker-compose*.yaml\" | wc -l)\nDockerfiles: $(find . -name \"Dockerfile*\" | wc -l)\n\n## Infrastructure as Code\nTerraform Files: $(find . -name \"*.tf\" | wc -l)\nEnvironment Configs: $(find . -name \"*.tfvars\" | wc -l)\n\n## CI/CD Configuration\nGitHub Actions: $(find .github/workflows -name \"*.yml\" -o -name \"*.yaml\" 2>/dev/null | wc -l)\nScripts: $(find scripts -name \"*.sh\" 2>/dev/null | wc -l)\n\n## Documentation\nREADME Files: $(find . -name \"README*\" | wc -l)\nDocs Directory: $([ -d \"docs\" ] && echo \"Present\" || echo \"Missing\")\n\n## Monitoring/Observability\nLogging Config: $(grep -r \"logging\\|log\" . --include=\"*.yml\" --include=\"*.yaml\" --include=\"*.json\" 2>/dev/null | wc -l)\nHealth Checks: $(grep -r \"health\\|readiness\\|liveness\" . --include=\"*.yml\" --include=\"*.yaml\" --include=\"*.json\" 2>/dev/null | wc -l)\n\n## Testing\nTest Files: $(find . -name \"*test*\" -type f | wc -l)\nTest Configs: $(find . -name \"pytest.ini\" -o -name \"conftest.py\" -o -name \"jest.config*\" | wc -l)\nEOF\n\n# Create operations context summary\ncat > ai-reviews/operations/context.md << EOF\n# Operations Review Context\n\n**Review Type**: ${GITHUB_EVENT_NAME}\n**Repository**: ${GITHUB_REPOSITORY}\n**Branch**: ${GITHUB_REF}\n**Commit**: ${GITHUB_SHA}\n**Date**: $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\n\n## Available Operations Data\n- Infrastructure changes: $([ -f \"ai-reviews/operations/operational-changes.diff\" ] && echo \"Available\" ... (truncated 787 more characters)","path":"/src/.github/actions/ai-review-operations/action.yml","spans":[{"file":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":67,"col":18,"offset":2468},"end":{"line":136,"col":5,"offset":5170}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":144,"col":18,"offset":5781},"end":{"line":382,"col":4,"offset":14260}}]],"message":"Syntax error at line /src/.github/actions/ai-review-operations/action.yml:144:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`eW Checking AI operations review configuration...\"\n\n# Check if OpenAI API key is provided\nif [ -z \"${OPENAI_API_KEY}\" ]; then\n  echo \"OpenAI API key not provided - AI review disabled\"\n  echo \"Using Copilot PR reviews instead for AI-powered analysis\"\n\n  # Create placeholder results\n  mkdir -p ai-reviews/operations\n  cat > ai-reviews/operations/operations-analysis.json << EOF\n{\n  \"ops_score\": 5,\n  \"reliability_score\": 5,\n  \"readiness_level\": \"BASIC\",\n  \"critical_issues\": [],\n  \"improvements\": [],\n  \"best_practices\": [\"Use GitHub Copilot PR reviews for AI-powered operations analysis\"],\n  \"monitoring_gaps\": [\"Use Copilot for analysis\"],\n  \"documentation_needs\": [\"Use Copilot for analysis\"],\n  \"summary\": \"AI operations review disabled - using Copilot PR reviews for AI analysis\"\n}\nEOF\n\n  echo \"ops-score=5\" >> $GITHUB_OUTPUT\n  echo \"reliability-score=5\" >> $GITHUB_OUTPUT\n  exit 0\nfi\n\n# Create Python script for AI operations analysis\ncat > ai-reviews/operations/operations_review.py << 'EOF'\nimport os\nimport json\nimport requests\nimport sys\nfrom datetime import datetime\n\ndef read_file_safe(filepath):\n    \"\"\"Safely read file content with encoding handling\"\"\"\n    try:\n        with open(filepath, 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        return f\"Error reading {filepath}: {str(e)}\"\n\ndef analyze_operations_readiness(changes_content, project_analysis, context):\n    \"\"\"Perform AI operations readiness analysis\"\"\"\n\n    system_prompt = \"\"\"You are a senior DevOps/SRE engineer conducting an operations readiness review.\n    Analyze the provided configuration changes, project structure, and context to assess operational readiness and reliability.\n\n    Focus on:\n    1. Deployment automation and reliability\n    2. Monitoring, logging, and observability\n    3. Backup and disaster recovery planning\n    4. Auto-scaling and performance optimization\n    5. Configuration manag... (truncated 6564 more characters)","path":"/src/.github/actions/ai-review-operations/action.yml","spans":[{"file":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":144,"col":18,"offset":5781},"end":{"line":382,"col":4,"offset":14260}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":387,"col":18,"offset":16024},"end":{"line":420,"col":5,"offset":17964}}]],"message":"Syntax error at line /src/.github/actions/ai-review-operations/action.yml:387:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TE Generating operations readiness report...\"\n\ncd ai-reviews/operations\n\n# Create markdown report\ncat > operations-review.md << EOF\n# AI Operations Review Report\n\n**Analysis Date**: $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\n**Operations Score**: $([ -f \"operations-analysis.json\" ] && jq -r '.ops_score // \"N/A\"' operations-analysis.json || echo \"N/A\")/10\n**Reliability Score**: $([ -f \"operations-analysis.json\" ] && jq -r '.reliability_score // \"N/A\"' operations-analysis.json || echo \"N/A\")/10\n**Readiness Level**: $([ -f \"operations-analysis.json\" ] && jq -r '.readiness_level // \"UNKNOWN\"' operations-analysis.json || echo \"UNKNOWN\")\n\n## Critical Operational Issues\n$([ -f \"operations-analysis.json\" ] && jq -r '.critical_issues[]? | \"### \\(.title)\\n**Description**: \\(.description)\\n**Impact**: \\(.impact)\\n**Location**: \\(.location)\\n**Recommendation**: \\(.recommendation)\\n\"' operations-analysis.json || echo \"None identified\")\n\n## Operational Improvements\n$([ -f \"operations-analysis.json\" ] && jq -r '.improvements[]? | \"### \\(.title) (Priority: \\(.priority))\\n**Description**: \\(.description)\\n**Benefit**: \\(.benefit)\\n**Implementation**: \\(.implementation)\\n\"' operations-analysis.json || echo \"None identified\")\n\n## Monitoring Gaps\n$([ -f \"operations-analysis.json\" ] && jq -r '.monitoring_gaps[]? | \"- \\(.)\"' operations-analysis.json || echo \"Analysis needed\")\n\n## Documentation Needs\n$([ -f \"operations-analysis.json\" ] && jq -r '.documentation_needs[]? | \"- \\(.)\"' operations-analysis.json || echo \"Review needed\")\n\n## Best Practices Recommendations\n$([ -f \"operations-analysis.json\" ] && jq -r '.best_practices[]? | \"- \\(.)\"' operations-analysis.json || echo \"Manual review recommended\")\n\n## Summary\n$([ -f \"operations-analysis.json\" ] && jq -r '.summary // \"Operations readiness analysis completed\"' operations-analysis.json || echo \"Operations readiness analysis completed\")\n\n---\n*Generated by AI Operations Assist... (truncated 25 more characters)","path":"/src/.github/actions/ai-review-operations/action.yml","spans":[{"file":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":387,"col":18,"offset":16024},"end":{"line":420,"col":5,"offset":17964}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-security/action.yml","start":{"line":127,"col":18,"offset":4185},"end":{"line":345,"col":4,"offset":11683}}]],"message":"Syntax error at line /src/.github/actions/ai-review-security/action.yml:127:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`eW Checking AI security review configuration...\"\n\n# Check if OpenAI API key is provided\nif [ -z \"${OPENAI_API_KEY}\" ]; then\n  echo \"OpenAI API key not provided - AI review disabled\"\n  echo \"Using Copilot PR reviews instead for AI-powered analysis\"\n\n  # Create placeholder results\n  mkdir -p ai-reviews/security\n  cat > ai-reviews/security/security-analysis.json << EOF\n{\n  \"security_score\": 5,\n  \"risk_level\": \"MEDIUM\",\n  \"critical_findings\": [],\n  \"medium_findings\": [],\n  \"best_practices\": [\"Use GitHub Copilot PR reviews for AI-powered security analysis\"],\n  \"summary\": \"AI security review disabled - using Copilot PR reviews for AI analysis\"\n}\nEOF\n\n  echo \"security-score=5\" >> $GITHUB_OUTPUT\n  echo \"recommendations={\\\"summary\\\": \\\"AI review disabled - using Copilot PR reviews\\\"}\" >> $GITHUB_OUTPUT\n  exit 0\nfi\n\n# Create Python script for AI analysis\ncat > ai-reviews/security/security_review.py << 'EOF'\nimport os\nimport json\nimport requests\nimport sys\nfrom datetime import datetime\n\ndef read_file_safe(filepath):\n    \"\"\"Safely read file content with encoding handling\"\"\"\n    try:\n        with open(filepath, 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        return f\"Error reading {filepath}: {str(e)}\"\n\ndef analyze_security(changes_content, scan_results, context):\n    \"\"\"Perform AI security analysis\"\"\"\n\n    system_prompt = \"\"\"You are a senior security engineer conducting a comprehensive security review.\n    Analyze the provided code changes, security scan results, and context to identify security risks and provide actionable recommendations.\n\n    Focus on:\n    1. Authentication/Authorization flaws\n    2. Input validation issues\n    3. Cryptographic weaknesses\n    4. Infrastructure misconfigurations\n    5. Dependency vulnerabilities\n    6. Secrets exposure\n    7. API security issues\n    8. Container security concerns\n\n    Provide:\n    1. A security risk score (1-10,... (truncated 5583 more characters)","path":"/src/.github/actions/ai-review-security/action.yml","spans":[{"file":"/src/.github/actions/ai-review-security/action.yml","start":{"line":127,"col":18,"offset":4185},"end":{"line":345,"col":4,"offset":11683}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-security/action.yml","start":{"line":350,"col":18,"offset":13277},"end":{"line":395,"col":5,"offset":14795}}]],"message":"Syntax error at line /src/.github/actions/ai-review-security/action.yml:350:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TE Generating security review report...\"\n\ncd ai-reviews/security\n\n# Create markdown report\nreport_timestamp=\"$(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\"\n\n# Extract security data\nif [ -f \"security-analysis.json\" ]; then\n  security_score=\"$(jq -r '.security_score // \"N/A\"' security-analysis.json)\"\n  risk_level=\"$(jq -r '.risk_level // \"UNKNOWN\"' security-analysis.json)\"\n  critical_findings=\"$(jq -r '.critical_findings[]? | \"- **\\(.title)**: \\(.description) (Location: \\(.location))\"' security-analysis.json)\" || critical_findings=\"None identified\"\n  medium_findings=\"$(jq -r '.medium_findings[]? | \"- **\\(.title)**: \\(.description) (Location: \\(.location))\"' security-analysis.json)\" || medium_findings=\"None identified\"\n  best_practices=\"$(jq -r '.best_practices[]? | \"- \\(.)\"' security-analysis.json)\" || best_practices=\"Manual review recommended\"\n  summary=\"$(jq -r '.summary // \"Security analysis completed\"' security-analysis.json)\"\nelse\n  security_score=\"N/A\"\n  risk_level=\"UNKNOWN\"\n  critical_findings=\"None identified\"\n  medium_findings=\"None identified\"\n  best_practices=\"Manual review recommended\"\n  summary=\"Security analysis completed\"\nfi\n\ncat > security-review.md << EOF\n# AI Security Review Report\n\n**Analysis Date**: $report_timestamp\n**Security Score**: $security_score\n**Risk Level**: $risk_level\n\n## Critical Findings\n$critical_findings\n\n## Medium Priority Findings\n$medium_findings\n\n## Security Recommendations\n$best_practices\n\n## Summary\n$summary\n\n---\n*Generated by AI Security Review Assistant*\nEOF\n` was unexpected","path":"/src/.github/actions/ai-review-security/action.yml","spans":[{"file":"/src/.github/actions/ai-review-security/action.yml","start":{"line":350,"col":18,"offset":13277},"end":{"line":395,"col":5,"offset":14795}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":78,"col":18,"offset":2670},"end":{"line":99,"col":52,"offset":3370}}]],"message":"Syntax error at line /src/.github/actions/cleanup-ephemeral/action.yml:78:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`UQ Logging into Azure...\"\n\n# Parse Azure credentials\nCLIENT_ID=$(echo $AZURE_CREDENTIALS | jq -r '.clientId')\nCLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r '.clientSecret')\nSUBSCRIPTION_ID=$(echo $AZURE_CREDENTIALS | jq -r '.subscriptionId')\nTENANT_ID=$(echo $AZURE_CREDENTIALS | jq -r '.tenantId')\n\n# Login to Azure\ndocker run --rm \\\n  -v \"${WORKSPACE_PATH}\":/workspace \\\n  mcr.microsoft.com/azure-cli:latest \\\n  az login --service-principal \\\n  --username \"$CLIENT_ID\" \\\n  --password \"$CLIENT_SECRET\" \\\n  --tenant \"$TENANT_ID\"\n\n# Set subscription\ndocker run --rm \\\n  -v \"${WORKSPACE_PATH}\":/workspace \\\n  mcr.microsoft.com/azure-cli:latest \\\n  az account set --subscription \"$SUBSCRIPTION_ID\"\n` was unexpected","path":"/src/.github/actions/cleanup-ephemeral/action.yml","spans":[{"file":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":78,"col":18,"offset":2670},"end":{"line":99,"col":52,"offset":3370}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":145,"col":18,"offset":5090},"end":{"line":170,"col":56,"offset":5964}}]],"message":"Syntax error at line /src/.github/actions/cleanup-ephemeral/action.yml:145:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TK Inventorying resources before cleanup...\"\n\ntotal_resources=0\n\nwhile IFS= read -r rg_name; do\n  if [ -n \"$rg_name\" ]; then\n    echo \"Inventorying resources in: $rg_name\"\n\n    # List resources in the resource group\n    docker run --rm \\\n      mcr.microsoft.com/azure-cli:latest \\\n      az resource list \\\n      --resource-group \"$rg_name\" \\\n      --output table > \"cleanup-logs/resources-${rg_name}.txt\" 2>/dev/null || true\n\n    # Count resources\n    if [ -f \"cleanup-logs/resources-${rg_name}.txt\" ]; then\n      resource_count=$(tail -n +3 \"cleanup-logs/resources-${rg_name}.txt\" | wc -l)\n      total_resources=$((total_resources + resource_count))\n      echo \"Found $resource_count resources in $rg_name\"\n    fi\n  fi\ndone < cleanup-logs/resource-groups.txt\n\necho \"TOTAL_RESOURCES=$total_resources\" >> $GITHUB_ENV\necho \"Total resources to be deleted: $total_resources\"\n` was unexpected","path":"/src/.github/actions/cleanup-ephemeral/action.yml","spans":[{"file":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":145,"col":18,"offset":5090},"end":{"line":170,"col":56,"offset":5964}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":180,"col":18,"offset":6399},"end":{"line":262,"col":5,"offset":8962}}]],"message":"Syntax error at line /src/.github/actions/cleanup-ephemeral/action.yml:180:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`hz Starting cleanup of ephemeral resources...\"\n\ncleaned_up=false\nresources_deleted=0\ncleanup_errors=0\n\nwhile IFS= read -r rg_name; do\n  if [ -n \"$rg_name\" ]; then\n    echo \"Cleaning up resource group: $rg_name\"\n\n    # Check if resource group exists\n    if docker run --rm \\\n      mcr.microsoft.com/azure-cli:latest \\\n      az group show --name \"$rg_name\" --output none 2>/dev/null; then\n\n      echo \"Deleting resource group: $rg_name\"\n\n      # Delete the resource group and all its resources\n      if docker run --rm \\\n        mcr.microsoft.com/azure-cli:latest \\\n        az group delete \\\n        --name \"$rg_name\" \\\n        --yes \\\n        --no-wait; then\n\n        echo \"Initiated deletion of resource group: $rg_name\"\n        cleaned_up=true\n\n        # Count resources from inventory\n        if [ -f \"cleanup-logs/resources-${rg_name}.txt\" ]; then\n          rg_resources=$(tail -n +3 \"cleanup-logs/resources-${rg_name}.txt\" | wc -l)\n          resources_deleted=$((resources_deleted + rg_resources))\n        fi\n\n      else\n        echo \"Failed to delete resource group: $rg_name\"\n        cleanup_errors=$((cleanup_errors + 1))\n      fi\n    else\n      echo \"Resource group not found: $rg_name\"\n    fi\n  fi\ndone < cleanup-logs/resource-groups.txt\n\n# Handle case where no resource groups were found\nif [ ! -s cleanup-logs/resource-groups.txt ]; then\n  echo \"No resource groups found to cleanup\"\n\n  if [ \"${INPUT_FORCE_CLEANUP}\" = \"true\" ]; then\n    echo \"Force cleanup enabled, marking as cleaned up\"\n    cleaned_up=true\n  fi\nfi\n\necho \"Cleanup Summary:\"\necho \"- Cleaned up: $cleaned_up\"\necho \"- Resources deleted: $resources_deleted\"\necho \"- Cleanup errors: $cleanup_errors\"\n\necho \"cleaned-up=$cleaned_up\" >> $GITHUB_OUTPUT\necho \"resources-deleted=$resources_deleted\" >> $GITHUB_OUTPUT\n\n# Create cleanup summary\ncat > cleanup-logs/summary.md << EOF\n# Cleanup Summary\n\n**Date**: $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\n**PR**: #${GITH... (truncated 648 more characters)","path":"/src/.github/actions/cleanup-ephemeral/action.yml","spans":[{"file":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":180,"col":18,"offset":6399},"end":{"line":262,"col":5,"offset":8962}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/container-tests/action.yml","start":{"line":30,"col":18,"offset":784},"end":{"line":32,"col":59,"offset":923}}]],"message":"Syntax error at line /src/.github/actions/container-tests/action.yml:30:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`QN Setting up Python test environment...\"\npython -m pip install --upgrade pip\npip install pytest pytest-cov pytest-asyncio pytest-xdist\n` was unexpected","path":"/src/.github/actions/container-tests/action.yml","spans":[{"file":"/src/.github/actions/container-tests/action.yml","start":{"line":30,"col":18,"offset":784},"end":{"line":32,"col":59,"offset":923}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/container-tests/action.yml","start":{"line":37,"col":18,"offset":1027},"end":{"line":56,"col":22,"offset":1719}}]],"message":"Syntax error at line /src/.github/actions/container-tests/action.yml:37:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Tg Installing container dependencies...\"\n\n# Install each container's dependencies\nfor container in content-collector content-processor content-ranker content-enricher content-generator site-generator markdown-generator collector-scheduler; do\n  if [ -f \"containers/$container/requirements.txt\" ]; then\n    echo \"Installing dependencies for $container...\"\n    pip install -r containers/$container/requirements.txt\n  else\n    echo \"No requirements.txt found for $container\"\n  fi\ndone\n\n# Install shared libs\nif [ -f \"libs/requirements.txt\" ]; then\n  echo \"Installing shared libs dependencies...\"\n  pip install -r libs/requirements.txt\nfi\n\n# Install libs in editable mode\npip install -e libs/\n` was unexpected","path":"/src/.github/actions/container-tests/action.yml","spans":[{"file":"/src/.github/actions/container-tests/action.yml","start":{"line":37,"col":18,"offset":1027},"end":{"line":56,"col":22,"offset":1719}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/container-tests/action.yml","start":{"line":64,"col":18,"offset":2045},"end":{"line":81,"col":41,"offset":2453}}]],"message":"Syntax error at line /src/.github/actions/container-tests/action.yml:64:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`hk Running unit tests across all containers...\"\n\npytest_args=\"\"\nif [ \"${INPUT_FAIL_FAST}\" = \"true\" ]; then\n  pytest_args=\"$pytest_args -x\"\nfi\n\n# Run unit tests with coverage\npython -m pytest \\\n  $pytest_args \\\n  -m unit \\\n  --cov=containers \\\n  --cov-report=xml:coverage-unit.xml \\\n  --cov-report=term-missing \\\n  --junit-xml=test-results-unit.xml \\\n  containers/\n\necho \"unit_exit_code=$?\" >> $GITHUB_ENV\n` was unexpected","path":"/src/.github/actions/container-tests/action.yml","spans":[{"file":"/src/.github/actions/container-tests/action.yml","start":{"line":64,"col":18,"offset":2045},"end":{"line":81,"col":41,"offset":2453}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/container-tests/action.yml","start":{"line":89,"col":18,"offset":2777},"end":{"line":107,"col":48,"offset":3230}}]],"message":"Syntax error at line /src/.github/actions/container-tests/action.yml:89:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`UX Running integration tests across all containers...\"\n\npytest_args=\"\"\nif [ \"${INPUT_FAIL_FAST}\" = \"true\" ]; then\n  pytest_args=\"$pytest_args -x\"\nfi\n\n# Run integration tests\npython -m pytest \\\n  $pytest_args \\\n  -m integration \\\n  --cov=containers \\\n  --cov-append \\\n  --cov-report=xml:coverage-integration.xml \\\n  --cov-report=term-missing \\\n  --junit-xml=test-results-integration.xml \\\n  containers/\n\necho \"integration_exit_code=$?\" >> $GITHUB_ENV\n` was unexpected","path":"/src/.github/actions/container-tests/action.yml","spans":[{"file":"/src/.github/actions/container-tests/action.yml","start":{"line":89,"col":18,"offset":2777},"end":{"line":107,"col":48,"offset":3230}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/container-tests/action.yml","start":{"line":154,"col":18,"offset":4723},"end":{"line":207,"col":4,"offset":6079}}]],"message":"Syntax error at line /src/.github/actions/container-tests/action.yml:154:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TK Evaluating test results...\"\n\noverall_success=true\n\n# Check unit tests\nif [ \"${INPUT_TEST_TYPE}\" = \"unit\" ] || [ \"${INPUT_TEST_TYPE}\" = \"all\" ]; then\n  if [ \"${unit_exit_code:-0}\" -ne 0 ]; then\n    echo \"Unit tests failed\"\n    overall_success=false\n  else\n    echo \"Unit tests passed\"\n  fi\nfi\n\n# Check integration tests\nif [ \"${INPUT_TEST_TYPE}\" = \"integration\" ] || [ \"${INPUT_TEST_TYPE}\" = \"all\" ]; then\n  if [ \"${integration_exit_code:-0}\" -ne 0 ]; then\n    echo \"Integration tests failed\"\n    overall_success=false\n  else\n    echo \"Integration tests passed\"\n  fi\nfi\n\n# Check smoke tests\nif [ \"${INPUT_TEST_TYPE}\" = \"smoke\" ] || [ \"${INPUT_TEST_TYPE}\" = \"all\" ]; then\n  if [ \"${smoke_exit_code:-0}\" -ne 0 ]; then\n    echo \"Smoke tests failed\"\n    overall_success=false\n  else\n    echo \"Smoke tests passed\"\n  fi\nfi\n\n# Check performance tests\nif [ \"${INPUT_TEST_TYPE}\" = \"performance\" ] || [ \"${INPUT_TEST_TYPE}\" = \"all\" ]; then\n  if [ \"${performance_exit_code:-0}\" -ne 0 ]; then\n    echo \"Performance tests had issues (non-blocking)\"\n  else\n    echo \"Performance tests passed\"\n  fi\nfi\n\nif [ \"$overall_success\" = \"true\" ]; then\n  echo \"All container tests passed\"\n  echo \"passed=true\" >> $GITHUB_OUTPUT\nelse\n  echo \"Some container tests failed\"\n  echo \"passed=false\" >> $GITHUB_OUTPUT\n\n  if [ \"${INPUT_FAIL_FAST}\" = \"true\" ]; then\n    exit 1\n  fi\nfi\n` was unexpected","path":"/src/.github/actions/container-tests/action.yml","spans":[{"file":"/src/.github/actions/container-tests/action.yml","start":{"line":154,"col":18,"offset":4723},"end":{"line":207,"col":4,"offset":6079}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cost-analysis/action.yml","start":{"line":29,"col":18,"offset":731},"end":{"line":30,"col":24,"offset":803}}]],"message":"Syntax error at line /src/.github/actions/cost-analysis/action.yml:29:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Sq Setting up Infracost for cost analysis...\"\nmkdir -p cost-analysis\n` was unexpected","path":"/src/.github/actions/cost-analysis/action.yml","spans":[{"file":"/src/.github/actions/cost-analysis/action.yml","start":{"line":29,"col":18,"offset":731},"end":{"line":30,"col":24,"offset":803}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cost-analysis/action.yml","start":{"line":37,"col":18,"offset":969},"end":{"line":47,"col":55,"offset":1311}}]],"message":"Syntax error at line /src/.github/actions/cost-analysis/action.yml:37:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TK Generating cost baseline...\"\n\n# Generate cost breakdown for current infrastructure\ndocker run --rm \\\n  -v \"${{ github.workspace }}/infra\":/workspace \\\n  -e \"INFRACOST_API_KEY=$INFRACOST_API_KEY\" \\\n  infracost/infracost:latest \\\n  breakdown \\\n  --path /workspace \\\n  --format json \\\n  --out-file /workspace/../cost-analysis/current.json\n` was unexpected","path":"/src/.github/actions/cost-analysis/action.yml","spans":[{"file":"/src/.github/actions/cost-analysis/action.yml","start":{"line":37,"col":18,"offset":969},"end":{"line":47,"col":55,"offset":1311}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cost-analysis/action.yml","start":{"line":57,"col":18,"offset":1696},"end":{"line":74,"col":29,"offset":2209}}]],"message":"Syntax error at line /src/.github/actions/cost-analysis/action.yml:57:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TK Generating baseline cost for comparison...\"\n\n# Checkout baseline branch\ngit fetch origin \"${INPUT_BASELINE_BRANCH}\"\ngit checkout \"origin/${INPUT_BASELINE_BRANCH}\" -- infra/\n\n# Generate baseline cost\ndocker run --rm \\\n  -v \"${WORKSPACE_PATH}/infra\":/workspace \\\n  -e \"INFRACOST_API_KEY=$INFRACOST_API_KEY\" \\\n  infracost/infracost:latest \\\n  breakdown \\\n  --path /workspace \\\n  --format json \\\n  --out-file /workspace/../cost-analysis/baseline.json\n\n# Restore current branch files\ngit checkout HEAD -- infra/\n` was unexpected","path":"/src/.github/actions/cost-analysis/action.yml","spans":[{"file":"/src/.github/actions/cost-analysis/action.yml","start":{"line":57,"col":18,"offset":1696},"end":{"line":74,"col":29,"offset":2209}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cost-analysis/action.yml","start":{"line":85,"col":9,"offset":2513},"end":{"line":85,"col":27,"offset":2531}}]],"message":"Syntax error at line /src/.github/actions/cost-analysis/action.yml:85:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ github.workspace` was unexpected","path":"/src/.github/actions/cost-analysis/action.yml","spans":[{"file":"/src/.github/actions/cost-analysis/action.yml","start":{"line":85,"col":9,"offset":2513},"end":{"line":85,"col":27,"offset":2531}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cost-analysis/action.yml","start":{"line":98,"col":18,"offset":3013},"end":{"line":174,"col":5,"offset":5331}}]],"message":"Syntax error at line /src/.github/actions/cost-analysis/action.yml:98:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TI Analyzing cost impact...\"\n\ncurrent_monthly=0\nbaseline_monthly=0\ndiff_monthly=0\n\n# Extract current monthly cost\nif [ -f \"cost-analysis/current.json\" ]; then\n  current_monthly=\"$(jq -r '.totalMonthlyCost // \"0\"' cost-analysis/current.json)\"\nfi\n\n# Extract baseline and diff if PR\nif [ -f \"cost-analysis/baseline.json\" ] && [ -f \"cost-analysis/diff.json\" ]; then\n  baseline_monthly=\"$(jq -r '.totalMonthlyCost // \"0\"' cost-analysis/baseline.json)\"\n  diff_monthly=\"$(jq -r '.diffTotalMonthlyCost // \"0\"' cost-analysis/diff.json)\"\nfi\n\necho \"Current monthly cost: $current_monthly\"\necho \"Baseline monthly cost: $baseline_monthly\"\necho \"Monthly difference: $diff_monthly\"\n\n# Create impact summary\npercentage_change=\"$(echo \"scale=2; ($diff_monthly / $baseline_monthly) * 100\" | bc -l 2>/dev/null)\" || percentage_change=\"0\"\nanalysis_timestamp=\"$(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\"\n\nimpact_json=$(cat << EOF\n{\n  \"current_monthly\": \"$current_monthly\",\n  \"baseline_monthly\": \"$baseline_monthly\",\n  \"monthly_difference\": \"$diff_monthly\",\n  \"percentage_change\": \"$percentage_change\",\n  \"analysis_timestamp\": \"$analysis_timestamp\"\n}\nEOF\n)\n\necho \"impact=$impact_json\" >> \"$GITHUB_OUTPUT\"\necho \"monthly-diff=$diff_monthly\" >> \"$GITHUB_OUTPUT\"\n\n# Generate detailed report\nreport_timestamp=\"$(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\"\n\n# Evaluate cost impact\ndiff_positive=\"$(echo \"$diff_monthly > 0\" | bc -l 2>/dev/null)\" || diff_positive=\"0\"\ndiff_significant=\"$(echo \"$diff_monthly > 10\" | bc -l 2>/dev/null)\" || diff_significant=\"0\"\n\nif [ \"$diff_positive\" -eq 1 ]; then\n  impact_assessment=\"**COST INCREASE** - Review resource changes\"\nelse\n  impact_assessment=\"**COST NEUTRAL/DECREASE** - Changes look good\"\nfi\n\nif [ \"$diff_significant\" -eq 1 ]; then\n  recommendation=\"- Consider cost optimization before deployment\"\nelse\n  recommendation=\"- Cost impact is within acceptable range\"\nfi\n\ncat > cost-analysis/summary.md << EOF\n# Cost Analysis Report\n... (truncated 403 more characters)","path":"/src/.github/actions/cost-analysis/action.yml","spans":[{"file":"/src/.github/actions/cost-analysis/action.yml","start":{"line":98,"col":18,"offset":3013},"end":{"line":174,"col":5,"offset":5331}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cost-analysis/action.yml","start":{"line":186,"col":11,"offset":5951},"end":{"line":186,"col":29,"offset":5969}},{"path":"/src/.github/actions/cost-analysis/action.yml","start":{"line":196,"col":11,"offset":5951},"end":{"line":196,"col":29,"offset":5969}}]],"message":"Syntax error at line /src/.github/actions/cost-analysis/action.yml:186:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ github.workspace` was unexpected","path":"/src/.github/actions/cost-analysis/action.yml","spans":[{"file":"/src/.github/actions/cost-analysis/action.yml","start":{"line":186,"col":11,"offset":5951},"end":{"line":186,"col":29,"offset":5969}},{"file":"/src/.github/actions/cost-analysis/action.yml","start":{"line":196,"col":11,"offset":5951},"end":{"line":196,"col":29,"offset":5969}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":80,"col":18,"offset":2787},"end":{"line":101,"col":52,"offset":3487}}]],"message":"Syntax error at line /src/.github/actions/deploy-ephemeral/action.yml:80:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`UQ Logging into Azure...\"\n\n# Parse Azure credentials\nCLIENT_ID=$(echo $AZURE_CREDENTIALS | jq -r '.clientId')\nCLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r '.clientSecret')\nSUBSCRIPTION_ID=$(echo $AZURE_CREDENTIALS | jq -r '.subscriptionId')\nTENANT_ID=$(echo $AZURE_CREDENTIALS | jq -r '.tenantId')\n\n# Login to Azure\ndocker run --rm \\\n  -v \"${WORKSPACE_PATH}\":/workspace \\\n  mcr.microsoft.com/azure-cli:latest \\\n  az login --service-principal \\\n  --username \"$CLIENT_ID\" \\\n  --password \"$CLIENT_SECRET\" \\\n  --tenant \"$TENANT_ID\"\n\n# Set subscription\ndocker run --rm \\\n  -v \"${WORKSPACE_PATH}\":/workspace \\\n  mcr.microsoft.com/azure-cli:latest \\\n  az account set --subscription \"$SUBSCRIPTION_ID\"\n` was unexpected","path":"/src/.github/actions/deploy-ephemeral/action.yml","spans":[{"file":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":80,"col":18,"offset":2787},"end":{"line":101,"col":52,"offset":3487}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":355,"col":18,"offset":12224},"end":{"line":382,"col":19,"offset":12951}}]],"message":"Syntax error at line /src/.github/actions/deploy-ephemeral/action.yml:355:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Pf Running health checks on ephemeral environment...\"\n\n# Create health check script\ncat > health_check.sh << 'EOF'\n#!/bin/bash\n\nENV_URL=\"${ENVIRONMENT_URL}\"\n\nif [ \"$ENV_URL\" = \"Not available\" ]; then\n  echo \"Environment URL not available, skipping health checks\"\n  exit 0\nfi\n\necho \"Testing environment health at: $ENV_URL\"\n\n# Basic connectivity test\nif curl -f -s -o /dev/null --max-time 30 \"$ENV_URL/health\" || curl -f -s -o /dev/null --max-time 30 \"$ENV_URL\"; then\n  echo \"Environment is responding to HTTP requests\"\nelse\n  echo \"Environment is not responding to HTTP requests\"\nfi\n\n# Additional service-specific health checks can be added here\necho \"Health check completed\"\nEOF\n\nchmod +x health_check.sh\n./health_check.sh\n` was unexpected","path":"/src/.github/actions/deploy-ephemeral/action.yml","spans":[{"file":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":355,"col":18,"offset":12224},"end":{"line":382,"col":19,"offset":12951}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/lint-workflows/action.yml","start":{"line":77,"col":22,"offset":2070},"end":{"line":77,"col":55,"offset":2103}}]],"message":"Syntax error at line /src/.github/actions/lint-workflows/action.yml:77:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.actionlint.outputs.passed` was unexpected","path":"/src/.github/actions/lint-workflows/action.yml","spans":[{"file":"/src/.github/actions/lint-workflows/action.yml","start":{"line":77,"col":22,"offset":2070},"end":{"line":77,"col":55,"offset":2103}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/lint-workflows/action.yml","start":{"line":91,"col":20,"offset":2448},"end":{"line":91,"col":51,"offset":2479}},{"path":"/src/.github/actions/lint-workflows/action.yml","start":{"line":92,"col":22,"offset":2448},"end":{"line":92,"col":66,"offset":2492}}]],"message":"Syntax error at line /src/.github/actions/lint-workflows/action.yml:91:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.yamllint.outputs.passed` was unexpected","path":"/src/.github/actions/lint-workflows/action.yml","spans":[{"file":"/src/.github/actions/lint-workflows/action.yml","start":{"line":91,"col":20,"offset":2448},"end":{"line":91,"col":51,"offset":2479}},{"file":"/src/.github/actions/lint-workflows/action.yml","start":{"line":92,"col":22,"offset":2448},"end":{"line":92,"col":66,"offset":2492}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/security-scan/action.yml","start":{"line":118,"col":18,"offset":4158},"end":{"line":193,"col":5,"offset":7377}}]],"message":"Syntax error at line /src/.github/actions/security-scan/action.yml:118:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TK Evaluating security scan results...\"\n\ncritical_count=0\nhigh_count=0\nmedium_count=0\n\n# Count issues from various scan results\nif [ -f \"security-results/trivy-infra.sarif\" ]; then\n  trivy_critical=\"$(jq -r '.runs[0].results[] | select(.level == \"error\") | .ruleId' security-results/trivy-infra.sarif 2>/dev/null | wc -l)\" || trivy_critical=\"0\"\n  critical_count=$((critical_count + trivy_critical))\nfi\n\n# Count Semgrep findings from standardized JSON output\nif [ -f \"security-results/semgrep-results.json\" ]; then\n  # Count all semgrep findings first\n  total_semgrep=\"$(jq -r '.results[] | select(.extra.severity == \"ERROR\" or .extra.severity == \"WARNING\") | .check_id' security-results/semgrep-results.json 2>/dev/null | wc -l)\" || total_semgrep=\"0\"\n  \n  # Subtract acceptable infrastructure findings (documented in docs/SECURITY_EXCEPTIONS.md)\n  acceptable_bypass=\"$(jq -r '.results[] | select(.check_id == \"terraform.azure.security.storage.storage-allow-microsoft-service-bypass.storage-allow-microsoft-service-bypass\") | .check_id' security-results/semgrep-results.json 2>/dev/null | wc -l)\" || acceptable_bypass=\"0\"\n  acceptable_queue=\"$(jq -r '.results[] | select(.check_id == \"terraform.azure.security.storage.storage-queue-services-logging.storage-queue-services-logging\") | .check_id' security-results/semgrep-results.json 2>/dev/null | wc -l)\" || acceptable_queue=\"0\"\n  \n  # Only count critical findings (excluding documented acceptable ones)\n  semgrep_critical=$((total_semgrep - acceptable_bypass - acceptable_queue))\n  critical_count=$((critical_count + semgrep_critical))\n  \n  echo \"Semgrep total findings: $total_semgrep\"\n  echo \"Semgrep acceptable exceptions: $((acceptable_bypass + acceptable_queue))\"\n  echo \"Semgrep critical (blocking): $semgrep_critical\"\nelif [ -f \"security-results/semgrep.sarif\" ]; then\n  # Fallback to SARIF format if JSON not available\n  semgrep_critical=\"$(jq -r '.runs[0].results[] | s... (truncated 1304 more characters)","path":"/src/.github/actions/security-scan/action.yml","spans":[{"file":"/src/.github/actions/security-scan/action.yml","start":{"line":118,"col":18,"offset":4158},"end":{"line":193,"col":5,"offset":7377}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/test-single-container/action.yml","start":{"line":34,"col":18,"offset":988},"end":{"line":36,"col":59,"offset":1149}}]],"message":"Syntax error at line /src/.github/actions/test-single-container/action.yml:34:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`QN Setting up Python test environment for ${CONTAINER_NAME}...\"\npython -m pip install --upgrade pip\npip install pytest pytest-cov pytest-asyncio pytest-xdist\n` was unexpected","path":"/src/.github/actions/test-single-container/action.yml","spans":[{"file":"/src/.github/actions/test-single-container/action.yml","start":{"line":34,"col":18,"offset":988},"end":{"line":36,"col":59,"offset":1149}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/test-single-container/action.yml","start":{"line":43,"col":18,"offset":1326},"end":{"line":63,"col":4,"offset":1970}}]],"message":"Syntax error at line /src/.github/actions/test-single-container/action.yml:43:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Tg Installing dependencies for ${CONTAINER_NAME}...\"\n\n# Install shared libs first\nif [ -f \"libs/requirements.txt\" ]; then\n  echo \"Installing shared libs...\"\n  pip install -r libs/requirements.txt\nfi\n\n# Install libs package in development mode\nif [ -f \"libs/pyproject.toml\" ]; then\n  echo \"Installing libs package...\"\n  pip install -e libs/\nfi\n\n# Install container-specific dependencies\nif [ -f \"containers/${CONTAINER_NAME}/requirements.txt\" ]; then\n  echo \"Installing ${CONTAINER_NAME} dependencies...\"\n  pip install -r \"containers/${CONTAINER_NAME}/requirements.txt\"\nelse\n  echo \"D[aQyP No requirements.txt found for ${CONTAINER_NAME}\"\nfi\n` was unexpected","path":"/src/.github/actions/test-single-container/action.yml","spans":[{"file":"/src/.github/actions/test-single-container/action.yml","start":{"line":43,"col":18,"offset":1326},"end":{"line":63,"col":4,"offset":1970}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/test-single-container/action.yml","start":{"line":72,"col":18,"offset":2328},"end":{"line":88,"col":50,"offset":2856}}]],"message":"Syntax error at line /src/.github/actions/test-single-container/action.yml:72:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`hk Running unit tests for ${CONTAINER_NAME}...\"\n\npytest_args=\"\"\nif [ \"${INPUT_FAIL_FAST}\" = \"true\" ]; then\n  pytest_args=\"$pytest_args -x\"\nfi\n\n# Run unit tests for specific container\npython -m pytest \\\n  $pytest_args \\\n  -m \"unit or not integration\" \\\n  --cov=\"containers/${CONTAINER_NAME}\" \\\n  --cov-report=xml:\"coverage-${CONTAINER_NAME}-unit.xml\" \\\n  --cov-report=term-missing \\\n  --junit-xml=\"test-results-${CONTAINER_NAME}-unit.xml\" \\\n  \"containers/${CONTAINER_NAME}/\" \\\n  || echo \"unit_test_failed=true\" >> $GITHUB_ENV\n` was unexpected","path":"/src/.github/actions/test-single-container/action.yml","spans":[{"file":"/src/.github/actions/test-single-container/action.yml","start":{"line":72,"col":18,"offset":2328},"end":{"line":88,"col":50,"offset":2856}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/test-single-container/action.yml","start":{"line":97,"col":18,"offset":3204},"end":{"line":113,"col":57,"offset":3753}}]],"message":"Syntax error at line /src/.github/actions/test-single-container/action.yml:97:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`UX Running integration tests for ${CONTAINER_NAME}...\"\n\npytest_args=\"\"\nif [ \"${INPUT_FAIL_FAST}\" = \"true\" ]; then\n  pytest_args=\"$pytest_args -x\"\nfi\n\n# Run integration tests for specific container\npython -m pytest \\\n  $pytest_args \\\n  -m integration \\\n  --cov=\"containers/${CONTAINER_NAME}\" \\\n  --cov-report=xml:\"coverage-${CONTAINER_NAME}-integration.xml\" \\\n  --cov-report=term-missing \\\n  --junit-xml=\"test-results-${CONTAINER_NAME}-integration.xml\" \\\n  \"containers/${CONTAINER_NAME}/\" \\\n  || echo \"integration_test_failed=true\" >> $GITHUB_ENV\n` was unexpected","path":"/src/.github/actions/test-single-container/action.yml","spans":[{"file":"/src/.github/actions/test-single-container/action.yml","start":{"line":97,"col":18,"offset":3204},"end":{"line":113,"col":57,"offset":3753}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/test-single-container/action.yml","start":{"line":121,"col":18,"offset":4040},"end":{"line":130,"col":51,"offset":4294}}]],"message":"Syntax error at line /src/.github/actions/test-single-container/action.yml:121:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Si Running smoke tests for ${CONTAINER_NAME}...\"\n\n# Run quick health check tests\npython -m pytest \\\n  -m \"unit and not slow\" \\\n  --maxfail=1 \\\n  --tb=short \\\n  -q \\\n  \"containers/${CONTAINER_NAME}/\" \\\n  || echo \"smoke_test_failed=true\" >> $GITHUB_ENV\n` was unexpected","path":"/src/.github/actions/test-single-container/action.yml","spans":[{"file":"/src/.github/actions/test-single-container/action.yml","start":{"line":121,"col":18,"offset":4040},"end":{"line":130,"col":51,"offset":4294}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/workflows/cicd-pipeline.yml","start":{"line":64,"col":20,"offset":1732},"end":{"line":87,"col":4,"offset":2512}}]],"message":"Syntax error at line /src/.github/workflows/cicd-pipeline.yml:64:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`UN Running code quality checks...\"\n\n# Install quality tools\npip install flake8 black isort mypy pylint\n\n# Run code formatting checks\necho \"Checking code formatting with black...\"\nblack --check --diff . || echo \"black_failed=true\" >> \"$GITHUB_ENV\"\n\n# Run import sorting checks\necho \"Checking import sorting with isort...\"\nisort --check-only --diff . || echo \"isort_failed=true\" >> \"$GITHUB_ENV\"\n\n# Run linting\necho \"Running flake8 linting...\"\nflake8 --max-line-length=100 --extend-ignore=E203,W503 . || echo \"flake8_failed=true\" >> \"$GITHUB_ENV\"\n\n# Check for any failures\nif [[ \"${black_failed}\" == \"true\" || \"${isort_failed}\" == \"true\" || \"${flake8_failed}\" == \"true\" ]]; then\n  echo \"passed=false\" >> \"$GITHUB_OUTPUT\"\n  exit 1\nelse\n  echo \"passed=true\" >> \"$GITHUB_OUTPUT\"\nfi\n` was unexpected","path":"/src/.github/workflows/cicd-pipeline.yml","spans":[{"file":"/src/.github/workflows/cicd-pipeline.yml","start":{"line":64,"col":20,"offset":1732},"end":{"line":87,"col":4,"offset":2512}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/workflows/cicd-pipeline.yml","start":{"line":92,"col":20,"offset":2819},"end":{"line":107,"col":4,"offset":3398}}]],"message":"Syntax error at line /src/.github/workflows/cicd-pipeline.yml:92:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`US Running dependency security checks...\"\n\n# Install safety for dependency scanning\npip install safety\n\n# Check each container's requirements\nfind containers/ -name \"requirements.txt\" -type f | while read -r req_file; do\n  echo \"Checking dependencies in $req_file...\"\n  safety check --file \"$req_file\" --output text || echo \"safety issues found in $req_file\"\ndone\n\n# Check main libs requirements\nif [ -f \"libs/requirements.txt\" ]; then\n  echo \"Checking libs dependencies...\"\n  safety check --file \"libs/requirements.txt\" --output text || echo \"safety issues found in libs\"\nfi\n` was unexpected","path":"/src/.github/workflows/cicd-pipeline.yml","spans":[{"file":"/src/.github/workflows/cicd-pipeline.yml","start":{"line":92,"col":20,"offset":2819},"end":{"line":107,"col":4,"offset":3398}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/workflows/cicd-pipeline.yml","start":{"line":112,"col":20,"offset":3645},"end":{"line":127,"col":6,"offset":4276}}]],"message":"Syntax error at line /src/.github/workflows/cicd-pipeline.yml:112:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`PXQyP Running infrastructure linting...\"\n\n# Run Terraform formatting check\nif command -v terraform >/dev/null 2>&1; then\n  echo \"Checking Terraform formatting...\"\n  terraform fmt -check -recursive infra/ || echo \"terraform_fmt_failed=true\"\nelse\n  echo \"Terraform not available, using Docker...\"\n  docker run --rm -v \"$(pwd)/infra:/workspace\" -w /workspace hashicorp/terraform:latest fmt -check -recursive . || echo \"terraform_fmt_failed=true\"\nfi\n\n# Run YAML linting on infrastructure files\necho \"Checking YAML files...\"\nfind infra/ -name \"*.yml\" -o -name \"*.yaml\" | head -5 | while read -r file; do\n  echo \"Checking $file\"\ndone\n` was unexpected","path":"/src/.github/workflows/cicd-pipeline.yml","spans":[{"file":"/src/.github/workflows/cicd-pipeline.yml","start":{"line":112,"col":20,"offset":3645},"end":{"line":127,"col":6,"offset":4276}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/workflows/cicd-pipeline.yml","start":{"line":377,"col":19,"offset":12424},"end":{"line":377,"col":71,"offset":12476}}]],"message":"Syntax error at line /src/.github/workflows/cicd-pipeline.yml:377:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ needs.production-deployment.outputs.deployment-url` was unexpected","path":"/src/.github/workflows/cicd-pipeline.yml","spans":[{"file":"/src/.github/workflows/cicd-pipeline.yml","start":{"line":377,"col":19,"offset":12424},"end":{"line":377,"col":71,"offset":12476}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/containers/site-generator/templates/article.html","start":{"line":1,"col":1,"offset":0},"end":{"line":5,"col":23,"offset":129}},{"path":"/src/containers/site-generator/templates/article.html","start":{"line":90,"col":1,"offset":0},"end":{"line":90,"col":15,"offset":14}}]],"message":"Syntax error at line /src/containers/site-generator/templates/article.html:1:\n `{% extends \"base.html\" %}\n\n{% block title %}{{ article.title }} | {{ site_metadata.title }}{% endblock %}\n\n{% block extra_head %}` was unexpected","path":"/src/containers/site-generator/templates/article.html","spans":[{"file":"/src/containers/site-generator/templates/article.html","start":{"line":1,"col":1,"offset":0},"end":{"line":5,"col":23,"offset":129}},{"file":"/src/containers/site-generator/templates/article.html","start":{"line":90,"col":1,"offset":0},"end":{"line":90,"col":15,"offset":14}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/containers/site-generator/templates/index.html","start":{"line":1,"col":1,"offset":0},"end":{"line":3,"col":20,"offset":46}},{"path":"/src/containers/site-generator/templates/index.html","start":{"line":28,"col":73,"offset":0},"end":{"line":28,"col":95,"offset":22}},{"path":"/src/containers/site-generator/templates/index.html","start":{"line":43,"col":1,"offset":0},"end":{"line":43,"col":30,"offset":29}},{"path":"/src/containers/site-generator/templates/index.html","start":{"line":48,"col":1,"offset":0},"end":{"line":49,"col":15,"offset":26}}]],"message":"Syntax error at line /src/containers/site-generator/templates/index.html:1:\n `{% extends \"base.html\" %}\n\n{% block content %}` was unexpected","path":"/src/containers/site-generator/templates/index.html","spans":[{"file":"/src/containers/site-generator/templates/index.html","start":{"line":1,"col":1,"offset":0},"end":{"line":3,"col":20,"offset":46}},{"file":"/src/containers/site-generator/templates/index.html","start":{"line":28,"col":73,"offset":0},"end":{"line":28,"col":95,"offset":22}},{"file":"/src/containers/site-generator/templates/index.html","start":{"line":43,"col":1,"offset":0},"end":{"line":43,"col":30,"offset":29}},{"file":"/src/containers/site-generator/templates/index.html","start":{"line":48,"col":1,"offset":0},"end":{"line":49,"col":15,"offset":26}}]}],"paths":{"scanned":["/src/.checkov.yml","/src/.env","/src/.github/actions/ai-review-cost/action.yml","/src/.github/actions/ai-review-operations/action.yml","/src/.github/actions/ai-review-security/action.yml","/src/.github/actions/cleanup-ephemeral/action.yml","/src/.github/actions/container-tests/action.yml","/src/.github/actions/cost-analysis/action.yml","/src/.github/actions/deploy-ephemeral/action.yml","/src/.github/actions/lint-workflows/action.yml","/src/.github/actions/security-scan/action.yml","/src/.github/actions/test-single-container/action.yml","/src/.github/dependabot.yml","/src/.github/workflows/cicd-pipeline.yml","/src/.gitignore","/src/.markdownlint.json","/src/.semgrep.yml","/src/.semgrepignore","/src/.yamllint.yml","/src/containers/collector-scheduler/Dockerfile","/src/containers/collector-scheduler/main.py","/src/containers/collector-scheduler/requirements.txt","/src/containers/content-collector/Dockerfile","/src/containers/content-collector/__init__.py","/src/containers/content-collector/collector.py","/src/containers/content-collector/config.py","/src/containers/content-collector/keyvault_client.py","/src/containers/content-collector/main.py","/src/containers/content-collector/models.py","/src/containers/content-collector/pyproject.toml","/src/containers/content-collector/requirements.txt","/src/containers/content-collector/service_logic.py","/src/containers/content-collector/source_collectors.py","/src/containers/content-collector/transforms.py","/src/containers/content-enricher/Dockerfile","/src/containers/content-enricher/__init__.py","/src/containers/content-enricher/config.py","/src/containers/content-enricher/content_summarizer.py","/src/containers/content-enricher/enricher.py","/src/containers/content-enricher/main.py","/src/containers/content-enricher/mypy.ini","/src/containers/content-enricher/pyproject.toml","/src/containers/content-enricher/requirements.txt","/src/containers/content-enricher/sentiment_analyzer.py","/src/containers/content-enricher/service_logic.py","/src/containers/content-enricher/topic_classifier.py","/src/containers/content-enricher/trend_calculator.py","/src/containers/content-generator/Dockerfile","/src/containers/content-generator/blob_events.py","/src/containers/content-generator/config.py","/src/containers/content-generator/health.py","/src/containers/content-generator/main.py","/src/containers/content-generator/models.py","/src/containers/content-generator/requirements.txt","/src/containers/content-generator/service_logic.py","/src/containers/content-processor/Dockerfile","/src/containers/content-processor/config.py","/src/containers/content-processor/main.py","/src/containers/content-processor/processor.py","/src/containers/content-processor/pyproject.toml","/src/containers/content-processor/requirements.txt","/src/containers/content-processor/service_logic.py","/src/containers/content-ranker/Dockerfile","/src/containers/content-ranker/config.py","/src/containers/content-ranker/debug_blob.py","/src/containers/content-ranker/main.py","/src/containers/content-ranker/models.py","/src/containers/content-ranker/ranker.py","/src/containers/content-ranker/requirements.txt","/src/containers/content-ranker/service_logic.py","/src/containers/markdown-generator/.dockerignore","/src/containers/markdown-generator/Dockerfile","/src/containers/markdown-generator/blob_storage.py","/src/containers/markdown-generator/config.py","/src/containers/markdown-generator/health.py","/src/containers/markdown-generator/main.py","/src/containers/markdown-generator/main_new.py","/src/containers/markdown-generator/models.py","/src/containers/markdown-generator/requirements.txt","/src/containers/markdown-generator/service_logic.py","/src/containers/site-generator/Dockerfile","/src/containers/site-generator/config.py","/src/containers/site-generator/health.py","/src/containers/site-generator/main.py","/src/containers/site-generator/models.py","/src/containers/site-generator/requirements.txt","/src/containers/site-generator/service_logic.py","/src/containers/site-generator/template_manager.py","/src/containers/site-generator/templates/article.html","/src/containers/site-generator/templates/base.html","/src/containers/site-generator/templates/index.html","/src/containers/site-generator/templates/style.css","/src/infra/.infracost/pricing.gob","/src/infra/.infracost/terraform_modules/manifest.json","/src/infra/container_apps.tf","/src/infra/core/.terraform.lock.hcl","/src/infra/core/main.tf","/src/infra/core/outputs.tf","/src/infra/core/terraform.tfstate.local-backup","/src/infra/core/variables.tf","/src/infra/cost_monitoring.tf","/src/infra/environments/main.tf","/src/infra/environments/outputs.tf","/src/infra/environments/variables.tf","/src/infra/main.tf","/src/infra/outputs.tf","/src/infra/providers.tf","/src/infra/sbom-infrastructure.txt","/src/infra/usage-estimates.yml","/src/infra/variables.tf","/src/libs/__init__.py","/src/libs/blob_storage.py","/src/libs/pyproject.toml","/src/python-safety-results.json","/src/python-semgrep-results.json","/src/python-trivy-results.json","/src/security-results/bandit.json","/src/security-results/checkov.sarif/results_sarif.sarif","/src/security-results/safety-collector-scheduler.json","/src/security-results/safety-content-collector.json","/src/security-results/safety-content-enricher.json","/src/security-results/safety-content-generator.json","/src/security-results/safety-content-processor.json","/src/security-results/safety-content-ranker.json","/src/security-results/safety-markdown-generator.json","/src/security-results/safety-site-generator.json","/src/security-results/semgrep-results.json","/src/security-results/trivy-infra.sarif","/src/security-summary.txt"]},"time":{"rules":[],"rules_parse_time":3.2836201190948486,"profiling_times":{"config_time":17.037351608276367,"core_time":7.170650482177734,"ignores_time":0.004342794418334961,"total_time":24.214444160461426},"parsing_time":{"total_time":1.8209404945373535,"per_file_time":{"mean":0.020460005556599475,"std_dev":0.001247842804061661},"very_slow_stats":{"time_ratio":0.0,"count_ratio":0.0},"very_slow_files":[]},"scanning_time":{"total_time":18.22626519203186,"per_file_time":{"mean":0.05021009694774617,"std_dev":0.026336132205147078},"very_slow_stats":{"time_ratio":0.08744793106739737,"count_ratio":0.0027548209366391185},"very_slow_files":[{"fpath":"/src/containers/content-generator/service_logic.py","ftime":1.5938491821289062}]},"matching_time":{"total_time":8.693843126296997,"per_file_and_rule_time":{"mean":0.006024839311363131,"std_dev":0.0004866334609180947},"very_slow_stats":{"time_ratio":0.2630342983682732,"count_ratio":0.008316008316008316},"very_slow_rules_on_files":[{"fpath":"/src/containers/site-generator/service_logic.py","rule_id":"python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open","time":0.11738300323486328},{"fpath":"/src/containers/content-collector/source_collectors.py","rule_id":"python.lang.security.dangerous-system-call.dangerous-system-call","time":0.12473702430725098},{"fpath":"/src/containers/content-generator/service_logic.py","rule_id":"python.aws-lambda.security.tainted-html-string.tainted-html-string","time":0.14879083633422852},{"fpath":"/src/containers/site-generator/models.py","rule_id":"python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","time":0.15209484100341797},{"fpath":"/src/containers/site-generator/health.py","rule_id":"python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","time":0.15427708625793457},{"fpath":"/src/containers/content-enricher/config.py","rule_id":"python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","time":0.16300201416015625},{"fpath":"/src/containers/content-processor/config.py","rule_id":"python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","time":0.17531991004943848},{"fpath":"/src/containers/content-generator/service_logic.py","rule_id":"python.lang.security.dangerous-system-call.dangerous-system-call","time":0.19828104972839355},{"fpath":"/src/containers/content-collector/source_collectors.py","rule_id":"python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","time":0.35326600074768066},{"fpath":"/src/containers/content-collector/collector.py","rule_id":"python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","time":0.47443699836730957}]},"tainting_time":{"total_time":2.6243059635162354,"per_def_and_rule_time":{"mean":0.0012449269276642483,"std_dev":3.392678644782198e-05},"very_slow_stats":{"time_ratio":0.13325999303906183,"count_ratio":0.0009487666034155598},"very_slow_rules_on_defs":[{"fpath":"/src/containers/content-enricher/topic_classifier.py","fline":11,"rule_id":"python.boto3.security.hardcoded-token.hardcoded-token","time":0.16373395919799805},{"fpath":"/src/containers/content-collector/source_collectors.py","fline":446,"rule_id":"python.boto3.security.hardcoded-token.hardcoded-token","time":0.18598103523254395}]},"targets":[],"total_bytes":0,"max_memory_bytes":1104557824},"engine_requested":"OSS","skipped_rules":[]}