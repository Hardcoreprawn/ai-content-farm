#!/usr/bin/env python3
"""
Test configuration and fixtures for site-generator tests.

Uses Azurite for local blob storage testing.
"""

import os
import pytest
import tempfile
from pathlib import Path
from typing import Dict, Any, List
from unittest.mock import Mock, patch

# Set test environment
os.environ["ENVIRONMENT"] = "testing"
os.environ["AZURE_STORAGE_CONNECTION_STRING"] = (
    "DefaultEndpointsProtocol=http;"
    "AccountName=devstoreaccount1;"
    "AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;"
    "BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;"
)


@pytest.fixture
def sample_ranked_content() -> Dict[str, Any]:
    """Sample ranked content data for testing."""
    return {
        "ranked_topics": [
            {
                "id": "test_001",
                "title": "Revolutionary AI Breakthrough in Machine Learning",
                "url": "https://example.com/ai-breakthrough",
                "content": "This is a test article about AI breakthroughs. It contains multiple paragraphs.\n\nThis is the second paragraph with more details about the breakthrough.",
                "summary": "A revolutionary AI breakthrough has been announced by researchers.",
                "author": "Dr. Jane Smith",
                "published_date": "2025-08-19T10:00:00Z",
                "tags": ["ai", "machine-learning", "technology"],
                "ranking_score": 0.95,
                "source": "reddit",
                "subreddit": "MachineLearning",
                "upvotes": 245,
                "comments": 67,
                "created_utc": 1692000000
            },
            {
                "id": "test_002",
                "title": "New Programming Language Gains Popularity",
                "url": "https://example.com/new-language",
                "content": "A new programming language is gaining traction among developers.",
                "summary": "Developers are adopting a new programming language for its simplicity.",
                "author": "John Doe",
                "published_date": "2025-08-19T09:00:00Z",
                "tags": ["programming", "software", "development"],
                "ranking_score": 0.78,
                "source": "reddit",
                "subreddit": "programming",
                "upvotes": 156,
                "comments": 34,
                "created_utc": 1691990000
            }
        ],
        "metadata": {
            "generated_at": "2025-08-19T10:30:00Z",
            "total_items": 2,
            "source": "content-ranker"
        }
    }


@pytest.fixture
def mock_blob_client():
    """Mock blob storage client for testing."""
    mock_client = Mock()
    mock_client.download_text.return_value = "<html>Mock template</html>"
    mock_client.upload_text.return_value = True
    mock_client.ensure_container.return_value = True
    return mock_client


@pytest.fixture
def temp_templates_dir():
    """Create temporary templates directory for testing."""
    with tempfile.TemporaryDirectory() as temp_dir:
        templates_dir = Path(temp_dir) / "templates"
        templates_dir.mkdir()

        # Create basic test templates
        (templates_dir / "base.html").write_text("""
<!DOCTYPE html>
<html>
<head><title>{{ title }}</title></head>
<body>{% block content %}{% endblock %}</body>
</html>
        """)

        (templates_dir / "index.html").write_text("""
{% extends "base.html" %}
{% block content %}
<h1>{{ site_metadata.title }}</h1>
{% for article in articles %}
<div class="article-card">
    <h2>{{ article.title }}</h2>
    <p>Score: {{ article.ranking_score }}</p>
</div>
{% endfor %}
{% endblock %}
        """)

        (templates_dir / "article.html").write_text("""
{% extends "base.html" %}
{% block content %}
<article>
    <h1>{{ article.title }}</h1>
    <div class="meta">{{ article.author }} | {{ article.published_date }}</div>
    <div class="content">{{ article.content }}</div>
</article>
{% endblock %}
        """)

        (templates_dir / "style.css").write_text("""
body { font-family: sans-serif; margin: 20px; }
.article-card { border: 1px solid #ccc; padding: 10px; margin: 10px 0; }
        """)

        yield str(templates_dir)


@pytest.fixture
def test_site_metadata() -> Dict[str, Any]:
    """Sample site metadata for testing."""
    return {
        "title": "AI Content Farm Test",
        "description": "Test site generated by AI Content Farm",
        "generation_date": "2025-08-19T10:30:00Z",
        "theme": "modern",
        "total_articles": 2,
        "content_sources": ["reddit"],
        "version": "1.0.0"
    }
