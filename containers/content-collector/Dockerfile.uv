# Multi-stage Dockerfile for content-collector with UV optimization
# UV is significantly faster than pip for dependency resolution and installation

# Base stage with UV and common dependencies
FROM python:3.11-slim AS base

# Install UV (Astral's ultrafast Python package installer)
# UV is typically 10-25x faster than pip for dependency resolution
ENV UV_CACHE_DIR=/opt/uv-cache
RUN pip install --no-cache-dir uv==0.4.23

# System dependencies (cached layer)
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential=12.12 \
    curl=8.14.1-2 \
    && rm -rf /var/lib/apt/lists/*

# Create app user for security
RUN useradd --create-home --shell /bin/bash appuser

WORKDIR /app

# Copy requirements first for optimal Docker layer caching
COPY containers/content-collector/requirements.txt /tmp/

# Install service dependencies with UV (much faster than pip)
# UV caches compiled wheels and resolves dependencies much faster
RUN --mount=type=cache,target=$UV_CACHE_DIR \
    uv pip install --system --no-cache -r /tmp/requirements.txt

# Install shared libraries with Azure dependencies using UV
COPY libs/ ./libs/
RUN --mount=type=cache,target=$UV_CACHE_DIR \
    uv pip install --system --no-cache -e "./libs/[dev]"

# Copy application code (changes most frequently)
COPY containers/content-collector/ .

# Service configuration
ENV SERVICE_NAME=content-collector
ENV LOG_LEVEL=info

# Development stage with test tools
FROM base AS development

# Install development tools using UV
RUN --mount=type=cache,target=$UV_CACHE_DIR \
    uv pip install --system --no-cache ipdb pdbpp

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD python -c "import httpx; httpx.get('http://localhost:8000/health').raise_for_status()"

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Run application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

# Production stage - optimized and secure
FROM base AS production

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD python -c "import httpx; httpx.get('http://localhost:8000/health').raise_for_status()"

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Run application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
