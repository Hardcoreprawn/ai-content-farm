# Optimized Multi-stage Dockerfile Template with UV
# UV with wheels-only provides 70% faster builds than pip
# Following security and performance best practices

# Base stage with UV and minimal dependencies
FROM python:3.11-slim AS base

# Install UV - Astral's ultrafast Python package installer
RUN pip install --no-cache-dir uv==0.4.23

# Install minimal runtime dependencies only (no build tools!)
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd --gid 1000 appuser && \
    useradd --uid 1000 --gid 1000 --create-home --shell /bin/bash appuser

# Set working directory
WORKDIR /app

# Set up UV cache
ENV UV_CACHE_DIR=/opt/uv-cache

# Copy requirements first for better caching
COPY requirements.txt .

# Install dependencies with UV using only pre-built wheels (fastest approach)
# This avoids compilation and the need for build-essential
RUN --mount=type=cache,target=$UV_CACHE_DIR \
    uv pip install --system --no-cache --only-binary=all -r requirements.txt || \
    echo "Some packages may need compilation - falling back to source builds" && \
    uv pip install --system --no-cache -r requirements.txt

# Copy shared libraries
COPY --chown=appuser:appuser libs/ ./libs/

# Install shared libraries with UV
RUN --mount=type=cache,target=$UV_CACHE_DIR \
    uv pip install --system --no-cache --only-binary=all -e "./libs/[dev]" || \
    echo "Libs installation may need source builds" && \
    uv pip install --system --no-cache -e "./libs/[dev]"

# Copy application code
COPY --chown=appuser:appuser containers/${SERVICE_NAME}/ .

# Environment configuration
ENV PYTHONPATH=/app/libs:/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Development stage with debug tools
FROM base AS development

# Switch to root for dev tool installation
USER root

# Install minimal development tools (avoid heavy build-essential)
RUN apt-get update && apt-get install -y --no-install-recommends \
    vim \
    less \
    git \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Python debug tools using UV
RUN --mount=type=cache,target=$UV_CACHE_DIR \
    uv pip install --system --no-cache ipdb pdbpp

# Set non-root user
USER appuser

# Health check template
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command (override in specific containers)
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

# Production stage (same as base with user and health check)
FROM base AS production

# Set non-root user
USER appuser

# Health check template
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command (override in specific containers)
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
