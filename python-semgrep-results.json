{"version":"1.131.0","results":[{"check_id":"yaml.github-actions.security.run-shell-injection.run-shell-injection","path":"/src/.github/actions/ai-review-cost/action.yml","start":{"line":106,"col":7,"offset":3920},"end":{"line":349,"col":2,"offset":14135},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/"],"technology":["github-actions"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection","shortlink":"https://sg.run/pkzk"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.github-actions.security.run-shell-injection.run-shell-injection","path":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":136,"col":7,"offset":5501},"end":{"line":376,"col":2,"offset":15692},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/"],"technology":["github-actions"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection","shortlink":"https://sg.run/pkzk"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.github-actions.security.run-shell-injection.run-shell-injection","path":"/src/.github/actions/ai-review-security/action.yml","start":{"line":119,"col":7,"offset":3905},"end":{"line":339,"col":2,"offset":12947},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/"],"technology":["github-actions"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection","shortlink":"https://sg.run/pkzk"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.github-actions.security.run-shell-injection.run-shell-injection","path":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":34,"col":7,"offset":1009},"end":{"line":68,"col":2,"offset":2338},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/"],"technology":["github-actions"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection","shortlink":"https://sg.run/pkzk"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.github-actions.security.run-shell-injection.run-shell-injection","path":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":169,"col":7,"offset":5958},"end":{"line":253,"col":2,"offset":9075},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/"],"technology":["github-actions"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection","shortlink":"https://sg.run/pkzk"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.github-actions.security.run-shell-injection.run-shell-injection","path":"/src/.github/actions/container-tests/action.yml","start":{"line":62,"col":7,"offset":1979},"end":{"line":81,"col":2,"offset":2525},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/"],"technology":["github-actions"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection","shortlink":"https://sg.run/pkzk"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.github-actions.security.run-shell-injection.run-shell-injection","path":"/src/.github/actions/container-tests/action.yml","start":{"line":85,"col":7,"offset":2656},"end":{"line":105,"col":2,"offset":3255},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/"],"technology":["github-actions"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection","shortlink":"https://sg.run/pkzk"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.github-actions.security.run-shell-injection.run-shell-injection","path":"/src/.github/actions/container-tests/action.yml","start":{"line":125,"col":7,"offset":3883},"end":{"line":141,"col":2,"offset":4365},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/"],"technology":["github-actions"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection","shortlink":"https://sg.run/pkzk"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.github-actions.security.run-shell-injection.run-shell-injection","path":"/src/.github/actions/container-tests/action.yml","start":{"line":145,"col":7,"offset":4443},"end":{"line":200,"col":2,"offset":6233},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/"],"technology":["github-actions"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection","shortlink":"https://sg.run/pkzk"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.github-actions.security.run-shell-injection.run-shell-injection","path":"/src/.github/actions/container-tests/action.yml","start":{"line":230,"col":7,"offset":7361},"end":{"line":256,"col":29,"offset":8646},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/"],"technology":["github-actions"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection","shortlink":"https://sg.run/pkzk"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.github-actions.security.run-shell-injection.run-shell-injection","path":"/src/.github/actions/cost-analysis/action.yml","start":{"line":55,"col":7,"offset":1581},"end":{"line":74,"col":2,"offset":2239},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/"],"technology":["github-actions"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection","shortlink":"https://sg.run/pkzk"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.github-actions.security.run-shell-injection.run-shell-injection","path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":38,"col":7,"offset":1138},"end":{"line":68,"col":2,"offset":2341},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/"],"technology":["github-actions"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection","shortlink":"https://sg.run/pkzk"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.github-actions.security.run-shell-injection.run-shell-injection","path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":99,"col":7,"offset":3405},"end":{"line":261,"col":2,"offset":9319},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/"],"technology":["github-actions"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection","shortlink":"https://sg.run/pkzk"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.github-actions.security.github-script-injection.github-script-injection","path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":375,"col":9,"offset":12613},"end":{"line":408,"col":2,"offset":13994},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `actions/github-script`'s `script:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-94: Improper Control of Generation of Code ('Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/","https://github.com/actions/github-script"],"technology":["github-actions"],"cwe2022-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.github-script-injection.github-script-injection","shortlink":"https://sg.run/g1G0"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.github-actions.security.run-shell-injection.run-shell-injection","path":"/src/.github/actions/lint-workflows/action.yml","start":{"line":34,"col":7,"offset":940},"end":{"line":49,"col":2,"offset":1354},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/"],"technology":["github-actions"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection","shortlink":"https://sg.run/pkzk"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.github-actions.security.run-shell-injection.run-shell-injection","path":"/src/.github/actions/lint-workflows/action.yml","start":{"line":53,"col":7,"offset":1426},"end":{"line":68,"col":2,"offset":1848},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/"],"technology":["github-actions"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection","shortlink":"https://sg.run/pkzk"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.github-actions.security.run-shell-injection.run-shell-injection","path":"/src/.github/actions/security-scan/action.yml","start":{"line":110,"col":7,"offset":3928},"end":{"line":171,"col":2,"offset":6190},"extra":{"message":"Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".","metadata":{"category":"security","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections","https://securitylab.github.com/research/github-actions-untrusted-input/"],"technology":["github-actions"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection","shortlink":"https://sg.run/pkzk"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.non-literal-import.non-literal-import","path":"/src/containers/content-collector/collector.py","start":{"line":377,"col":36,"offset":12487},"end":{"line":377,"col":70,"offset":12521},"extra":{"message":"Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.","metadata":{"owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-706: Use of Incorrectly-Resolved Name or Reference"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import","shortlink":"https://sg.run/y6Jk"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","path":"/src/containers/content-enricher/config.py","start":{"line":112,"col":17,"offset":3020},"end":{"line":112,"col":56,"offset":3059},"extra":{"message":"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.","metadata":{"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"asvs":{"control_id":"9.1.1 Weak TLS","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements","section":"V9 Communications Verification Requirements","version":"4"},"category":"security","technology":["requests"],"references":["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","shortlink":"https://sg.run/W8J4"},"severity":"INFO","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","path":"/src/containers/content-processor/config.py","start":{"line":78,"col":17,"offset":2363},"end":{"line":78,"col":56,"offset":2402},"extra":{"message":"Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.","metadata":{"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"asvs":{"control_id":"9.1.1 Weak TLS","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements","section":"V9 Communications Verification Requirements","version":"4"},"category":"security","technology":["requests"],"references":["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","shortlink":"https://sg.run/W8J4"},"severity":"INFO","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.fastapi.security.wildcard-cors.wildcard-cors","path":"/src/containers/site-generator/main.py","start":{"line":84,"col":19,"offset":2224},"end":{"line":84,"col":24,"offset":2229},"extra":{"message":"CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.","metadata":{"cwe":["CWE-942: Permissive Cross-domain Policy with Untrusted Domains"],"owasp":["A05:2021 - Security Misconfiguration"],"category":"security","technology":["python","fastapi"],"references":["https://owasp.org/Top10/A05_2021-Security_Misconfiguration","https://cwe.mitre.org/data/definitions/942.html"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","vulnerability_class":["Configuration"],"subcategory":["vuln"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors","shortlink":"https://sg.run/KxApY"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.fastapi.security.wildcard-cors.wildcard-cors","path":"/src/containers/site-generator/main_new.py","start":{"line":84,"col":19,"offset":2224},"end":{"line":84,"col":24,"offset":2229},"extra":{"message":"CORS policy allows any origin (using wildcard '*'). This is insecure and should be avoided.","metadata":{"cwe":["CWE-942: Permissive Cross-domain Policy with Untrusted Domains"],"owasp":["A05:2021 - Security Misconfiguration"],"category":"security","technology":["python","fastapi"],"references":["https://owasp.org/Top10/A05_2021-Security_Misconfiguration","https://cwe.mitre.org/data/definitions/942.html"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","vulnerability_class":["Configuration"],"subcategory":["vuln"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","source":"https://semgrep.dev/r/python.fastapi.security.wildcard-cors.wildcard-cors","shortlink":"https://sg.run/KxApY"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"/src/containers/site-generator/main_old.py","start":{"line":366,"col":20,"offset":13782},"end":{"line":366,"col":46,"offset":13808},"extra":{"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"/src/containers/site-generator/template_manager.py","start":{"line":86,"col":26,"offset":3103},"end":{"line":91,"col":10,"offset":3242},"extra":{"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"/src/containers/site-generator/template_manager.py","start":{"line":100,"col":20,"offset":3583},"end":{"line":100,"col":46,"offset":3609},"extra":{"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"terraform.azure.security.keyvault.keyvault-specify-network-acl.keyvault-specify-network-acl","path":"/src/infra/main.tf","start":{"line":17,"col":1,"offset":276},"end":{"line":17,"col":9,"offset":284},"extra":{"message":"Network ACLs allow you to reduce your exposure to risk by limiting what can access your key vault. The default action of the Network ACL should be set to deny for when IPs are not matched. Azure services can be allowed to bypass.","metadata":{"cwe":["CWE-1220: Insufficient Granularity of Access Control"],"category":"security","technology":["terraform","azure"],"references":["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault#network_acls","https://docs.microsoft.com/en-us/azure/key-vault/general/network-security"],"owasp":["A05:2017 - Broken Access Control","A01:2021 - Broken Access Control"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/terraform.azure.security.keyvault.keyvault-specify-network-acl.keyvault-specify-network-acl","shortlink":"https://sg.run/nKgX"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"terraform.azure.security.keyvault.keyvault-ensure-key-expires.keyvault-ensure-key-expires","path":"/src/infra/main.tf","start":{"line":137,"col":1,"offset":4361},"end":{"line":137,"col":9,"offset":4369},"extra":{"message":"Ensure that the expiration date is set on all keys","metadata":{"cwe":["CWE-262: Not Using Password Aging"],"category":"security","technology":["terraform","azure"],"references":["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_key#expiration_date","https://docs.microsoft.com/en-us/powershell/module/az.keyvault/update-azkeyvaultkey?view=azps-5.8.0#example-1--modify-a-key-to-enable-it--and-set-the-expiration-date-and-tags"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/terraform.azure.security.keyvault.keyvault-ensure-key-expires.keyvault-ensure-key-expires","shortlink":"https://sg.run/vq9A"},"severity":"INFO","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"terraform.azure.security.storage.storage-allow-microsoft-service-bypass.storage-allow-microsoft-service-bypass","path":"/src/infra/main.tf","start":{"line":190,"col":1,"offset":5913},"end":{"line":213,"col":2,"offset":7141},"extra":{"message":"Some Microsoft services that interact with storage accounts operate from networks that can't be granted access through network rules. To help this type of service work as intended, allow the set of trusted Microsoft services to bypass the network rules","metadata":{"cwe":["CWE-1220: Insufficient Granularity of Access Control"],"category":"security","technology":["terraform","azure"],"references":["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#bypass","https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account_network_rules#bypass","https://docs.microsoft.com/en-us/azure/storage/common/storage-network-security#trusted-microsoft-services"],"owasp":["A05:2017 - Broken Access Control","A01:2021 - Broken Access Control"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/terraform.azure.security.storage.storage-allow-microsoft-service-bypass.storage-allow-microsoft-service-bypass","shortlink":"https://sg.run/WpX4"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"terraform.azure.security.storage.storage-queue-services-logging.storage-queue-services-logging","path":"/src/infra/main.tf","start":{"line":190,"col":1,"offset":5913},"end":{"line":213,"col":2,"offset":7141},"extra":{"message":"Storage Analytics logs detailed information about successful and failed requests to a storage service. This information can be used to monitor individual requests and to diagnose issues with a storage service. Requests are logged on a best-effort basis.","metadata":{"cwe":["CWE-778: Insufficient Logging"],"category":"security","technology":["terraform","azure"],"references":["https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#logging","https://docs.microsoft.com/en-us/azure/storage/common/storage-analytics-logging?tabs=dotnet"],"owasp":["A10:2017 - Insufficient Logging & Monitoring","A09:2021 - Security Logging and Monitoring Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insufficient Logging"],"source":"https://semgrep.dev/r/terraform.azure.security.storage.storage-queue-services-logging.storage-queue-services-logging","shortlink":"https://sg.run/0yEv"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[{"code":3,"level":"warn","type":"Syntax error","message":"Syntax error at line /src/python-safety-results.json:1:\n missing element","path":"/src/python-safety-results.json"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"yaml.github-actions.security.curl-eval.curl-eval","message":"Internal matching error when running yaml.github-actions.security.curl-eval.curl-eval on /src/.github/actions/ai-review-cost/action.yml:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nrule yaml.github-actions.security.curl-eval.curl-eval: metavariable-pattern failed when parsing $SHELL's content as Bash: echo \"R`TE Generating cost optimization report...\"\n\ncd ai-reviews/cost\n\n# Create markdown report\ncat > cost-review.md << EOF\n# R`Sq AI Cost Optimization Review Report\n\n**Analysis Date**: $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\n**Cost Score**: $([ -f \"cost-analysis-ai.json\" ] && jq -r '.cost_score // \"N/A\"' cost-analysis-ai.json || echo \"N/A\")/10\n**Optimization Level**: $([ -f \"cost-analysis-ai.json\" ] && jq -r '.optimization_level // \"UNKNOWN\"' cost-analysis-ai.json || echo \"UNKNOWN\")\n**Savings Potential**: $([ -f \"cost-analysis-ai.json\" ] && jq -r '.total_savings_potential // \"Review needed\"' cost-analysis-ai.json || echo \"Review needed\")\n\n## High-Impact Cost Savings Opportunities\n$([ -f \"cost-analysis-ai.json\" ] && jq -r '.high_impact_savings[]? | \"### \\(.title)\\n**Description**: \\(.description)\\n**Implementation**: \\(.implementation)\\n**Estimated Savings**: \\(.estimated_savings)\\n**Effort**: \\(.effort)\\n\"' cost-analysis-ai.json || echo \"None identified\")\n\n## Medium-Impact Optimizations\n$([ -f \"cost-analysis-ai.json\" ] && jq -r '.medium_impact_optimizations[]? | \"- **\\(.title)**: \\(.description) (Savings: \\(.estimated_savings))\"' cost-analysis-ai.json || echo \"None identified\")\n\n## Cost Monitoring Recommendations\n$([ -f \"cost-analysis-ai.json\" ] && jq -r '.monitoring_recommendations[]? | \"- \\(.)\"' cost-analysis-ai.json || echo \"Manual review recommended\")\n\n## Summary\n$([ -f \"cost-analysis-ai.json\" ] && jq -r '.summary // \"Cost optimization analysis completed\"' cost-analysis-ai.json || echo \"Cost optimization analysis completed\")\n\n---\n*Generated by AI Cost Optimization Assistant*\nEOF\n","path":"/src/.github/actions/ai-review-cost/action.yml"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"yaml.github-actions.security.curl-eval.curl-eval","message":"Internal matching error when running yaml.github-actions.security.curl-eval.curl-eval on /src/.github/actions/container-tests/action.yml:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nrule yaml.github-actions.security.curl-eval.curl-eval: metavariable-pattern failed when parsing $SHELL's content as Bash: echo \"R`Te Test results summary:\"\n\n# Create simple test summary without heredoc to avoid YAML issues\necho \"# Container Test Results\" > test-summary.md\necho \"\" >> test-summary.md\necho \"Test Type: ${{ inputs.test-type }}\" >> test-summary.md\necho \"Fail Fast: ${{ inputs.fail-fast }}\" >> test-summary.md\necho \"\" >> test-summary.md\n\n# Add results for each test type\nif [ \"${{ inputs.test-type }}\" = \"unit\" ] || [ \"${{ inputs.test-type }}\" = \"all\" ]; then\n  echo \"Unit Tests: \\$([ \\\"\\${unit_exit_code:-0}\\\" -eq 0 ] && echo \\\"PASSED\\\" || echo \\\"FAILED\\\")\" >> test-summary.md\nfi\n\nif [ \"${{ inputs.test-type }}\" = \"integration\" ] || [ \"${{ inputs.test-type }}\" = \"all\" ]; then\n  echo \"Integration Tests: \\$([ \\\"\\${integration_exit_code:-0}\\\" -eq 0 ] && echo \\\"PASSED\\\" || echo \\\"FAILED\\\")\" >> test-summary.md\nfi\n\nif [ \"${{ inputs.test-type }}\" = \"smoke\" ] || [ \"${{ inputs.test-type }}\" = \"all\" ]; then\n  echo \"Smoke Tests: \\$([ \\\"\\${smoke_exit_code:-0}\\\" -eq 0 ] && echo \\\"PASSED\\\" || echo \\\"FAILED\\\")\" >> test-summary.md\nfi\n\necho \"\" >> test-summary.md\necho \"Generated at: \\$(date -u)\" >> test-summary.md\n\ncat test-summary.md\n","path":"/src/.github/actions/container-tests/action.yml"},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-cost/action.yml","start":{"line":32,"col":18,"offset":885},"end":{"line":54,"col":4,"offset":1838}}]],"message":"Syntax error at line /src/.github/actions/ai-review-cost/action.yml:32:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Sq Preparing cost review context...\"\nmkdir -p ai-reviews/cost\n\n# Collect cost-relevant file changes\nif [ \"${{ github.event_name }}\" = \"pull_request\" ]; then\n  echo \"Collecting infrastructure changes for cost review...\"\n\n  # Get infrastructure and config changes\n  git diff --name-only origin/${{ github.base_ref }}...HEAD \\\n    | grep -E '\\.(tf|tfvars|yml|yaml|json)$|docker|infra|config' \\\n    > ai-reviews/cost/changed-files.txt || true\n\n  # Extract infrastructure changes\n  git diff origin/${{ github.base_ref }}...HEAD \\\n    --unified=10 \\\n    -- '*.tf' '*.tfvars' '*.yml' '*.yaml' 'docker-compose*' 'Dockerfile*' \\\n    > ai-reviews/cost/infrastructure-changes.diff\nelse\n  echo \"Collecting full infrastructure for cost review...\"\n  find . -type f \\( -name \"*.tf\" -o -name \"*.tfvars\" -o -name \"*.yml\" -o -name \"*.yaml\" -o -name \"docker-compose*\" -o -name \"Dockerfile*\" \\) \\\n    -not -path \"./.git/*\" \\\n    > ai-reviews/cost/all-infra-files.txt\nfi\n` was unexpected","path":"/src/.github/actions/ai-review-cost/action.yml","spans":[{"file":"/src/.github/actions/ai-review-cost/action.yml","start":{"line":32,"col":18,"offset":885},"end":{"line":54,"col":4,"offset":1838}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-cost/action.yml","start":{"line":59,"col":18,"offset":2077},"end":{"line":98,"col":5,"offset":3505}}]],"message":"Syntax error at line /src/.github/actions/ai-review-cost/action.yml:59:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TK Collecting cost analysis results for AI review...\"\n\n# Collect cost artifacts if they exist\nif [ -d \"cost-analysis\" ]; then\n  cp -r cost-analysis/* ai-reviews/cost/ 2>/dev/null || true\nfi\n\n# Collect usage estimates\nif [ -f \"infra/usage-estimates.yml\" ]; then\n  cp infra/usage-estimates.yml ai-reviews/cost/\nfi\n\n# Create cost context summary\ncat > ai-reviews/cost/context.md << EOF\n# Cost Review Context\n\n**Review Type**: ${{ github.event_name }}\n**Repository**: ${{ github.repository }}\n**Branch**: ${{ github.ref }}\n**Commit**: ${{ github.sha }}\n**Date**: $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\n\n## Available Cost Data\n- Infracost analysis: $([ -f \"ai-reviews/cost/current.json\" ] && echo \"Available\" || echo \"Not available\")\n- Cost diff: $([ -f \"ai-reviews/cost/diff.json\" ] && echo \"Available\" || echo \"Not available\")\n- Usage estimates: $([ -f \"ai-reviews/cost/usage-estimates.yml\" ] && echo \"Available\" || echo \"Not available\")\n- Infrastructure changes: $([ -f \"ai-reviews/cost/infrastructure-changes.diff\" ] && echo \"Available\" || echo \"Full infrastructure review\")\n\n## Focus Areas for Cost Review\n1. Resource rightsizing (CPU, memory, storage)\n2. Auto-scaling configuration\n3. Reserved vs on-demand pricing\n4. Storage optimization\n5. Network costs\n6. Redundancy vs cost balance\n7. Environment-specific sizing\n8. Cost monitoring and alerting\n9. Serverless vs container cost efficiency\n10. Data transfer optimization\nEOF\n` was unexpected","path":"/src/.github/actions/ai-review-cost/action.yml","spans":[{"file":"/src/.github/actions/ai-review-cost/action.yml","start":{"line":59,"col":18,"offset":2077},"end":{"line":98,"col":5,"offset":3505}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-cost/action.yml","start":{"line":106,"col":18,"offset":3926},"end":{"line":347,"col":4,"offset":12432}}]],"message":"Syntax error at line /src/.github/actions/ai-review-cost/action.yml:106:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`eW Checking AI cost review configuration...\"\n\n# Check if OpenAI API key is provided\nif [ -z \"${{ inputs.openai-api-key }}\" ]; then\n  echo \"OpenAI API key not provided - AI review disabled\"\n  echo \"Using Copilot PR reviews instead for AI-powered analysis\"\n\n  # Create placeholder results\n  mkdir -p ai-reviews/cost\n  cat > ai-reviews/cost/cost-analysis-ai.json << EOF\n{\n  \"cost_score\": 5,\n  \"optimization_level\": \"FAIR\",\n  \"high_impact_savings\": [],\n  \"medium_impact_optimizations\": [],\n  \"monitoring_recommendations\": [\"Use GitHub Copilot PR reviews for AI-powered cost analysis\"],\n  \"total_savings_potential\": \"Use Copilot for analysis\",\n  \"summary\": \"AI cost review disabled - using Copilot PR reviews for AI analysis\"\n}\nEOF\n\n  echo \"cost-score=5\" >> $GITHUB_OUTPUT\n  echo \"savings-potential=Use Copilot for analysis\" >> $GITHUB_OUTPUT\n  exit 0\nfi\n\n# Create Python script for AI cost analysis\ncat > ai-reviews/cost/cost_review.py << 'EOF'\nimport os\nimport json\nimport requests\nimport sys\nimport yaml\nfrom datetime import datetime\n\ndef read_file_safe(filepath):\n    \"\"\"Safely read file content with encoding handling\"\"\"\n    try:\n        with open(filepath, 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        return f\"Error reading {filepath}: {str(e)}\"\n\ndef read_json_safe(filepath):\n    \"\"\"Safely read JSON file\"\"\"\n    try:\n        with open(filepath, 'r') as f:\n            return json.load(f)\n    except Exception as e:\n        return {\"error\": f\"Could not read {filepath}: {str(e)}\"}\n\ndef analyze_cost_optimization(changes_content, cost_data, context):\n    \"\"\"Perform AI cost optimization analysis\"\"\"\n\n    system_prompt = \"\"\"You are a senior cloud cost optimization engineer.\n    Analyze the provided infrastructure changes, cost data, and context to identify cost optimization opportunities.\n\n    Focus on:\n    1. Resource rightsizing opportunities\n    2. Auto-scaling configuratio... (truncated 6591 more characters)","path":"/src/.github/actions/ai-review-cost/action.yml","spans":[{"file":"/src/.github/actions/ai-review-cost/action.yml","start":{"line":106,"col":18,"offset":3926},"end":{"line":347,"col":4,"offset":12432}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":36,"col":9,"offset":912},"end":{"line":36,"col":28,"offset":931}},{"path":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":40,"col":31,"offset":912},"end":{"line":40,"col":34,"offset":915}},{"path":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":45,"col":19,"offset":912},"end":{"line":45,"col":22,"offset":915}}]],"message":"Syntax error at line /src/.github/actions/ai-review-operations/action.yml:36:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ github.event_name` was unexpected","path":"/src/.github/actions/ai-review-operations/action.yml","spans":[{"file":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":36,"col":9,"offset":912},"end":{"line":36,"col":28,"offset":931}},{"file":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":40,"col":31,"offset":912},"end":{"line":40,"col":34,"offset":915}},{"file":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":45,"col":19,"offset":912},"end":{"line":45,"col":22,"offset":915}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":59,"col":18,"offset":2178},"end":{"line":128,"col":5,"offset":4896}}]],"message":"Syntax error at line /src/.github/actions/ai-review-operations/action.yml:59:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TK Collecting operational metrics and configurations...\"\n\n# Collect available operational data\nif [ -d \"security-results\" ]; then\n  cp -r security-results/* ai-reviews/operations/ 2>/dev/null || true\nfi\n\nif [ -d \"cost-analysis\" ]; then\n  cp -r cost-analysis/* ai-reviews/operations/ 2>/dev/null || true\nfi\n\n# Analyze project structure for ops readiness\ncat > ai-reviews/operations/project-analysis.txt << EOF\n# Project Structure Analysis\n\n## Container Configuration\nDocker Compose Files: $(find . -name \"docker-compose*.yml\" -o -name \"docker-compose*.yaml\" | wc -l)\nDockerfiles: $(find . -name \"Dockerfile*\" | wc -l)\n\n## Infrastructure as Code\nTerraform Files: $(find . -name \"*.tf\" | wc -l)\nEnvironment Configs: $(find . -name \"*.tfvars\" | wc -l)\n\n## CI/CD Configuration\nGitHub Actions: $(find .github/workflows -name \"*.yml\" -o -name \"*.yaml\" 2>/dev/null | wc -l)\nScripts: $(find scripts -name \"*.sh\" 2>/dev/null | wc -l)\n\n## Documentation\nREADME Files: $(find . -name \"README*\" | wc -l)\nDocs Directory: $([ -d \"docs\" ] && echo \"Present\" || echo \"Missing\")\n\n## Monitoring/Observability\nLogging Config: $(grep -r \"logging\\|log\" . --include=\"*.yml\" --include=\"*.yaml\" --include=\"*.json\" 2>/dev/null | wc -l)\nHealth Checks: $(grep -r \"health\\|readiness\\|liveness\" . --include=\"*.yml\" --include=\"*.yaml\" --include=\"*.json\" 2>/dev/null | wc -l)\n\n## Testing\nTest Files: $(find . -name \"*test*\" -type f | wc -l)\nTest Configs: $(find . -name \"pytest.ini\" -o -name \"conftest.py\" -o -name \"jest.config*\" | wc -l)\nEOF\n\n# Create operations context summary\ncat > ai-reviews/operations/context.md << EOF\n# Operations Review Context\n\n**Review Type**: ${{ github.event_name }}\n**Repository**: ${{ github.repository }}\n**Branch**: ${{ github.ref }}\n**Commit**: ${{ github.sha }}\n**Date**: $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\n\n## Available Operations Data\n- Infrastructure changes: $([ -f \"ai-reviews/operations/operational-changes.diff\" ] && e... (truncated 803 more characters)","path":"/src/.github/actions/ai-review-operations/action.yml","spans":[{"file":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":59,"col":18,"offset":2178},"end":{"line":128,"col":5,"offset":4896}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":136,"col":18,"offset":5507},"end":{"line":374,"col":4,"offset":13997}}]],"message":"Syntax error at line /src/.github/actions/ai-review-operations/action.yml:136:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`eW Checking AI operations review configuration...\"\n\n# Check if OpenAI API key is provided\nif [ -z \"${{ inputs.openai-api-key }}\" ]; then\n  echo \"OpenAI API key not provided - AI review disabled\"\n  echo \"Using Copilot PR reviews instead for AI-powered analysis\"\n\n  # Create placeholder results\n  mkdir -p ai-reviews/operations\n  cat > ai-reviews/operations/operations-analysis.json << EOF\n{\n  \"ops_score\": 5,\n  \"reliability_score\": 5,\n  \"readiness_level\": \"BASIC\",\n  \"critical_issues\": [],\n  \"improvements\": [],\n  \"best_practices\": [\"Use GitHub Copilot PR reviews for AI-powered operations analysis\"],\n  \"monitoring_gaps\": [\"Use Copilot for analysis\"],\n  \"documentation_needs\": [\"Use Copilot for analysis\"],\n  \"summary\": \"AI operations review disabled - using Copilot PR reviews for AI analysis\"\n}\nEOF\n\n  echo \"ops-score=5\" >> $GITHUB_OUTPUT\n  echo \"reliability-score=5\" >> $GITHUB_OUTPUT\n  exit 0\nfi\n\n# Create Python script for AI operations analysis\ncat > ai-reviews/operations/operations_review.py << 'EOF'\nimport os\nimport json\nimport requests\nimport sys\nfrom datetime import datetime\n\ndef read_file_safe(filepath):\n    \"\"\"Safely read file content with encoding handling\"\"\"\n    try:\n        with open(filepath, 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        return f\"Error reading {filepath}: {str(e)}\"\n\ndef analyze_operations_readiness(changes_content, project_analysis, context):\n    \"\"\"Perform AI operations readiness analysis\"\"\"\n\n    system_prompt = \"\"\"You are a senior DevOps/SRE engineer conducting an operations readiness review.\n    Analyze the provided configuration changes, project structure, and context to assess operational readiness and reliability.\n\n    Focus on:\n    1. Deployment automation and reliability\n    2. Monitoring, logging, and observability\n    3. Backup and disaster recovery planning\n    4. Auto-scaling and performance optimization\n    5. Configur... (truncated 6575 more characters)","path":"/src/.github/actions/ai-review-operations/action.yml","spans":[{"file":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":136,"col":18,"offset":5507},"end":{"line":374,"col":4,"offset":13997}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":379,"col":18,"offset":15761},"end":{"line":412,"col":5,"offset":17701}}]],"message":"Syntax error at line /src/.github/actions/ai-review-operations/action.yml:379:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TE Generating operations readiness report...\"\n\ncd ai-reviews/operations\n\n# Create markdown report\ncat > operations-review.md << EOF\n# AI Operations Review Report\n\n**Analysis Date**: $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\n**Operations Score**: $([ -f \"operations-analysis.json\" ] && jq -r '.ops_score // \"N/A\"' operations-analysis.json || echo \"N/A\")/10\n**Reliability Score**: $([ -f \"operations-analysis.json\" ] && jq -r '.reliability_score // \"N/A\"' operations-analysis.json || echo \"N/A\")/10\n**Readiness Level**: $([ -f \"operations-analysis.json\" ] && jq -r '.readiness_level // \"UNKNOWN\"' operations-analysis.json || echo \"UNKNOWN\")\n\n## Critical Operational Issues\n$([ -f \"operations-analysis.json\" ] && jq -r '.critical_issues[]? | \"### \\(.title)\\n**Description**: \\(.description)\\n**Impact**: \\(.impact)\\n**Location**: \\(.location)\\n**Recommendation**: \\(.recommendation)\\n\"' operations-analysis.json || echo \"None identified\")\n\n## Operational Improvements\n$([ -f \"operations-analysis.json\" ] && jq -r '.improvements[]? | \"### \\(.title) (Priority: \\(.priority))\\n**Description**: \\(.description)\\n**Benefit**: \\(.benefit)\\n**Implementation**: \\(.implementation)\\n\"' operations-analysis.json || echo \"None identified\")\n\n## Monitoring Gaps\n$([ -f \"operations-analysis.json\" ] && jq -r '.monitoring_gaps[]? | \"- \\(.)\"' operations-analysis.json || echo \"Analysis needed\")\n\n## Documentation Needs\n$([ -f \"operations-analysis.json\" ] && jq -r '.documentation_needs[]? | \"- \\(.)\"' operations-analysis.json || echo \"Review needed\")\n\n## Best Practices Recommendations\n$([ -f \"operations-analysis.json\" ] && jq -r '.best_practices[]? | \"- \\(.)\"' operations-analysis.json || echo \"Manual review recommended\")\n\n## Summary\n$([ -f \"operations-analysis.json\" ] && jq -r '.summary // \"Operations readiness analysis completed\"' operations-analysis.json || echo \"Operations readiness analysis completed\")\n\n---\n*Generated by AI Operations Assist... (truncated 25 more characters)","path":"/src/.github/actions/ai-review-operations/action.yml","spans":[{"file":"/src/.github/actions/ai-review-operations/action.yml","start":{"line":379,"col":18,"offset":15761},"end":{"line":412,"col":5,"offset":17701}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-security/action.yml","start":{"line":36,"col":9,"offset":887},"end":{"line":36,"col":28,"offset":906}},{"path":"/src/.github/actions/ai-review-security/action.yml","start":{"line":40,"col":31,"offset":887},"end":{"line":40,"col":34,"offset":890}},{"path":"/src/.github/actions/ai-review-security/action.yml","start":{"line":43,"col":19,"offset":887},"end":{"line":43,"col":22,"offset":890}}]],"message":"Syntax error at line /src/.github/actions/ai-review-security/action.yml:36:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ github.event_name` was unexpected","path":"/src/.github/actions/ai-review-security/action.yml","spans":[{"file":"/src/.github/actions/ai-review-security/action.yml","start":{"line":36,"col":9,"offset":887},"end":{"line":36,"col":28,"offset":906}},{"file":"/src/.github/actions/ai-review-security/action.yml","start":{"line":40,"col":31,"offset":887},"end":{"line":40,"col":34,"offset":890}},{"file":"/src/.github/actions/ai-review-security/action.yml","start":{"line":43,"col":19,"offset":887},"end":{"line":43,"col":22,"offset":890}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-security/action.yml","start":{"line":91,"col":20,"offset":2065},"end":{"line":91,"col":39,"offset":2084}},{"path":"/src/.github/actions/ai-review-security/action.yml","start":{"line":92,"col":19,"offset":2065},"end":{"line":92,"col":38,"offset":2084}},{"path":"/src/.github/actions/ai-review-security/action.yml","start":{"line":93,"col":15,"offset":2065},"end":{"line":93,"col":27,"offset":2077}},{"path":"/src/.github/actions/ai-review-security/action.yml","start":{"line":94,"col":15,"offset":2065},"end":{"line":94,"col":27,"offset":2077}}]],"message":"Syntax error at line /src/.github/actions/ai-review-security/action.yml:91:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ github.event_name` was unexpected","path":"/src/.github/actions/ai-review-security/action.yml","spans":[{"file":"/src/.github/actions/ai-review-security/action.yml","start":{"line":91,"col":20,"offset":2065},"end":{"line":91,"col":39,"offset":2084}},{"file":"/src/.github/actions/ai-review-security/action.yml","start":{"line":92,"col":19,"offset":2065},"end":{"line":92,"col":38,"offset":2084}},{"file":"/src/.github/actions/ai-review-security/action.yml","start":{"line":93,"col":15,"offset":2065},"end":{"line":93,"col":27,"offset":2077}},{"file":"/src/.github/actions/ai-review-security/action.yml","start":{"line":94,"col":15,"offset":2065},"end":{"line":94,"col":27,"offset":2077}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-security/action.yml","start":{"line":119,"col":18,"offset":3911},"end":{"line":337,"col":4,"offset":11420}}]],"message":"Syntax error at line /src/.github/actions/ai-review-security/action.yml:119:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`eW Checking AI security review configuration...\"\n\n# Check if OpenAI API key is provided\nif [ -z \"${{ inputs.openai-api-key }}\" ]; then\n  echo \"OpenAI API key not provided - AI review disabled\"\n  echo \"Using Copilot PR reviews instead for AI-powered analysis\"\n\n  # Create placeholder results\n  mkdir -p ai-reviews/security\n  cat > ai-reviews/security/security-analysis.json << EOF\n{\n  \"security_score\": 5,\n  \"risk_level\": \"MEDIUM\",\n  \"critical_findings\": [],\n  \"medium_findings\": [],\n  \"best_practices\": [\"Use GitHub Copilot PR reviews for AI-powered security analysis\"],\n  \"summary\": \"AI security review disabled - using Copilot PR reviews for AI analysis\"\n}\nEOF\n\n  echo \"security-score=5\" >> $GITHUB_OUTPUT\n  echo \"recommendations={\\\"summary\\\": \\\"AI review disabled - using Copilot PR reviews\\\"}\" >> $GITHUB_OUTPUT\n  exit 0\nfi\n\n# Create Python script for AI analysis\ncat > ai-reviews/security/security_review.py << 'EOF'\nimport os\nimport json\nimport requests\nimport sys\nfrom datetime import datetime\n\ndef read_file_safe(filepath):\n    \"\"\"Safely read file content with encoding handling\"\"\"\n    try:\n        with open(filepath, 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        return f\"Error reading {filepath}: {str(e)}\"\n\ndef analyze_security(changes_content, scan_results, context):\n    \"\"\"Perform AI security analysis\"\"\"\n\n    system_prompt = \"\"\"You are a senior security engineer conducting a comprehensive security review.\n    Analyze the provided code changes, security scan results, and context to identify security risks and provide actionable recommendations.\n\n    Focus on:\n    1. Authentication/Authorization flaws\n    2. Input validation issues\n    3. Cryptographic weaknesses\n    4. Infrastructure misconfigurations\n    5. Dependency vulnerabilities\n    6. Secrets exposure\n    7. API security issues\n    8. Container security concerns\n\n    Provide:\n    1. A security risk s... (truncated 5594 more characters)","path":"/src/.github/actions/ai-review-security/action.yml","spans":[{"file":"/src/.github/actions/ai-review-security/action.yml","start":{"line":119,"col":18,"offset":3911},"end":{"line":337,"col":4,"offset":11420}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/ai-review-security/action.yml","start":{"line":342,"col":18,"offset":13014},"end":{"line":387,"col":5,"offset":14532}}]],"message":"Syntax error at line /src/.github/actions/ai-review-security/action.yml:342:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TE Generating security review report...\"\n\ncd ai-reviews/security\n\n# Create markdown report\nreport_timestamp=\"$(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\"\n\n# Extract security data\nif [ -f \"security-analysis.json\" ]; then\n  security_score=\"$(jq -r '.security_score // \"N/A\"' security-analysis.json)\"\n  risk_level=\"$(jq -r '.risk_level // \"UNKNOWN\"' security-analysis.json)\"\n  critical_findings=\"$(jq -r '.critical_findings[]? | \"- **\\(.title)**: \\(.description) (Location: \\(.location))\"' security-analysis.json)\" || critical_findings=\"None identified\"\n  medium_findings=\"$(jq -r '.medium_findings[]? | \"- **\\(.title)**: \\(.description) (Location: \\(.location))\"' security-analysis.json)\" || medium_findings=\"None identified\"\n  best_practices=\"$(jq -r '.best_practices[]? | \"- \\(.)\"' security-analysis.json)\" || best_practices=\"Manual review recommended\"\n  summary=\"$(jq -r '.summary // \"Security analysis completed\"' security-analysis.json)\"\nelse\n  security_score=\"N/A\"\n  risk_level=\"UNKNOWN\"\n  critical_findings=\"None identified\"\n  medium_findings=\"None identified\"\n  best_practices=\"Manual review recommended\"\n  summary=\"Security analysis completed\"\nfi\n\ncat > security-review.md << EOF\n# AI Security Review Report\n\n**Analysis Date**: $report_timestamp\n**Security Score**: $security_score\n**Risk Level**: $risk_level\n\n## Critical Findings\n$critical_findings\n\n## Medium Priority Findings\n$medium_findings\n\n## Security Recommendations\n$best_practices\n\n## Summary\n$summary\n\n---\n*Generated by AI Security Review Assistant*\nEOF\n` was unexpected","path":"/src/.github/actions/ai-review-security/action.yml","spans":[{"file":"/src/.github/actions/ai-review-security/action.yml","start":{"line":342,"col":18,"offset":13014},"end":{"line":387,"col":5,"offset":14532}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":37,"col":12,"offset":1015},"end":{"line":37,"col":37,"offset":1040}},{"path":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":39,"col":13,"offset":1015},"end":{"line":39,"col":34,"offset":1036}},{"path":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":50,"col":15,"offset":1015},"end":{"line":50,"col":40,"offset":1040}},{"path":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":55,"col":12,"offset":1015},"end":{"line":55,"col":35,"offset":1038}},{"path":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":57,"col":14,"offset":1015},"end":{"line":57,"col":37,"offset":1038}},{"path":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":60,"col":14,"offset":1015},"end":{"line":60,"col":37,"offset":1038}}]],"message":"Syntax error at line /src/.github/actions/cleanup-ephemeral/action.yml:37:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ inputs.environment-name` was unexpected","path":"/src/.github/actions/cleanup-ephemeral/action.yml","spans":[{"file":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":37,"col":12,"offset":1015},"end":{"line":37,"col":37,"offset":1040}},{"file":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":39,"col":13,"offset":1015},"end":{"line":39,"col":34,"offset":1036}},{"file":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":50,"col":15,"offset":1015},"end":{"line":50,"col":40,"offset":1040}},{"file":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":55,"col":12,"offset":1015},"end":{"line":55,"col":35,"offset":1038}},{"file":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":57,"col":14,"offset":1015},"end":{"line":57,"col":37,"offset":1038}},{"file":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":60,"col":14,"offset":1015},"end":{"line":60,"col":37,"offset":1038}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":73,"col":18,"offset":2462},"end":{"line":94,"col":52,"offset":3170}}]],"message":"Syntax error at line /src/.github/actions/cleanup-ephemeral/action.yml:73:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`UQ Logging into Azure...\"\n\n# Parse Azure credentials\nCLIENT_ID=$(echo $AZURE_CREDENTIALS | jq -r '.clientId')\nCLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r '.clientSecret')\nSUBSCRIPTION_ID=$(echo $AZURE_CREDENTIALS | jq -r '.subscriptionId')\nTENANT_ID=$(echo $AZURE_CREDENTIALS | jq -r '.tenantId')\n\n# Login to Azure\ndocker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  mcr.microsoft.com/azure-cli:latest \\\n  az login --service-principal \\\n  --username \"$CLIENT_ID\" \\\n  --password \"$CLIENT_SECRET\" \\\n  --tenant \"$TENANT_ID\"\n\n# Set subscription\ndocker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  mcr.microsoft.com/azure-cli:latest \\\n  az account set --subscription \"$SUBSCRIPTION_ID\"\n` was unexpected","path":"/src/.github/actions/cleanup-ephemeral/action.yml","spans":[{"file":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":73,"col":18,"offset":2462},"end":{"line":94,"col":52,"offset":3170}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":119,"col":37,"offset":3396},"end":{"line":119,"col":58,"offset":3417}}]],"message":"Syntax error at line /src/.github/actions/cleanup-ephemeral/action.yml:119:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ github.event.number` was unexpected","path":"/src/.github/actions/cleanup-ephemeral/action.yml","spans":[{"file":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":119,"col":37,"offset":3396},"end":{"line":119,"col":58,"offset":3417}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":138,"col":18,"offset":4827},"end":{"line":163,"col":56,"offset":5701}}]],"message":"Syntax error at line /src/.github/actions/cleanup-ephemeral/action.yml:138:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TK Inventorying resources before cleanup...\"\n\ntotal_resources=0\n\nwhile IFS= read -r rg_name; do\n  if [ -n \"$rg_name\" ]; then\n    echo \"Inventorying resources in: $rg_name\"\n\n    # List resources in the resource group\n    docker run --rm \\\n      mcr.microsoft.com/azure-cli:latest \\\n      az resource list \\\n      --resource-group \"$rg_name\" \\\n      --output table > \"cleanup-logs/resources-${rg_name}.txt\" 2>/dev/null || true\n\n    # Count resources\n    if [ -f \"cleanup-logs/resources-${rg_name}.txt\" ]; then\n      resource_count=$(tail -n +3 \"cleanup-logs/resources-${rg_name}.txt\" | wc -l)\n      total_resources=$((total_resources + resource_count))\n      echo \"Found $resource_count resources in $rg_name\"\n    fi\n  fi\ndone < cleanup-logs/resource-groups.txt\n\necho \"TOTAL_RESOURCES=$total_resources\" >> $GITHUB_ENV\necho \"Total resources to be deleted: $total_resources\"\n` was unexpected","path":"/src/.github/actions/cleanup-ephemeral/action.yml","spans":[{"file":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":138,"col":18,"offset":4827},"end":{"line":163,"col":56,"offset":5701}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":169,"col":18,"offset":5964},"end":{"line":251,"col":5,"offset":8540}}]],"message":"Syntax error at line /src/.github/actions/cleanup-ephemeral/action.yml:169:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`hz Starting cleanup of ephemeral resources...\"\n\ncleaned_up=false\nresources_deleted=0\ncleanup_errors=0\n\nwhile IFS= read -r rg_name; do\n  if [ -n \"$rg_name\" ]; then\n    echo \"Cleaning up resource group: $rg_name\"\n\n    # Check if resource group exists\n    if docker run --rm \\\n      mcr.microsoft.com/azure-cli:latest \\\n      az group show --name \"$rg_name\" --output none 2>/dev/null; then\n\n      echo \"Deleting resource group: $rg_name\"\n\n      # Delete the resource group and all its resources\n      if docker run --rm \\\n        mcr.microsoft.com/azure-cli:latest \\\n        az group delete \\\n        --name \"$rg_name\" \\\n        --yes \\\n        --no-wait; then\n\n        echo \"Initiated deletion of resource group: $rg_name\"\n        cleaned_up=true\n\n        # Count resources from inventory\n        if [ -f \"cleanup-logs/resources-${rg_name}.txt\" ]; then\n          rg_resources=$(tail -n +3 \"cleanup-logs/resources-${rg_name}.txt\" | wc -l)\n          resources_deleted=$((resources_deleted + rg_resources))\n        fi\n\n      else\n        echo \"Failed to delete resource group: $rg_name\"\n        cleanup_errors=$((cleanup_errors + 1))\n      fi\n    else\n      echo \"Resource group not found: $rg_name\"\n    fi\n  fi\ndone < cleanup-logs/resource-groups.txt\n\n# Handle case where no resource groups were found\nif [ ! -s cleanup-logs/resource-groups.txt ]; then\n  echo \"No resource groups found to cleanup\"\n\n  if [ \"${{ inputs.force-cleanup }}\" = \"true\" ]; then\n    echo \"Force cleanup enabled, marking as cleaned up\"\n    cleaned_up=true\n  fi\nfi\n\necho \"Cleanup Summary:\"\necho \"- Cleaned up: $cleaned_up\"\necho \"- Resources deleted: $resources_deleted\"\necho \"- Cleanup errors: $cleanup_errors\"\n\necho \"cleaned-up=$cleaned_up\" >> $GITHUB_OUTPUT\necho \"resources-deleted=$resources_deleted\" >> $GITHUB_OUTPUT\n\n# Create cleanup summary\ncat > cleanup-logs/summary.md << EOF\n# Cleanup Summary\n\n**Date**: $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\n**PR**: #$... (truncated 661 more characters)","path":"/src/.github/actions/cleanup-ephemeral/action.yml","spans":[{"file":"/src/.github/actions/cleanup-ephemeral/action.yml","start":{"line":169,"col":18,"offset":5964},"end":{"line":251,"col":5,"offset":8540}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/container-tests/action.yml","start":{"line":30,"col":18,"offset":784},"end":{"line":32,"col":59,"offset":923}}]],"message":"Syntax error at line /src/.github/actions/container-tests/action.yml:30:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`QN Setting up Python test environment...\"\npython -m pip install --upgrade pip\npip install pytest pytest-cov pytest-asyncio pytest-xdist\n` was unexpected","path":"/src/.github/actions/container-tests/action.yml","spans":[{"file":"/src/.github/actions/container-tests/action.yml","start":{"line":30,"col":18,"offset":784},"end":{"line":32,"col":59,"offset":923}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/container-tests/action.yml","start":{"line":37,"col":18,"offset":1027},"end":{"line":56,"col":22,"offset":1719}}]],"message":"Syntax error at line /src/.github/actions/container-tests/action.yml:37:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Tg Installing container dependencies...\"\n\n# Install each container's dependencies\nfor container in content-collector content-processor content-ranker content-enricher content-generator site-generator markdown-generator collector-scheduler; do\n  if [ -f \"containers/$container/requirements.txt\" ]; then\n    echo \"Installing dependencies for $container...\"\n    pip install -r containers/$container/requirements.txt\n  else\n    echo \"No requirements.txt found for $container\"\n  fi\ndone\n\n# Install shared libs\nif [ -f \"libs/requirements.txt\" ]; then\n  echo \"Installing shared libs dependencies...\"\n  pip install -r libs/requirements.txt\nfi\n\n# Install libs in editable mode\npip install -e libs/\n` was unexpected","path":"/src/.github/actions/container-tests/action.yml","spans":[{"file":"/src/.github/actions/container-tests/action.yml","start":{"line":37,"col":18,"offset":1027},"end":{"line":56,"col":22,"offset":1719}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/container-tests/action.yml","start":{"line":62,"col":18,"offset":1985},"end":{"line":79,"col":41,"offset":2398}}]],"message":"Syntax error at line /src/.github/actions/container-tests/action.yml:62:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`hk Running unit tests across all containers...\"\n\npytest_args=\"\"\nif [ \"${{ inputs.fail-fast }}\" = \"true\" ]; then\n  pytest_args=\"$pytest_args -x\"\nfi\n\n# Run unit tests with coverage\npython -m pytest \\\n  $pytest_args \\\n  -m unit \\\n  --cov=containers \\\n  --cov-report=xml:coverage-unit.xml \\\n  --cov-report=term-missing \\\n  --junit-xml=test-results-unit.xml \\\n  containers/\n\necho \"unit_exit_code=$?\" >> $GITHUB_ENV\n` was unexpected","path":"/src/.github/actions/container-tests/action.yml","spans":[{"file":"/src/.github/actions/container-tests/action.yml","start":{"line":62,"col":18,"offset":1985},"end":{"line":79,"col":41,"offset":2398}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/container-tests/action.yml","start":{"line":85,"col":18,"offset":2662},"end":{"line":103,"col":48,"offset":3120}}]],"message":"Syntax error at line /src/.github/actions/container-tests/action.yml:85:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`UX Running integration tests across all containers...\"\n\npytest_args=\"\"\nif [ \"${{ inputs.fail-fast }}\" = \"true\" ]; then\n  pytest_args=\"$pytest_args -x\"\nfi\n\n# Run integration tests\npython -m pytest \\\n  $pytest_args \\\n  -m integration \\\n  --cov=containers \\\n  --cov-append \\\n  --cov-report=xml:coverage-integration.xml \\\n  --cov-report=term-missing \\\n  --junit-xml=test-results-integration.xml \\\n  containers/\n\necho \"integration_exit_code=$?\" >> $GITHUB_ENV\n` was unexpected","path":"/src/.github/actions/container-tests/action.yml","spans":[{"file":"/src/.github/actions/container-tests/action.yml","start":{"line":85,"col":18,"offset":2662},"end":{"line":103,"col":48,"offset":3120}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/container-tests/action.yml","start":{"line":128,"col":9,"offset":3889},"end":{"line":128,"col":27,"offset":3907}}]],"message":"Syntax error at line /src/.github/actions/container-tests/action.yml:128:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ inputs.fail-fast` was unexpected","path":"/src/.github/actions/container-tests/action.yml","spans":[{"file":"/src/.github/actions/container-tests/action.yml","start":{"line":128,"col":9,"offset":3889},"end":{"line":128,"col":27,"offset":3907}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/container-tests/action.yml","start":{"line":145,"col":18,"offset":4449},"end":{"line":198,"col":4,"offset":5850}}]],"message":"Syntax error at line /src/.github/actions/container-tests/action.yml:145:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TK Evaluating test results...\"\n\noverall_success=true\n\n# Check unit tests\nif [ \"${{ inputs.test-type }}\" = \"unit\" ] || [ \"${{ inputs.test-type }}\" = \"all\" ]; then\n  if [ \"${unit_exit_code:-0}\" -ne 0 ]; then\n    echo \"Unit tests failed\"\n    overall_success=false\n  else\n    echo \"Unit tests passed\"\n  fi\nfi\n\n# Check integration tests\nif [ \"${{ inputs.test-type }}\" = \"integration\" ] || [ \"${{ inputs.test-type }}\" = \"all\" ]; then\n  if [ \"${integration_exit_code:-0}\" -ne 0 ]; then\n    echo \"Integration tests failed\"\n    overall_success=false\n  else\n    echo \"Integration tests passed\"\n  fi\nfi\n\n# Check smoke tests\nif [ \"${{ inputs.test-type }}\" = \"smoke\" ] || [ \"${{ inputs.test-type }}\" = \"all\" ]; then\n  if [ \"${smoke_exit_code:-0}\" -ne 0 ]; then\n    echo \"Smoke tests failed\"\n    overall_success=false\n  else\n    echo \"Smoke tests passed\"\n  fi\nfi\n\n# Check performance tests\nif [ \"${{ inputs.test-type }}\" = \"performance\" ] || [ \"${{ inputs.test-type }}\" = \"all\" ]; then\n  if [ \"${performance_exit_code:-0}\" -ne 0 ]; then\n    echo \"Performance tests had issues (non-blocking)\"\n  else\n    echo \"Performance tests passed\"\n  fi\nfi\n\nif [ \"$overall_success\" = \"true\" ]; then\n  echo \"All container tests passed\"\n  echo \"passed=true\" >> $GITHUB_OUTPUT\nelse\n  echo \"Some container tests failed\"\n  echo \"passed=false\" >> $GITHUB_OUTPUT\n\n  if [ \"${{ inputs.fail-fast }}\" = \"true\" ]; then\n    exit 1\n  fi\nfi\n` was unexpected","path":"/src/.github/actions/container-tests/action.yml","spans":[{"file":"/src/.github/actions/container-tests/action.yml","start":{"line":145,"col":18,"offset":4449},"end":{"line":198,"col":4,"offset":5850}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cost-analysis/action.yml","start":{"line":29,"col":18,"offset":731},"end":{"line":30,"col":24,"offset":803}}]],"message":"Syntax error at line /src/.github/actions/cost-analysis/action.yml:29:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Sq Setting up Infracost for cost analysis...\"\nmkdir -p cost-analysis\n` was unexpected","path":"/src/.github/actions/cost-analysis/action.yml","spans":[{"file":"/src/.github/actions/cost-analysis/action.yml","start":{"line":29,"col":18,"offset":731},"end":{"line":30,"col":24,"offset":803}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cost-analysis/action.yml","start":{"line":37,"col":18,"offset":969},"end":{"line":47,"col":55,"offset":1311}}]],"message":"Syntax error at line /src/.github/actions/cost-analysis/action.yml:37:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TK Generating cost baseline...\"\n\n# Generate cost breakdown for current infrastructure\ndocker run --rm \\\n  -v \"${{ github.workspace }}/infra\":/workspace \\\n  -e \"INFRACOST_API_KEY=$INFRACOST_API_KEY\" \\\n  infracost/infracost:latest \\\n  breakdown \\\n  --path /workspace \\\n  --format json \\\n  --out-file /workspace/../cost-analysis/current.json\n` was unexpected","path":"/src/.github/actions/cost-analysis/action.yml","spans":[{"file":"/src/.github/actions/cost-analysis/action.yml","start":{"line":37,"col":18,"offset":969},"end":{"line":47,"col":55,"offset":1311}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cost-analysis/action.yml","start":{"line":55,"col":18,"offset":1587},"end":{"line":72,"col":29,"offset":2112}}]],"message":"Syntax error at line /src/.github/actions/cost-analysis/action.yml:55:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TK Generating baseline cost for comparison...\"\n\n# Checkout baseline branch\ngit fetch origin ${{ inputs.baseline-branch }}\ngit checkout origin/${{ inputs.baseline-branch }} -- infra/\n\n# Generate baseline cost\ndocker run --rm \\\n  -v \"${{ github.workspace }}/infra\":/workspace \\\n  -e \"INFRACOST_API_KEY=$INFRACOST_API_KEY\" \\\n  infracost/infracost:latest \\\n  breakdown \\\n  --path /workspace \\\n  --format json \\\n  --out-file /workspace/../cost-analysis/baseline.json\n\n# Restore current branch files\ngit checkout HEAD -- infra/\n` was unexpected","path":"/src/.github/actions/cost-analysis/action.yml","spans":[{"file":"/src/.github/actions/cost-analysis/action.yml","start":{"line":55,"col":18,"offset":1587},"end":{"line":72,"col":29,"offset":2112}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cost-analysis/action.yml","start":{"line":83,"col":9,"offset":2416},"end":{"line":83,"col":27,"offset":2434}}]],"message":"Syntax error at line /src/.github/actions/cost-analysis/action.yml:83:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ github.workspace` was unexpected","path":"/src/.github/actions/cost-analysis/action.yml","spans":[{"file":"/src/.github/actions/cost-analysis/action.yml","start":{"line":83,"col":9,"offset":2416},"end":{"line":83,"col":27,"offset":2434}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cost-analysis/action.yml","start":{"line":96,"col":18,"offset":2916},"end":{"line":172,"col":5,"offset":5234}}]],"message":"Syntax error at line /src/.github/actions/cost-analysis/action.yml:96:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TI Analyzing cost impact...\"\n\ncurrent_monthly=0\nbaseline_monthly=0\ndiff_monthly=0\n\n# Extract current monthly cost\nif [ -f \"cost-analysis/current.json\" ]; then\n  current_monthly=\"$(jq -r '.totalMonthlyCost // \"0\"' cost-analysis/current.json)\"\nfi\n\n# Extract baseline and diff if PR\nif [ -f \"cost-analysis/baseline.json\" ] && [ -f \"cost-analysis/diff.json\" ]; then\n  baseline_monthly=\"$(jq -r '.totalMonthlyCost // \"0\"' cost-analysis/baseline.json)\"\n  diff_monthly=\"$(jq -r '.diffTotalMonthlyCost // \"0\"' cost-analysis/diff.json)\"\nfi\n\necho \"Current monthly cost: $current_monthly\"\necho \"Baseline monthly cost: $baseline_monthly\"\necho \"Monthly difference: $diff_monthly\"\n\n# Create impact summary\npercentage_change=\"$(echo \"scale=2; ($diff_monthly / $baseline_monthly) * 100\" | bc -l 2>/dev/null)\" || percentage_change=\"0\"\nanalysis_timestamp=\"$(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\"\n\nimpact_json=$(cat << EOF\n{\n  \"current_monthly\": \"$current_monthly\",\n  \"baseline_monthly\": \"$baseline_monthly\",\n  \"monthly_difference\": \"$diff_monthly\",\n  \"percentage_change\": \"$percentage_change\",\n  \"analysis_timestamp\": \"$analysis_timestamp\"\n}\nEOF\n)\n\necho \"impact=$impact_json\" >> \"$GITHUB_OUTPUT\"\necho \"monthly-diff=$diff_monthly\" >> \"$GITHUB_OUTPUT\"\n\n# Generate detailed report\nreport_timestamp=\"$(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\"\n\n# Evaluate cost impact\ndiff_positive=\"$(echo \"$diff_monthly > 0\" | bc -l 2>/dev/null)\" || diff_positive=\"0\"\ndiff_significant=\"$(echo \"$diff_monthly > 10\" | bc -l 2>/dev/null)\" || diff_significant=\"0\"\n\nif [ \"$diff_positive\" -eq 1 ]; then\n  impact_assessment=\"**COST INCREASE** - Review resource changes\"\nelse\n  impact_assessment=\"**COST NEUTRAL/DECREASE** - Changes look good\"\nfi\n\nif [ \"$diff_significant\" -eq 1 ]; then\n  recommendation=\"- Consider cost optimization before deployment\"\nelse\n  recommendation=\"- Cost impact is within acceptable range\"\nfi\n\ncat > cost-analysis/summary.md << EOF\n# Cost Analysis Report\n... (truncated 403 more characters)","path":"/src/.github/actions/cost-analysis/action.yml","spans":[{"file":"/src/.github/actions/cost-analysis/action.yml","start":{"line":96,"col":18,"offset":2916},"end":{"line":172,"col":5,"offset":5234}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/cost-analysis/action.yml","start":{"line":184,"col":11,"offset":5854},"end":{"line":184,"col":29,"offset":5872}},{"path":"/src/.github/actions/cost-analysis/action.yml","start":{"line":194,"col":11,"offset":5854},"end":{"line":194,"col":29,"offset":5872}}]],"message":"Syntax error at line /src/.github/actions/cost-analysis/action.yml:184:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ github.workspace` was unexpected","path":"/src/.github/actions/cost-analysis/action.yml","spans":[{"file":"/src/.github/actions/cost-analysis/action.yml","start":{"line":184,"col":11,"offset":5854},"end":{"line":184,"col":29,"offset":5872}},{"file":"/src/.github/actions/cost-analysis/action.yml","start":{"line":194,"col":11,"offset":5854},"end":{"line":194,"col":29,"offset":5872}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":41,"col":12,"offset":1144},"end":{"line":41,"col":37,"offset":1169}},{"path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":43,"col":13,"offset":1144},"end":{"line":43,"col":34,"offset":1165}},{"path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":44,"col":16,"offset":1144},"end":{"line":44,"col":28,"offset":1156}},{"path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":48,"col":15,"offset":1144},"end":{"line":48,"col":40,"offset":1169}},{"path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":55,"col":43,"offset":1144},"end":{"line":55,"col":73,"offset":1174}},{"path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":58,"col":28,"offset":1144},"end":{"line":58,"col":52,"offset":1168}}]],"message":"Syntax error at line /src/.github/actions/deploy-ephemeral/action.yml:41:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ inputs.environment-name` was unexpected","path":"/src/.github/actions/deploy-ephemeral/action.yml","spans":[{"file":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":41,"col":12,"offset":1144},"end":{"line":41,"col":37,"offset":1169}},{"file":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":43,"col":13,"offset":1144},"end":{"line":43,"col":34,"offset":1165}},{"file":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":44,"col":16,"offset":1144},"end":{"line":44,"col":28,"offset":1156}},{"file":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":48,"col":15,"offset":1144},"end":{"line":48,"col":40,"offset":1169}},{"file":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":55,"col":43,"offset":1144},"end":{"line":55,"col":73,"offset":1174}},{"file":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":58,"col":28,"offset":1144},"end":{"line":58,"col":52,"offset":1168}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":73,"col":18,"offset":2465},"end":{"line":94,"col":52,"offset":3173}}]],"message":"Syntax error at line /src/.github/actions/deploy-ephemeral/action.yml:73:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`UQ Logging into Azure...\"\n\n# Parse Azure credentials\nCLIENT_ID=$(echo $AZURE_CREDENTIALS | jq -r '.clientId')\nCLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r '.clientSecret')\nSUBSCRIPTION_ID=$(echo $AZURE_CREDENTIALS | jq -r '.subscriptionId')\nTENANT_ID=$(echo $AZURE_CREDENTIALS | jq -r '.tenantId')\n\n# Login to Azure\ndocker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  mcr.microsoft.com/azure-cli:latest \\\n  az login --service-principal \\\n  --username \"$CLIENT_ID\" \\\n  --password \"$CLIENT_SECRET\" \\\n  --tenant \"$TENANT_ID\"\n\n# Set subscription\ndocker run --rm \\\n  -v ${{ github.workspace }}:/workspace \\\n  mcr.microsoft.com/azure-cli:latest \\\n  az account set --subscription \"$SUBSCRIPTION_ID\"\n` was unexpected","path":"/src/.github/actions/deploy-ephemeral/action.yml","spans":[{"file":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":73,"col":18,"offset":2465},"end":{"line":94,"col":52,"offset":3173}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":110,"col":28,"offset":3411},"end":{"line":110,"col":58,"offset":3441}},{"path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":130,"col":13,"offset":3411},"end":{"line":130,"col":34,"offset":3432}},{"path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":131,"col":17,"offset":3411},"end":{"line":131,"col":34,"offset":3428}},{"path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":135,"col":25,"offset":3411},"end":{"line":135,"col":49,"offset":3435}}]],"message":"Syntax error at line /src/.github/actions/deploy-ephemeral/action.yml:110:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ inputs.resource-group-suffix` was unexpected","path":"/src/.github/actions/deploy-ephemeral/action.yml","spans":[{"file":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":110,"col":28,"offset":3411},"end":{"line":110,"col":58,"offset":3441}},{"file":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":130,"col":13,"offset":3411},"end":{"line":130,"col":34,"offset":3432}},{"file":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":131,"col":17,"offset":3411},"end":{"line":131,"col":34,"offset":3428}},{"file":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":135,"col":25,"offset":3411},"end":{"line":135,"col":49,"offset":3435}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":340,"col":18,"offset":11543},"end":{"line":367,"col":19,"offset":12295}}]],"message":"Syntax error at line /src/.github/actions/deploy-ephemeral/action.yml:340:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`Pf Running health checks on ephemeral environment...\"\n\n# Create health check script\ncat > health_check.sh << 'EOF'\n#!/bin/bash\n\nENV_URL=\"${{ steps.deploy.outputs.environment-url }}\"\n\nif [ \"$ENV_URL\" = \"Not available\" ]; then\n  echo \"Environment URL not available, skipping health checks\"\n  exit 0\nfi\n\necho \"Testing environment health at: $ENV_URL\"\n\n# Basic connectivity test\nif curl -f -s -o /dev/null --max-time 30 \"$ENV_URL/health\" || curl -f -s -o /dev/null --max-time 30 \"$ENV_URL\"; then\n  echo \"Environment is responding to HTTP requests\"\nelse\n  echo \"Environment is not responding to HTTP requests\"\nfi\n\n# Additional service-specific health checks can be added here\necho \"Health check completed\"\nEOF\n\nchmod +x health_check.sh\n./health_check.sh\n` was unexpected","path":"/src/.github/actions/deploy-ephemeral/action.yml","spans":[{"file":"/src/.github/actions/deploy-ephemeral/action.yml","start":{"line":340,"col":18,"offset":11543},"end":{"line":367,"col":19,"offset":12295}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/lint-workflows/action.yml","start":{"line":44,"col":11,"offset":946},"end":{"line":44,"col":33,"offset":968}}]],"message":"Syntax error at line /src/.github/actions/lint-workflows/action.yml:44:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ inputs.fail-on-error` was unexpected","path":"/src/.github/actions/lint-workflows/action.yml","spans":[{"file":"/src/.github/actions/lint-workflows/action.yml","start":{"line":44,"col":11,"offset":946},"end":{"line":44,"col":33,"offset":968}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/lint-workflows/action.yml","start":{"line":63,"col":11,"offset":1432},"end":{"line":63,"col":33,"offset":1454}}]],"message":"Syntax error at line /src/.github/actions/lint-workflows/action.yml:63:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ inputs.fail-on-error` was unexpected","path":"/src/.github/actions/lint-workflows/action.yml","spans":[{"file":"/src/.github/actions/lint-workflows/action.yml","start":{"line":63,"col":11,"offset":1432},"end":{"line":63,"col":33,"offset":1454}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/lint-workflows/action.yml","start":{"line":73,"col":22,"offset":1944},"end":{"line":73,"col":55,"offset":1977}}]],"message":"Syntax error at line /src/.github/actions/lint-workflows/action.yml:73:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.actionlint.outputs.passed` was unexpected","path":"/src/.github/actions/lint-workflows/action.yml","spans":[{"file":"/src/.github/actions/lint-workflows/action.yml","start":{"line":73,"col":22,"offset":1944},"end":{"line":73,"col":55,"offset":1977}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/lint-workflows/action.yml","start":{"line":87,"col":20,"offset":2322},"end":{"line":87,"col":51,"offset":2353}},{"path":"/src/.github/actions/lint-workflows/action.yml","start":{"line":88,"col":22,"offset":2322},"end":{"line":88,"col":66,"offset":2366}}]],"message":"Syntax error at line /src/.github/actions/lint-workflows/action.yml:87:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.yamllint.outputs.passed` was unexpected","path":"/src/.github/actions/lint-workflows/action.yml","spans":[{"file":"/src/.github/actions/lint-workflows/action.yml","start":{"line":87,"col":20,"offset":2322},"end":{"line":87,"col":51,"offset":2353}},{"file":"/src/.github/actions/lint-workflows/action.yml","start":{"line":88,"col":22,"offset":2322},"end":{"line":88,"col":66,"offset":2366}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/security-scan/action.yml","start":{"line":37,"col":20,"offset":1039},"end":{"line":37,"col":23,"offset":1042}}]],"message":"Syntax error at line /src/.github/actions/security-scan/action.yml:37:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected","path":"/src/.github/actions/security-scan/action.yml","spans":[{"file":"/src/.github/actions/security-scan/action.yml","start":{"line":37,"col":20,"offset":1039},"end":{"line":37,"col":23,"offset":1042}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/security-scan/action.yml","start":{"line":53,"col":27,"offset":1404},"end":{"line":53,"col":45,"offset":1422}}]],"message":"Syntax error at line /src/.github/actions/security-scan/action.yml:53:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ github.workspace` was unexpected","path":"/src/.github/actions/security-scan/action.yml","spans":[{"file":"/src/.github/actions/security-scan/action.yml","start":{"line":53,"col":27,"offset":1404},"end":{"line":53,"col":45,"offset":1422}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/security-scan/action.yml","start":{"line":65,"col":20,"offset":2149},"end":{"line":65,"col":23,"offset":2152}}]],"message":"Syntax error at line /src/.github/actions/security-scan/action.yml:65:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected","path":"/src/.github/actions/security-scan/action.yml","spans":[{"file":"/src/.github/actions/security-scan/action.yml","start":{"line":65,"col":20,"offset":2149},"end":{"line":65,"col":23,"offset":2152}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/security-scan/action.yml","start":{"line":79,"col":25,"offset":2458},"end":{"line":79,"col":43,"offset":2476}}]],"message":"Syntax error at line /src/.github/actions/security-scan/action.yml:79:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ github.workspace` was unexpected","path":"/src/.github/actions/security-scan/action.yml","spans":[{"file":"/src/.github/actions/security-scan/action.yml","start":{"line":79,"col":25,"offset":2458},"end":{"line":79,"col":43,"offset":2476}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/security-scan/action.yml","start":{"line":98,"col":20,"offset":3518},"end":{"line":98,"col":23,"offset":3521}}]],"message":"Syntax error at line /src/.github/actions/security-scan/action.yml:98:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected","path":"/src/.github/actions/security-scan/action.yml","spans":[{"file":"/src/.github/actions/security-scan/action.yml","start":{"line":98,"col":20,"offset":3518},"end":{"line":98,"col":23,"offset":3521}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/security-scan/action.yml","start":{"line":110,"col":18,"offset":3934},"end":{"line":169,"col":5,"offset":5791}}]],"message":"Syntax error at line /src/.github/actions/security-scan/action.yml:110:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `\"R`TK Evaluating security scan results...\"\n\ncritical_count=0\nhigh_count=0\nmedium_count=0\n\n# Count issues from various scan results\nif [ -f \"security-results/trivy-infra.sarif\" ]; then\n  trivy_critical=\"$(jq -r '.runs[0].results[] | select(.level == \"error\") | .ruleId' security-results/trivy-infra.sarif 2>/dev/null | wc -l)\" || trivy_critical=\"0\"\n  critical_count=$((critical_count + trivy_critical))\nfi\n\nif [ -f \"security-results/semgrep.sarif\" ]; then\n  semgrep_critical=\"$(jq -r '.runs[0].results[] | select(.level == \"error\") | .ruleId' security-results/semgrep.sarif 2>/dev/null | wc -l)\" || semgrep_critical=\"0\"\n  critical_count=$((critical_count + semgrep_critical))\nfi\n\necho \"Critical vulnerabilities found: $critical_count\"\necho \"critical-count=$critical_count\" >> \"$GITHUB_OUTPUT\"\n\n# Determine if scan passed\nfail_on_critical=\"${{ inputs.fail-on-critical }}\"\nif [ \"$critical_count\" -eq 0 ] || [ \"$fail_on_critical\" != \"true\" ]; then\n  echo \"passed=true\" >> \"$GITHUB_OUTPUT\"\n  echo \"Security scan passed\"\nelse\n  echo \"passed=false\" >> \"$GITHUB_OUTPUT\"\n  echo \"Security scan failed - $critical_count critical issues found\"\nfi\n\n# Generate summary report\nreport_timestamp=\"$(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\"\nif [ \"$critical_count\" -eq 0 ]; then\n  status_message=\"**PASSED** - No critical vulnerabilities found\"\nelse\n  status_message=\"**FAILED** - Critical vulnerabilities require attention\"\nfi\n\ncat > security-results/summary.md << EOF\n# Security Scan Summary\n\n**Environment**: ${{ inputs.environment }}\n**Timestamp**: $report_timestamp\n\n## Results\n- **Critical**: $critical_count\n- **High**: $high_count\n- **Medium**: $medium_count\n\n## Status\n$status_message\n\n## Scans Performed\n- Trivy (Infrastructure & Containers)\n- Semgrep (SAST)\n- Safety (Python dependencies)\n- Bandit (Python security)\n- Checkov (Infrastructure as Code)\n- SBOM Analysis\nEOF\n` was unexpected","path":"/src/.github/actions/security-scan/action.yml","spans":[{"file":"/src/.github/actions/security-scan/action.yml","start":{"line":110,"col":18,"offset":3934},"end":{"line":169,"col":5,"offset":5791}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/actions/security-scan/action.yml","start":{"line":192,"col":47,"offset":6817},"end":{"line":192,"col":86,"offset":6856}}]],"message":"Syntax error at line /src/.github/actions/security-scan/action.yml:192:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ steps.evaluate.outputs.critical-count` was unexpected","path":"/src/.github/actions/security-scan/action.yml","spans":[{"file":"/src/.github/actions/security-scan/action.yml","start":{"line":192,"col":47,"offset":6817},"end":{"line":192,"col":86,"offset":6856}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/.github/workflows/cicd-pipeline.yml","start":{"line":187,"col":19,"offset":5437},"end":{"line":187,"col":71,"offset":5489}}]],"message":"Syntax error at line /src/.github/workflows/cicd-pipeline.yml:187:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `{ needs.production-deployment.outputs.deployment-url` was unexpected","path":"/src/.github/workflows/cicd-pipeline.yml","spans":[{"file":"/src/.github/workflows/cicd-pipeline.yml","start":{"line":187,"col":19,"offset":5437},"end":{"line":187,"col":71,"offset":5489}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/containers/site-generator/templates/article.html","start":{"line":1,"col":1,"offset":0},"end":{"line":5,"col":23,"offset":129}},{"path":"/src/containers/site-generator/templates/article.html","start":{"line":90,"col":1,"offset":0},"end":{"line":90,"col":15,"offset":14}}]],"message":"Syntax error at line /src/containers/site-generator/templates/article.html:1:\n `{% extends \"base.html\" %}\n\n{% block title %}{{ article.title }} | {{ site_metadata.title }}{% endblock %}\n\n{% block extra_head %}` was unexpected","path":"/src/containers/site-generator/templates/article.html","spans":[{"file":"/src/containers/site-generator/templates/article.html","start":{"line":1,"col":1,"offset":0},"end":{"line":5,"col":23,"offset":129}},{"file":"/src/containers/site-generator/templates/article.html","start":{"line":90,"col":1,"offset":0},"end":{"line":90,"col":15,"offset":14}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/src/containers/site-generator/templates/index.html","start":{"line":1,"col":1,"offset":0},"end":{"line":3,"col":20,"offset":46}},{"path":"/src/containers/site-generator/templates/index.html","start":{"line":28,"col":73,"offset":0},"end":{"line":28,"col":95,"offset":22}},{"path":"/src/containers/site-generator/templates/index.html","start":{"line":43,"col":1,"offset":0},"end":{"line":43,"col":30,"offset":29}},{"path":"/src/containers/site-generator/templates/index.html","start":{"line":48,"col":1,"offset":0},"end":{"line":49,"col":15,"offset":26}}]],"message":"Syntax error at line /src/containers/site-generator/templates/index.html:1:\n `{% extends \"base.html\" %}\n\n{% block content %}` was unexpected","path":"/src/containers/site-generator/templates/index.html","spans":[{"file":"/src/containers/site-generator/templates/index.html","start":{"line":1,"col":1,"offset":0},"end":{"line":3,"col":20,"offset":46}},{"file":"/src/containers/site-generator/templates/index.html","start":{"line":28,"col":73,"offset":0},"end":{"line":28,"col":95,"offset":22}},{"file":"/src/containers/site-generator/templates/index.html","start":{"line":43,"col":1,"offset":0},"end":{"line":43,"col":30,"offset":29}},{"file":"/src/containers/site-generator/templates/index.html","start":{"line":48,"col":1,"offset":0},"end":{"line":49,"col":15,"offset":26}}]}],"paths":{"scanned":["/src/.checkov.yml","/src/.env","/src/.github/actions/ai-review-cost/action.yml","/src/.github/actions/ai-review-operations/action.yml","/src/.github/actions/ai-review-security/action.yml","/src/.github/actions/cleanup-ephemeral/action.yml","/src/.github/actions/container-tests/action.yml","/src/.github/actions/cost-analysis/action.yml","/src/.github/actions/deploy-ephemeral/action.yml","/src/.github/actions/lint-workflows/action.yml","/src/.github/actions/security-scan/action.yml","/src/.github/dependabot.yml","/src/.github/workflows/cicd-pipeline.yml","/src/.gitignore","/src/.markdownlint.json","/src/.semgrepignore","/src/.yamllint.yml","/src/containers/collector-scheduler/Dockerfile","/src/containers/collector-scheduler/main.py","/src/containers/collector-scheduler/requirements.txt","/src/containers/content-collector/Dockerfile","/src/containers/content-collector/__init__.py","/src/containers/content-collector/collector.py","/src/containers/content-collector/config.py","/src/containers/content-collector/keyvault_client.py","/src/containers/content-collector/main.py","/src/containers/content-collector/models.py","/src/containers/content-collector/pyproject.toml","/src/containers/content-collector/requirements.txt","/src/containers/content-collector/service_logic.py","/src/containers/content-collector/source_collectors.py","/src/containers/content-collector/transforms.py","/src/containers/content-enricher/Dockerfile","/src/containers/content-enricher/__init__.py","/src/containers/content-enricher/config.py","/src/containers/content-enricher/content_summarizer.py","/src/containers/content-enricher/enricher.py","/src/containers/content-enricher/main.py","/src/containers/content-enricher/mypy.ini","/src/containers/content-enricher/pyproject.toml","/src/containers/content-enricher/requirements.txt","/src/containers/content-enricher/sentiment_analyzer.py","/src/containers/content-enricher/service_logic.py","/src/containers/content-enricher/topic_classifier.py","/src/containers/content-enricher/trend_calculator.py","/src/containers/content-generator/Dockerfile","/src/containers/content-generator/blob_events.py","/src/containers/content-generator/config.py","/src/containers/content-generator/health.py","/src/containers/content-generator/main.py","/src/containers/content-generator/models.py","/src/containers/content-generator/requirements.txt","/src/containers/content-generator/service_logic.py","/src/containers/content-processor/Dockerfile","/src/containers/content-processor/config.py","/src/containers/content-processor/main.py","/src/containers/content-processor/processor.py","/src/containers/content-processor/pyproject.toml","/src/containers/content-processor/requirements.txt","/src/containers/content-processor/service_logic.py","/src/containers/content-ranker/Dockerfile","/src/containers/content-ranker/config.py","/src/containers/content-ranker/debug_blob.py","/src/containers/content-ranker/main.py","/src/containers/content-ranker/models.py","/src/containers/content-ranker/ranker.py","/src/containers/content-ranker/requirements.txt","/src/containers/content-ranker/service_logic.py","/src/containers/markdown-generator/.dockerignore","/src/containers/markdown-generator/Dockerfile","/src/containers/markdown-generator/blob_storage.py","/src/containers/markdown-generator/config.py","/src/containers/markdown-generator/health.py","/src/containers/markdown-generator/main.py","/src/containers/markdown-generator/main_new.py","/src/containers/markdown-generator/models.py","/src/containers/markdown-generator/requirements.txt","/src/containers/markdown-generator/service_logic.py","/src/containers/site-generator/Dockerfile","/src/containers/site-generator/config.py","/src/containers/site-generator/health.py","/src/containers/site-generator/main.py","/src/containers/site-generator/main_new.py","/src/containers/site-generator/main_old.py","/src/containers/site-generator/models.py","/src/containers/site-generator/requirements.txt","/src/containers/site-generator/service_logic.py","/src/containers/site-generator/template_manager.py","/src/containers/site-generator/templates/article.html","/src/containers/site-generator/templates/base.html","/src/containers/site-generator/templates/index.html","/src/containers/site-generator/templates/style.css","/src/fix_vulnerabilities.py","/src/infra/.infracost/pricing.gob","/src/infra/.infracost/terraform_modules/manifest.json","/src/infra/container_apps.tf","/src/infra/core/.terraform.lock.hcl","/src/infra/core/main.tf","/src/infra/core/outputs.tf","/src/infra/core/terraform.tfstate.local-backup","/src/infra/core/variables.tf","/src/infra/cost_monitoring.tf","/src/infra/environments/main.tf","/src/infra/environments/outputs.tf","/src/infra/environments/variables.tf","/src/infra/main.tf","/src/infra/outputs.tf","/src/infra/providers.tf","/src/infra/sbom-infrastructure.txt","/src/infra/usage-estimates.yml","/src/infra/variables.tf","/src/libs/__init__.py","/src/libs/blob_storage.py","/src/libs/pyproject.toml","/src/python-safety-results.json"]},"time":{"rules":[],"rules_parse_time":7.157348155975342,"profiling_times":{"config_time":17.464858293533325,"core_time":12.275433778762817,"ignores_time":0.004886627197265625,"total_time":29.74755048751831},"parsing_time":{"total_time":1.6689174175262451,"per_file_time":{"mean":0.019406016482863313,"std_dev":0.0006345820131157702},"very_slow_stats":{"time_ratio":0.0,"count_ratio":0.0},"very_slow_files":[]},"scanning_time":{"total_time":20.872076511383057,"per_file_time":{"mean":0.0644199892326637,"std_dev":0.044799704436786776},"very_slow_stats":{"time_ratio":0.3162492289291328,"count_ratio":0.012345679012345678},"very_slow_files":[{"fpath":"/src/containers/site-generator/main_old.py","ftime":1.5746541023254395},{"fpath":"/src/containers/content-collector/source_collectors.py","ftime":1.6182310581207275},{"fpath":"/src/containers/content-collector/collector.py","ftime":1.626220941543579},{"fpath":"/src/containers/content-generator/service_logic.py","ftime":1.7816720008850098}]},"matching_time":{"total_time":10.68751049041748,"per_file_and_rule_time":{"mean":0.007510548482373492,"std_dev":0.0007241548707652455},"very_slow_stats":{"time_ratio":0.347492546178092,"count_ratio":0.014757554462403373},"very_slow_rules_on_files":[{"fpath":"/src/containers/content-enricher/config.py","rule_id":"python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","time":0.13326096534729004},{"fpath":"/src/containers/site-generator/main_old.py","rule_id":"python.lang.security.dangerous-system-call.dangerous-system-call","time":0.14789891242980957},{"fpath":"/src/containers/site-generator/main_old.py","rule_id":"python.django.security.injection.command.command-injection-os-system.command-injection-os-system","time":0.1622450351715088},{"fpath":"/src/containers/content-ranker/models.py","rule_id":"python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","time":0.16672420501708984},{"fpath":"/src/containers/site-generator/main_old.py","rule_id":"python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open","time":0.17260098457336426},{"fpath":"/src/containers/site-generator/models.py","rule_id":"python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","time":0.20115399360656738},{"fpath":"/src/containers/content-generator/service_logic.py","rule_id":"python.lang.security.dangerous-system-call.dangerous-system-call","time":0.2271728515625},{"fpath":"/src/containers/site-generator/health.py","rule_id":"python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","time":0.27029991149902344},{"fpath":"/src/containers/content-collector/source_collectors.py","rule_id":"python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","time":0.4525461196899414},{"fpath":"/src/containers/content-collector/collector.py","rule_id":"python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http","time":0.5262799263000488}]},"tainting_time":{"total_time":3.473757028579712,"per_def_and_rule_time":{"mean":0.0014934467018829375,"std_dev":4.42791056719854e-05},"very_slow_stats":{"time_ratio":0.15033576200070928,"count_ratio":0.0017196904557179708},"very_slow_rules_on_defs":[{"fpath":"/src/containers/site-generator/service_logic.py","fline":548,"rule_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","time":0.05169391632080078},{"fpath":"/src/containers/content-collector/collector.py","fline":339,"rule_id":"python.boto3.security.hardcoded-token.hardcoded-token","time":0.07340598106384277},{"fpath":"/src/containers/content-enricher/topic_classifier.py","fline":11,"rule_id":"python.boto3.security.hardcoded-token.hardcoded-token","time":0.17957615852355957},{"fpath":"/src/containers/content-collector/source_collectors.py","fline":427,"rule_id":"python.boto3.security.hardcoded-token.hardcoded-token","time":0.21755385398864746}]},"targets":[],"total_bytes":0,"max_memory_bytes":1105434944},"engine_requested":"OSS","skipped_rules":[]}