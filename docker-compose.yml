services:
  content-processor:
    build:
      context: ./containers/content-processor
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - HOST=0.0.0.0
      - PORT=8000
      # Azure credentials (set these in .env file or environment)
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET:-}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID:-}
      # Reddit credentials (set these in .env file)
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID:-}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET:-}
      - REDDIT_USER_AGENT=${REDDIT_USER_AGENT:-}
    volumes:
      - ./containers/content-processor:/app
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  content-ranker:
    build:
      context: ./containers/content-ranker
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=development
      - HOST=0.0.0.0
      - PORT=8001
      # Azure Storage (local development uses Azurite)
      - AZURE_STORAGE_CONNECTION_STRING=${AZURE_STORAGE_CONNECTION_STRING:-DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;}
      - AZURE_STORAGE_ACCOUNT_NAME=${AZURE_STORAGE_ACCOUNT_NAME:-}
      # Azure credentials for production
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET:-}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID:-}
    volumes:
      - ./containers/content-ranker:/app
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8001/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - azurite

  content-enricher:
    build:
      context: ./containers/content-enricher
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=development
      - HOST=0.0.0.0
      - PORT=8002
      # Azure Storage (local development uses Azurite)
      - AZURE_STORAGE_CONNECTION_STRING=${AZURE_STORAGE_CONNECTION_STRING:-DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;}
      - AZURE_STORAGE_ACCOUNT_NAME=${AZURE_STORAGE_ACCOUNT_NAME:-}
      # Azure credentials for production
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET:-}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID:-}
      # OpenAI credentials for content enhancement
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    volumes:
      - ./containers/content-enricher:/app
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8002/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - azurite

  scheduler:
    build:
      context: ./containers/scheduler
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=development
      - HOST=0.0.0.0
      - PORT=8003
      # Service URLs for orchestration
      - CONTENT_PROCESSOR_URL=http://content-processor:8000
      - CONTENT_RANKER_URL=http://content-ranker:8001
      - CONTENT_ENRICHER_URL=http://content-enricher:8002
      - SSG_URL=http://ssg:3000
      # Redis for job queuing
      - REDIS_URL=redis://redis:6379
      # Azure Storage
      - AZURE_STORAGE_CONNECTION_STRING=${AZURE_STORAGE_CONNECTION_STRING:-DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;}
    volumes:
      - ./containers/scheduler:/app
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8003/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - content-processor
      - content-ranker
      - content-enricher
      - azurite
      - redis

  ssg:
    build:
      context: ./containers/ssg
      dockerfile: Dockerfile
      target: dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - CONTENT_PROCESSOR_URL=http://content-processor:8000
      - CONTENT_RANKER_URL=http://content-ranker:8001
    volumes:
      - ./containers/ssg:/app
      - /app/node_modules
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - content-processor
      - content-ranker

  # Local blob storage emulation
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    ports:
      - "10000:10000"  # Blob service
      - "10001:10001"  # Queue service
      - "10002:10002"  # Table service
    command: "azurite --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0"
    volumes:
      - azurite_data:/data

  # Redis for job queuing and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  app_data:
  azurite_data:
  redis_data:
